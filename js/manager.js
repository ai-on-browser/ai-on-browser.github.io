var l=Object.defineProperty;var _=(h,t)=>l(h,"name",{value:t,configurable:!0});import{DefaultPlatform as m}from"./platform/base.js";import{EmptyData as p}from"./data/base.js";import f from"./data/manual.js";import{EventEmitter as d}from"./utils.js";const i={"":m},r={"":p,manual:f},a={},n={};export default class u{static{_(this,"AIManager")}constructor(t){this._setting=t,this._platform=new m(this),this._task="",this._datas=new f(this),this._dataset="manual",this._preprocess=[],this._preprocessnames=[],this._modelname="",this._terminateFunction=[],this._emitter=new d}get platform(){return this._platform}get task(){return this._task}get preprocesses(){return this._preprocess}get setting(){return this._setting}get datas(){return this._datas}onReady(t){if(this._platform&&this._datas)return t();this._emitter.once("ready",t)}resolveListenersIfCan(){this._platform&&this._datas&&this._emitter.emit("ready")}requiredRenderers(t){this._requireRenderers=t,this._platform&&this._requireRenderers&&this._platform._renderer.push(...this._requireRenderers.map(s=>new s(this)))}async setTask(t){if(!this._platform)return;if(this._task===t){this._platform.init();return}this._platform.terminate(),this._platform=null,this._task=t;let s="";if(this._task==="MD"||this._task==="GM"?s="rl":this._task==="TP"||this._task==="SM"||this._task==="CP"?s="series":this._task==="SG"||this._task==="DN"||this._task==="ED"?s="image":this._task==="WE"?s="document":this._task==="SC"?s="semisupervised":this._task==="RC"&&(s="recommend"),!i[s]){const e=await import(`./platform/${s}.js`);i[s]=e.default}if(t==="MD"||t==="GM")return new Promise(e=>{new i[s](this,o=>{this._platform=o,this._platform.init(),this._setting.ml.modelName||o.render(),this.resolveListenersIfCan(),e()})});this._platform=new i[s](this),this._requireRenderers&&this._platform._renderer.push(...this._requireRenderers.map(e=>new e(this))),this._platform.init(),this.resolveListenersIfCan()}async setPreprocess(t){if(t!==this._preprocessnames[0]&&(this._preprocess.forEach(s=>s.terminate()),this._preprocess=[],this._preprocessnames=[],!!t)){if(this._preprocessnames=[t],!a[t]){const s=await import(`./preprocess/${t}.js`);a[t]=s.default}this._preprocess=[new a[t](this)]}}async setData(t){if(this._datas.terminate(),this._datas=null,this._dataset=t,!r[this._dataset]){const s=await import(`./data/${t}.js`);r[t]=s.default}this._datas=new r[this._dataset](this),this._platform?.init(),this.resolveListenersIfCan()}async setModel(t){if(this._terminateFunction.forEach(s=>s()),this._terminateFunction=[],this._modelname=t,t){if(!n[t]){const s=await import(`./view/${t}.js`);n[t]=s.default}}else return;try{const s=n[t](this.platform);s&&this._terminateFunction.push(s)}catch(s){return console.error(s),s}}}
