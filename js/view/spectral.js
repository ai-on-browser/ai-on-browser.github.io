import SpectralClustering from"../../lib/model/spectral.js";import Controller from"../controller.js";var dispSpectral=function(e,t){t.setting.ml.reference={title:"Spectral clustering (Wikipedia)",url:"https://en.wikipedia.org/wiki/Spectral_clustering"};const n=new Controller(t);let l=null;const a=n.select(["rbf","knn"]).on("change",(()=>{const e=a.value;r.selectAll("*").style("display","none"),r.selectAll(`.${e}`).style("display","inline")})),r=e.append("span");r.append("span").classed("rbf",!0).text("s ="),r.append("input").attr("type","number").attr("name","sigma").classed("rbf",!0).attr("min",.01).attr("max",100).attr("step",.01).property("value",1),r.append("span").classed("knn",!0).text("k ="),r.append("input").attr("type","number").attr("name","k_nearest").classed("knn",!0).attr("min",1).attr("max",100).property("value",10),r.selectAll(`:not(.${a.value})`).style("display","none");const p=n.stepLoopButtons().init((()=>{const n={sigma:+r.select("[name=sigma]").property("value"),k:+r.select("[name=k_nearest]").property("value")};l=new SpectralClustering(a.value,n),l.init(t.trainInput),e.select("[name=clusternumber]").text(l.size),s.selectAll("input").attr("disabled",null)})),s=e.append("span");s.append("input").attr("type","button").attr("value","Add cluster").on("click",(()=>{l.add();let n=l.predict();t.trainResult=n.map((e=>e+1)),e.select("[name=clusternumber]").text(l.size)})),s.append("span").attr("name","clusternumber").text("0"),s.append("span").text(" clusters"),s.append("input").attr("type","button").attr("value","Clear cluster").on("click",(()=>{l.clear(),e.select("[name=clusternumber]").text("0")})),p.step((e=>{if(0===l.size)return;l.fit();let n=l.predict();t.trainResult=n.map((e=>e+1)),e&&e()})).epoch((()=>l.epoch)),s.selectAll("input").attr("disabled",!0)};export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Then, click "Add cluster". Finally, click "Step" button repeatedly.',dispSpectral(e.setting.ml.configElement,e)}