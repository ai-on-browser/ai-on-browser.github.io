import Matrix from"../../lib/util/matrix.js";import{BasisFunctions}from"./least_square.js";import Lasso from"../../lib/model/lasso.js";import Controller from"../controller.js";var dispLasso=function(t,e){const n=new Controller(e);let o=null;const a=e.task,i=new BasisFunctions(e);"FS"!==a&&i.makeHtml(t),t.append("select").attr("name","method").selectAll("option").data(["CD","ISTA","LARS"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text("lambda = "),t.append("select").attr("name","lambda").selectAll("option").data([0,1e-4,.001,.01,.1,1,10,100]).enter().append("option").property("value",(t=>t)).text((t=>t)),n.stepLoopButtons().init((()=>{o=new Lasso(+t.select("[name=lambda]").property("value"),t.select("[name=method]").property("value")),e.init()})).step((t=>{e.fit(((n,l,s)=>{if("FS"===a){o.fit(n,l);const a=o.importance().map(((t,e)=>[t,e]));a.sort(((t,e)=>e[0]-t[0]));const i=e.dimension,r=a.map((t=>t[1])).slice(0,i);s(Matrix.fromArray(n).col(r).toArray()),t&&t()}else o.fit(i.apply(n).toArray(),l),e.predict(((e,n)=>{n(o.predict(i.apply(e).toArray())),t&&t()}),4)}))})).epoch()};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',dispLasso(t.setting.ml.configElement,t),t.setting.ml.detail="\nThe model form is\n$$\nf(X) = X W + \\epsilon\n$$\n\nThe loss function can be written as\n$$\nL(W) = \\| X W - y \\|^2 + \\lambda \\| W \\|_1\n$$\nwhere $ y $ is the observed value corresponding to $ X $.\n"}