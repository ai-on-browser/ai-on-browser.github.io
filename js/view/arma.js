var g=Object.defineProperty;var o=(t,n)=>g(t,"name",{value:n,configurable:!0});import v from"../../lib/model/arma.js";import y from"../controller.js";var h=o(function(t,n){const l=new y(n);let a=null;const c=o(s=>{const m=+t.select("[name=p]").property("value"),f=+t.select("[name=q]").property("value"),u=+t.select("[name=c]").property("value"),i=n.trainInput;if(!a){a=[];for(let e=0;e<i[0].length;e++)a[e]=new v(m,f)}const r=[];for(let e=0;e<u;r[e++]=[]);for(let e=0;e<i[0].length;e++){const d=i.map(p=>p[e]);a[e].fit(d);const x=a[e].predict(d,u);for(let p=0;p<r.length;p++)r[p][e]=x[p]}n.trainResult=r,s&&s()},"fitModel");t.append("span").text("p"),t.append("input").attr("type","number").attr("name","p").attr("min",0).attr("max",1e3).attr("value",1),t.append("span").text("q"),t.append("input").attr("type","number").attr("name","q").attr("min",0).attr("max",1e3).attr("value",1),l.stepLoopButtons().init(()=>{a=null,n.resetPredicts()}).step(c).epoch(),t.append("span").text("predict count"),t.append("input").attr("type","number").attr("name","c").attr("min",1).attr("max",100).attr("value",100).on("change",()=>c())},"dispARMA");export default function q(t){t.setting.ml.usage='Click and add data point. Click "fit" to update.',h(t.setting.ml.configElement,t)}o(q,"default");
