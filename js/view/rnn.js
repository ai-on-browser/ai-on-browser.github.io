import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class RNNWorker extends BaseWorker{constructor(){super("js/view/worker/rnn_worker.js",{type:"module"})}initialize(e,t,i,n,a,o){this._postMessage({mode:"init",method:e,window:t,unit:i,out_size:n,optimizer:a},o)}fit(e,t,i,n,a,o){this._postMessage({mode:"fit",x:e,y:t,iteration:i,rate:n,batch:a},o)}predict(e,t,i){this._postMessage({mode:"predict",x:e,k:t},i)}}export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new Controller(e),i=new RNNWorker;let n=0;const a=t.select(["rnn","LSTM","GRU"]),o=t.input.number({label:"window width",min:1,max:1e3,value:30}),r=t.stepLoopButtons().init((()=>{0!==e.datas.length&&(i.initialize(a.value.toLowerCase(),o.value,3,e.trainInput[0].length),e.init())})),l=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),s=t.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),u=t.input.number({label:" Batch size ",min:1,max:100,value:10});r.step((t=>{i.fit(e.trainInput,e.trainInput,+l.value,s.value,u.value,(a=>{n=a.data.epoch,e.plotLoss(a.data.loss),i.predict(e.trainInput,p.value,(i=>{const n=i.data;e.trainResult=n,t&&t()}))}))})).epoch((()=>n));const p=t.input.number({label:" predict count",min:1,max:1e3,value:100});e.setting.ternimate=()=>{i.terminate()}}