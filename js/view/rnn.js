var h=Object.defineProperty;var o=(t,e)=>h(t,"name",{value:e,configurable:!0});import w from"../controller.js";import{BaseWorker as b}from"../utils.js";class g extends b{static{o(this,"RNNWorker")}constructor(){super("js/view/worker/model_worker.js",{type:"module"})}initialize(e,n,a,i,s){return this._postMessage({name:"rnn",method:"constructor",arguments:[e,n,a,i,s]})}epoch(){return this._postMessage({name:"rnn",method:"epoch"}).then(e=>e.data)}fit(e,n,a,i,s){return this._postMessage({name:"rnn",method:"fit",arguments:[e,n,a,i,s]}).then(u=>u.data)}predict(e,n){return this._postMessage({name:"rnn",method:"predict",arguments:[e,n]}).then(a=>a.data)}}export default function v(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new w(t),n=new g;let a=0;const i=o(async()=>{const r=await n.fit(t.trainInput,t.trainInput,+c.value,d.value,p.value);a=await n.epoch(),t.plotLoss(r),t.trainResult=await n.predict(t.trainInput,m.value)},"fitModel"),s=e.select(["rnn","LSTM","GRU"]),u=e.input.number({label:"window width",min:1,max:1e3,value:30}),l=e.stepLoopButtons().init(r=>{if(t.datas.length===0){r();return}n.initialize(s.value.toLowerCase(),u.value,3,t.trainInput[0].length).then(r),t.init()}),c=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),d=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),p=e.input.number({label:" Batch size ",min:1,max:100,value:10});l.step(i).epoch(()=>a);const m=e.input.number({label:" predict count",min:1,max:1e3,value:100});return()=>{n.terminate()}}o(v,"default");
