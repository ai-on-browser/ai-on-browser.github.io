var w=Object.defineProperty;var r=(t,e)=>w(t,"name",{value:e,configurable:!0});import b from"../controller.js";import{BaseWorker as v}from"../utils.js";class g extends v{static{r(this,"RNNWorker")}constructor(){super("js/view/worker/rnn_worker.js",{type:"module"})}initialize(e,n,i,a,s){return this._postMessage({mode:"init",method:e,window:n,unit:i,out_size:a,optimizer:s})}fit(e,n,i,a,s){return this._postMessage({mode:"fit",x:e,y:n,iteration:i,rate:a,batch:s})}predict(e,n){return this._postMessage({mode:"predict",x:e,k:n})}}export default function x(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new b(t),n=new g;let i=0;const a=r(async()=>{const o=await n.fit(t.trainInput,t.trainInput,+c.value,d.value,p.value);i=o.data.epoch,t.plotLoss(o.data.loss);const h=await n.predict(t.trainInput,m.value);t.trainResult=h.data},"fitModel"),s=e.select(["rnn","LSTM","GRU"]),l=e.input.number({label:"window width",min:1,max:1e3,value:30}),u=e.stepLoopButtons().init(o=>{if(t.datas.length===0){o();return}n.initialize(s.value.toLowerCase(),l.value,3,t.trainInput[0].length).then(o),t.init()}),c=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),d=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),p=e.input.number({label:" Batch size ",min:1,max:100,value:10});u.step(a).epoch(()=>i);const m=e.input.number({label:" predict count",min:1,max:1e3,value:100});return()=>{n.terminate()}}r(x,"default");
