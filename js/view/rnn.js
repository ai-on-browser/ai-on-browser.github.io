import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class RNNWorker extends BaseWorker{constructor(){super("js/view/worker/rnn_worker.js",{type:"module"})}initialize(t,e,i,n,a){return this._postMessage({mode:"init",method:t,window:e,unit:i,out_size:n,optimizer:a})}fit(t,e,i,n,a){return this._postMessage({mode:"fit",x:t,y:e,iteration:i,rate:n,batch:a})}predict(t,e){return this._postMessage({mode:"predict",x:t,k:e})}}export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new Controller(t),i=new RNNWorker;let n=0;const a=e.select(["rnn","LSTM","GRU"]),r=e.input.number({label:"window width",min:1,max:1e3,value:30}),o=e.stepLoopButtons().init((e=>{0!==t.datas.length?(i.initialize(a.value.toLowerCase(),r.value,3,t.trainInput[0].length).then(e),t.init()):e()})),l=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),s=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),u=e.input.number({label:" Batch size ",min:1,max:100,value:10});o.step((async e=>{const a=await i.fit(t.trainInput,t.trainInput,+l.value,s.value,u.value);n=a.data.epoch,t.plotLoss(a.data.loss);const r=await i.predict(t.trainInput,p.value);t.trainResult=r.data,e&&e()})).epoch((()=>n));const p=e.input.number({label:" predict count",min:1,max:1e3,value:100});t.setting.ternimate=()=>{i.terminate()}}