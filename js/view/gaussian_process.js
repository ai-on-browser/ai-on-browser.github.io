import GaussianProcess from"../../lib/model/gaussian_process.js";import EnsembleBinaryModel from"../../lib/model/ensemble_binary.js";import Controller from"../controller.js";var dispGaussianProcess=function(e,t){const n=new Controller(t),a=t.task;let o=null;"CF"===a&&e.append("select").attr("name","method").selectAll("option").data(["oneone","onerest"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("select").attr("name","kernel").selectAll("option").data(["gaussian"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("span").text(" Beta "),e.append("select").attr("name","beta").selectAll("option").data([.001,.01,.1,1,10,100]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.select("[name=beta]").property("value",1);const p=n.stepLoopButtons().init((()=>{o=null,t.init()}));e.append("span").text(" Learning rate "),e.append("select").attr("name","rate").selectAll("option").data([1e-4,.001,.01,.1,1,10]).enter().append("option").property("value",(e=>e)).text((e=>e)),p.step((n=>{const p=t.datas.dimension,s=e.select("[name=kernel]").property("value"),l=+e.select("[name=beta]").property("value");if("CF"===a){const a=e.select("[name=method]").property("value");t.fit(((e,p)=>{p=p.map((e=>e[0])),o||(o=new EnsembleBinaryModel((function(){return new GaussianProcess(s,l)}),a),o.init(e,p)),o.fit(),t.predict(((e,t)=>{t(o.predict(e)),n&&n()}),10)}))}else{const a=+e.select("[name=rate]").property("value");t.fit(((e,r)=>{o||(o=new GaussianProcess(s,l),o.init(e,r)),o.fit(a),t.predict(((e,t)=>{t(o.predict(e)),n&&n()}),1===p?2:10)}))}})).epoch()};export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize" button. Finally, click "Fit" button.',dispGaussianProcess(e.setting.ml.configElement,e)}