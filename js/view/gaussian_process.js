import GaussianProcess from"../../lib/model/gaussian_process.js";import EnsembleBinaryModel from"../../lib/model/ensemble_binary.js";import Controller from"../controller.js";var dispGaussianProcess=function(e,t){const n=new Controller(t),a=t.task;let s=null;"CF"===a&&e.append("select").attr("name","method").selectAll("option").data(["oneone","onerest"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("select").attr("name","kernel").selectAll("option").data(["gaussian"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("span").text(" Beta "),e.append("select").attr("name","beta").selectAll("option").data([.001,.01,.1,1,10,100]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.select("[name=beta]").property("value",1);const o=n.stepLoopButtons().init((()=>{s=null,t.init()}));e.append("span").text(" Learning rate "),e.append("select").attr("name","rate").selectAll("option").data([1e-4,.001,.01,.1,1,10]).enter().append("option").property("value",(e=>e)).text((e=>e)),o.step((n=>{const o=t.datas.dimension,p=e.select("[name=kernel]").property("value"),l=+e.select("[name=beta]").property("value");if("CF"===a){const a=e.select("[name=method]").property("value");if(!s){const e=t.trainOutput.map((e=>e[0]));s=new EnsembleBinaryModel((function(){return new GaussianProcess(p,l)}),a),s.init(t.trainInput,e)}s.fit();const o=s.predict(t.testInput(10));t.testResult(o),n&&n()}else{const a=+e.select("[name=rate]").property("value");s||(s=new GaussianProcess(p,l),s.init(t.trainInput,t.trainOutput)),s.fit(a);let r=s.predict(t.testInput(1===o?2:10));t.testResult(r),n&&n()}})).epoch()};export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize" button. Finally, click "Fit" button.',dispGaussianProcess(e.setting.ml.configElement,e)}