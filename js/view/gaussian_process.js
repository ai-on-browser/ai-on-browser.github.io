var k=Object.defineProperty;var s=(e,n)=>k(e,"name",{value:n,configurable:!0});import a from"../../lib/model/gaussian_process.js";import C from"../../lib/model/ensemble_binary.js";import I from"../controller.js";export default function w(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize" button. Finally, click "Fit" button.';const n=new I(e),l=e.task;let t=null;const d=s(()=>{const b=e.datas.dimension;if(l==="CF"){if(!t){const p=e.trainOutput.map(g=>g[0]);t=new C(function(){return new a(o.value,+c.value)},u.value),t.init(e.trainInput,p)}t.fit();const i=t.predict(e.testInput(10));e.testResult(i)}else{t||(t=new a(o.value,+c.value),t.init(e.trainInput,e.trainOutput)),t.fit(+v.value);let i=t.predict(e.testInput(b===1?2:10));e.testResult(i)}},"fitModel");let u=null;l==="CF"&&(u=n.select(["oneone","onerest"]));const o=n.select(["gaussian"]),c=n.select({label:" Beta ",values:[.001,.01,.1,1,10,100],value:1}),r=n.stepLoopButtons().init(()=>{t=null,e.init()}),v=n.select({label:" Learning rate ",values:[1e-4,.001,.01,.1,1,10]});r.step(d).epoch()}s(w,"default");
