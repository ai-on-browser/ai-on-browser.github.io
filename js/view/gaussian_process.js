import GaussianProcess from"../../lib/model/gaussian_process.js";import EnsembleBinaryModel from"../../lib/model/ensemble_binary.js";var dispGaussianProcess=function(e,t){const n=t.task;let a=null;"CF"===n&&e.append("select").attr("name","method").selectAll("option").data(["oneone","onerest"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("select").attr("name","kernel").selectAll("option").data(["gaussian"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("span").text(" Beta "),e.append("select").attr("name","beta").selectAll("option").data([.001,.01,.1,1,10,100]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.select("[name=beta]").property("value",1);const s=t.setting.ml.controller.stepLoopButtons().init((()=>{a=null,t.init()}));e.append("span").text(" Learning rate "),e.append("select").attr("name","rate").selectAll("option").data([1e-4,.001,.01,.1,1,10]).enter().append("option").property("value",(e=>e)).text((e=>e)),s.step((s=>{const p=t.datas.dimension,o=e.select("[name=kernel]").property("value"),l=+e.select("[name=beta]").property("value");if("CF"===n){const n=e.select("[name=method]").property("value");t.fit(((e,p)=>{p=p.map((e=>e[0])),a||(a=new EnsembleBinaryModel(GaussianProcess,n,null,[o,l]),a.init(e,p)),a.fit(),t.predict(((e,t)=>{t(a.predict(e)),s&&s()}),10)}))}else{const n=+e.select("[name=rate]").property("value");t.fit(((e,i)=>{a||(a=new GaussianProcess(o,l),a.init(e,i)),a.fit(n),t.predict(((e,t)=>{t(a.predict(e)),s&&s()}),1===p?2:10)}))}})).epoch()};export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize" button. Finally, click "Fit" button.',dispGaussianProcess(e.setting.ml.configElement,e)}