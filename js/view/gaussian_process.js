var k=Object.defineProperty;var o=(e,n)=>k(e,"name",{value:n,configurable:!0});import c from"../../lib/model/gaussian_process.js";import b from"../../lib/model/ensemble_binary.js";import C from"../controller.js";var I=o(function(e,n){const d=new C(n),p=n.task;let a=null;const u=o(t=>{const v=n.datas.dimension,r=e.select("[name=kernel]").property("value"),l=+e.select("[name=beta]").property("value");if(p==="CF"){const i=e.select("[name=method]").property("value");if(!a){const x=n.trainOutput.map(g=>g[0]);a=new b(function(){return new c(r,l)},i),a.init(n.trainInput,x)}a.fit();const s=a.predict(n.testInput(10));n.testResult(s),t&&t()}else{const i=+e.select("[name=rate]").property("value");a||(a=new c(r,l),a.init(n.trainInput,n.trainOutput)),a.fit(i);let s=a.predict(n.testInput(v===1?2:10));n.testResult(s),t&&t()}},"fitModel");p==="CF"&&e.append("select").attr("name","method").selectAll("option").data(["oneone","onerest"]).enter().append("option").property("value",t=>t).text(t=>t),e.append("select").attr("name","kernel").selectAll("option").data(["gaussian"]).enter().append("option").property("value",t=>t).text(t=>t),e.append("span").text(" Beta "),e.append("select").attr("name","beta").selectAll("option").data([.001,.01,.1,1,10,100]).enter().append("option").property("value",t=>t).text(t=>t),e.select("[name=beta]").property("value",1);const y=d.stepLoopButtons().init(()=>{a=null,n.init()});e.append("span").text(" Learning rate "),e.append("select").attr("name","rate").selectAll("option").data([1e-4,.001,.01,.1,1,10]).enter().append("option").property("value",t=>t).text(t=>t),y.step(u).epoch()},"dispGaussianProcess");export default function h(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize" button. Finally, click "Fit" button.',I(e.setting.ml.configElement,e)}o(h,"default");
