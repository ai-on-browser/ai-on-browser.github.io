import RadialBasisFunctionNetwork from"../../lib/model/rbf.js";var dispRBF=function(t,e){t.append("span").text("RBF "),t.append("select").attr("name","rbf").selectAll("option").data(["linear","gaussian","multiquadric","inverse quadratic","inverse multiquadric","thin plate","bump"]).enter().append("option").attr("value",(t=>t)).text((t=>t)),t.append("span").text(" e = "),t.append("input").attr("type","number").attr("name","e").attr("value",1).attr("min",0).attr("max",10).attr("step",.1),"IN"===e.task?t.append("input").attr("type","hidden").attr("name","l").attr("value",0):(t.append("span").text(" l = "),t.append("input").attr("type","number").attr("name","l").attr("value",.1).attr("min",0).attr("max",10).attr("step",.1)),t.append("input").attr("type","button").attr("value","Calculate").on("click",(function(){const a=t.select("[name=rbf]").property("value"),n=+t.select("[name=l]").property("value"),p=+t.select("[name=e]").property("value");e.fit(((t,r)=>{let i=new RadialBasisFunctionNetwork(a,p,n);i.fit(t,r),e.predict(((t,e)=>{e(i.predict(t))}),4)}))}))};export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',dispRBF(t.setting.ml.configElement,t)}