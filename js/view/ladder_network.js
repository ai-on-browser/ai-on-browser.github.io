class LadderNetworkWorker extends BaseWorker{constructor(){super("js/view/worker/ladder_network_worker.js",{type:"module"})}initialize(t,e,a,n,p){this._postMessage({mode:"init",hidden_sizes:t,lambdas:e,activation:a,optimizer:n},p)}fit(t,e,a,n,p,r){this._postMessage({mode:"fit",x:t,y:e,iteration:a,rate:n,batch:p},r)}predict(t,e){this._postMessage({mode:"predict",x:t},e)}}var dispLadder=function(t,e){const a=new LadderNetworkWorker,n=[10];let p=0;t.append("span").text(" Hidden Layers ");const r=t.append("span"),i=()=>{r.selectAll("*").remove();for(let t=0;t<n.length;t++){const e=r.append("input").attr("type","number").attr("min",1).attr("max",100).attr("value",n[t]).on("change",(()=>{n[t]=+e.property("value")}))}n.length>0&&r.append("input").attr("type","button").attr("value","-").on("click",(()=>{n.pop(),i()}))};t.append("input").attr("type","button").attr("value","+").on("click",(()=>{n.push(10),i()})),i(),t.append("span").text(" Activation "),t.append("select").attr("name","activation").selectAll("option").data(["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","linear"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Optimizer "),t.append("select").attr("name","optimizer").selectAll("option").data(["sgd","adam","momentum","rmsprop"]).enter().append("option").property("value",(t=>t)).text((t=>t));const o=e.setting.ml.controller.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const p=t.select("[name=activation]").property("value"),r=t.select("[name=optimizer]").property("value"),i=Array(n.length+2).fill(.001);a.initialize(n,i,p,r),e.init()}));return t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","rate").attr("min",0).attr("max",100).attr("step",.01).attr("value",.001),t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",1e3).attr("min",1).attr("max",1e3).attr("step",1),o.step((n=>{const r=+t.select("[name=iteration]").property("value"),i=+t.select("[name=batch]").property("value"),o=+t.select("[name=rate]").property("value"),s=e.datas.dimension;e.fit(((t,l,d)=>{l=l.map((t=>t[0])),a.fit(t,l,r,o,i,(t=>{p=t.data.epoch,e.predict(((t,e)=>{a.predict(t,(t=>{const a=t.data;e(a),n&&n()}))}),1===s?2:4)}))}))})).epoch((()=>p)),()=>{a.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ternimate=dispLadder(t.setting.ml.configElement,t)}