import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class LadderNetworkWorker extends BaseWorker{constructor(){super("js/view/worker/ladder_network_worker.js",{type:"module"})}initialize(e,t,a,n,l){this._postMessage({mode:"init",hidden_sizes:e,lambdas:t,activation:a,optimizer:n},l)}fit(e,t,a,n,l,i){this._postMessage({mode:"fit",x:e,y:t,iteration:a,rate:n,batch:l},i)}predict(e,t){this._postMessage({mode:"predict",x:e},t)}}export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new Controller(e),a=new LadderNetworkWorker,n=[10];let l=0;t.text(" Hidden Layers ");const i=e.setting.ml.configElement.append("span"),s=()=>{i.selectAll("*").remove();for(let e=0;e<n.length;e++){const t=i.append("input").attr("type","number").attr("min",1).attr("max",100).attr("value",n[e]).on("change",(()=>{n[e]=+t.property("value")}))}n.length>0&&i.append("input").attr("type","button").attr("value","-").on("click",(()=>{n.pop(),s()}))};t.input.button("+").on("click",(()=>{n.push(10),s()})),s();const r=t.select({label:" Activation ",values:["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","linear"]}),o=t.select({label:" Optimizer ",values:["sgd","adam","momentum","rmsprop"]}),p=t.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const t=Array(n.length+2).fill(.001);a.initialize(n,t,r.value,o.value),e.init()})),u=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),d=t.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),c=t.input.number({label:" Batch size ",min:1,max:1e3,value:1e3});p.step((t=>{const n=e.datas.dimension,i=e.trainOutput.map((e=>e[0]));a.fit(e.trainInput,i,+u.value,d.value,c.value,(i=>{l=i.data.epoch,e.plotLoss({labeled:i.data.labeledLoss,unlabeled:i.data.unlabeledLoss}),a.predict(e.testInput(1===n?2:4),(a=>{const n=a.data;e.testResult(n),t&&t()}))}))})).epoch((()=>l)),e.setting.ternimate=()=>{a.terminate()}}