import Controller from"../controller.js";class LadderNetworkWorker extends BaseWorker{constructor(){super("js/view/worker/ladder_network_worker.js",{type:"module"})}initialize(t,e,a,n,r){this._postMessage({mode:"init",hidden_sizes:t,lambdas:e,activation:a,optimizer:n},r)}fit(t,e,a,n,r,p){this._postMessage({mode:"fit",x:t,y:e,iteration:a,rate:n,batch:r},p)}predict(t,e){this._postMessage({mode:"predict",x:t},e)}}var dispLadder=function(t,e){const a=new Controller(e),n=new LadderNetworkWorker,r=[10];let p=0;t.append("span").text(" Hidden Layers ");const i=t.append("span"),o=()=>{i.selectAll("*").remove();for(let t=0;t<r.length;t++){const e=i.append("input").attr("type","number").attr("min",1).attr("max",100).attr("value",r[t]).on("change",(()=>{r[t]=+e.property("value")}))}r.length>0&&i.append("input").attr("type","button").attr("value","-").on("click",(()=>{r.pop(),o()}))};t.append("input").attr("type","button").attr("value","+").on("click",(()=>{r.push(10),o()})),o(),t.append("span").text(" Activation "),t.append("select").attr("name","activation").selectAll("option").data(["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","linear"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Optimizer "),t.append("select").attr("name","optimizer").selectAll("option").data(["sgd","adam","momentum","rmsprop"]).enter().append("option").property("value",(t=>t)).text((t=>t));const s=a.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const a=t.select("[name=activation]").property("value"),p=t.select("[name=optimizer]").property("value"),i=Array(r.length+2).fill(.001);n.initialize(r,i,a,p),e.init()}));return t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","rate").attr("min",0).attr("max",100).attr("step",.01).attr("value",.001),t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",1e3).attr("min",1).attr("max",1e3).attr("step",1),s.step((a=>{const r=+t.select("[name=iteration]").property("value"),i=+t.select("[name=batch]").property("value"),o=+t.select("[name=rate]").property("value"),s=e.datas.dimension,l=e.trainOutput.map((t=>t[0]));n.fit(e.trainInput,l,r,o,i,(t=>{p=t.data.epoch,n.predict(e.testInput(1===s?2:4),(t=>{const n=t.data;e.testResult(n),a&&a()}))}))})).epoch((()=>p)),()=>{n.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ternimate=dispLadder(t.setting.ml.configElement,t)}