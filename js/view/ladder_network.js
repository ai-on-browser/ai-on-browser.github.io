var x=Object.defineProperty;var o=(t,e)=>x(t,"name",{value:e,configurable:!0});import w from"../controller.js";import{BaseWorker as _}from"../utils.js";class L extends _{static{o(this,"LadderNetworkWorker")}constructor(){super("js/view/worker/ladder_network_worker.js",{type:"module"})}initialize(e,s,n,i){return this._postMessage({mode:"init",hidden_sizes:e,lambdas:s,activation:n,optimizer:i})}fit(e,s,n,i,r){return this._postMessage({mode:"fit",x:e,y:s,iteration:n,rate:i,batch:r})}predict(e){return this._postMessage({mode:"predict",x:e})}}export default function z(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ml.reference={author:"H. Valpola",title:"From Neural PCA to Deep Unsupervised Learning",year:2015};const e=new w(t),s=new L,n=[10];let i=0;const r=o(async()=>{const a=t.datas.dimension,l=t.trainOutput.map(y=>y[0]),d=await s.fit(t.trainInput,l,+g.value,b.value,v.value);i=d.data.epoch,t.plotLoss({labeled:d.data.labeledLoss,unlabeled:d.data.unlabeledLoss});const k=(await s.predict(t.testInput(a===1?2:4))).data;t.testResult(k)},"fitModel");e.text(" Hidden Layers ");const u=e.span(),c=o(()=>{u.element.replaceChildren();for(let a=0;a<n.length;a++){const l=u.input.number({min:1,max:100,value:n[a]}).on("change",()=>{n[a]=l.value})}n.length>0&&u.input.button("-").on("click",()=>{n.pop(),c()})},"createHsElms");e.input.button("+").on("click",()=>{n.push(10),c()}),c();const p=e.select({label:" Activation ",values:["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","identity"]}),m=e.select({label:" Optimizer ",values:["sgd","adam","momentum","adagrad","rmsprop","adadelta","rmspropgraves","smorms3","adamax","nadam"]}),h=e.stepLoopButtons().init(a=>{if(t.datas.length===0){a();return}const l=Array(n.length+2).fill(.001);s.initialize(n,l,p.value,m.value).then(a),t.init()}),g=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),b=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),v=e.input.number({label:" Batch size ",min:1,max:1e3,value:1e3});return h.step(r).epoch(()=>i),()=>{s.terminate()}}o(z,"default");
