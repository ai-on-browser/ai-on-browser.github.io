import NeuralNetworkBuilder from"../neuralnetwork_builder.js";import Controller from"../controller.js";class GANWorker extends BaseWorker{constructor(){super("js/view/worker/gan_worker.js",{type:"module"})}initialize(t,e,a,n,r,p,i,s){this._postMessage({mode:"init",noise_dim:t,g_hidden:e,d_hidden:a,g_opt:n,d_opt:r,class_size:p,type:i},s),this._type=i}fit(t,e,a,n,r,p,i){this._postMessage({mode:"fit",x:t,y:e,iteration:a,gen_rate:n,dis_rate:r,batch:p},(t=>i(t.data)))}prob(t,e,a){this._postMessage({mode:"prob",x:t,y:e},(t=>a(t.data)))}generate(t,e,a){this._postMessage({mode:"generate",n:t,y:e},(t=>a(t.data)))}}var dispGAN=function(t,e){const a=new Controller(e),n=new NeuralNetworkBuilder,r=new NeuralNetworkBuilder,p=new GANWorker;let i=0;const s=()=>{const a=e.trainOutput;p.generate(e.trainInput.length,a,(n=>{const r=t.select("[name=type]").property("value");e.trainResult="conditional"===r?[n,a]:n}))};"GR"===e.task?t.append("select").attr("name","type").selectAll("option").data(["default","conditional"]).enter().append("option").property("value",(t=>t)).text((t=>t)):t.append("input").attr("name","type").attr("type","hidden").attr("value","default"),t.append("span").text("Noise dim"),t.append("input").attr("type","number").attr("name","noise_dim").attr("min",1).attr("max",100).attr("value",5),t.append("span").text("Hidden size ");const o=t.append("div").style("display","inline-block"),l=o.append("div");l.append("span").text("G"),n.makeHtml(l,{optimizer:!0});const d=o.append("div");d.append("span").text("D"),r.makeHtml(d,{optimizer:!0});const u=a.stepLoopButtons().init((()=>{const a=+t.select("[name=noise_dim]").property("value"),i=n.layers,s=r.layers,o=n.optimizer,l=r.optimizer,d=t.select("[name=type]").property("value"),u=e.datas.categories.length;p.initialize(a,i,s,o,l,u,d),e.init()}));t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text("Learning rate ");const m=t.append("div").style("display","inline-block");for(const e of[{name:"gen_rate",title:"G",value:.01},{name:"dis_rate",title:"D",value:.5}]){m.append("div").append("span").text(e.title),t.append("input").attr("type","number").attr("name",e.name).attr("min",0).attr("max",100).attr("step",.01).attr("value",e.value)}return t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",10).attr("min",1).attr("max",100).attr("step",1),"AD"===e.task&&(t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value",.8).attr("min",0).attr("max",10).attr("step",.01)),u.step((a=>{if(0===e.datas.length)return void(a&&a());const n=+t.select("[name=iteration]").property("value"),r=+t.select("[name=gen_rate]").property("value"),s=+t.select("[name=dis_rate]").property("value"),o=+t.select("[name=batch]").property("value"),l=e.trainInput,d=e.trainOutput;p.fit(l,d,n,r,s,o,(n=>{if(i=n.epoch,e.plotLoss({generator:n.generatorLoss,discriminator:n.discriminatorLoss}),"GR"===e.task)p.generate(l.length,d,(t=>{"conditional"===p._type?(e.trainResult=[t,d],a&&a()):p.prob(e.testInput(5),null,(n=>{e.testResult(n.map((t=>specialCategory.errorRate(t[1])))),e.trainResult=t,a&&a()}))}));else{const n=+t.select("[name=threshold]").property("value"),r=l.concat(e.testInput(5));p.prob(r,null,(t=>{const r=t.slice(0,l.length),p=t.slice(l.length);e.trainResult=r.map((t=>t[1]>n)),e.testResult(p.map((t=>t[1]>n))),a&&a()}))}}))})).epoch((()=>i)),"GR"===e.task&&t.append("input").attr("type","button").attr("value","Generate").on("click",s),()=>{p.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.terminate=dispGAN(t.setting.ml.configElement,t)}