var B=Object.defineProperty;var v=(e,n)=>B(e,"name",{value:n,configurable:!0});import z from"../neuralnetwork_builder.js";import C from"../controller.js";import{BaseWorker as O,specialCategory as j}from"../utils.js";class A extends O{static{v(this,"GANWorker")}constructor(){super("js/view/worker/gan_worker.js",{type:"module"})}initialize(n,t,s,r,a,d,c){return this._type=c,this._postMessage({mode:"init",noise_dim:n,g_hidden:t,d_hidden:s,g_opt:r,d_opt:a,class_size:d,type:c})}fit(n,t,s,r,a,d){return this._postMessage({mode:"fit",x:n,y:t,iteration:s,gen_rate:r,dis_rate:a,batch:d}).then(c=>c.data)}prob(n,t){return this._postMessage({mode:"prob",x:n,y:t}).then(s=>s.data)}generate(n,t){return this._postMessage({mode:"generate",n,y:t}).then(s=>s.data)}}export default function F(e){const n=e.setting.ml.configElement;e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new C(e),s=new z,r=new z,a=new A;let d=0;const c=v(async i=>{if(e.datas.length===0){i&&i();return}const o=+n.select("[name=gen_rate]").property("value"),y=+n.select("[name=dis_rate]").property("value"),l=e.trainInput,p=e.trainOutput,g=await a.fit(l,p,+I.value,o,y,M.value);if(d=g.epoch,e.plotLoss({generator:g.generatorLoss,discriminator:g.discriminatorLoss}),e.task==="GR"){const u=await a.generate(l.length,p);if(a._type==="conditional")e.trainResult=[u,p];else{const h=await a.prob(e.testInput(5));e.testResult(h.map(x=>j.errorRate(x[1]))),e.trainResult=u}}else{const u=l.concat(e.testInput(5)),h=await a.prob(u),x=h.slice(0,l.length),N=h.slice(l.length);e.trainResult=x.map(b=>b[1]>_.value),e.testResult(N.map(b=>b[1]>_.value))}i&&i()},"fitModel"),D=v(async()=>{const i=e.trainOutput,o=await a.generate(e.trainInput.length,i);m.value==="conditional"?e.trainResult=[o,i]:e.trainResult=o},"genValues");let m;e.task==="GR"?m=t.select(["default","conditional"]):m=t.input({type:"hidden",value:"default"});const G=t.input.number({label:"Noise dim",min:1,max:100,value:5});t.text("Hidden size ");const k=n.append("div").style("display","inline-block"),w=k.append("div");w.append("span").text("G"),s.makeHtml(w,{optimizer:!0});const R=k.append("div");R.append("span").text("D"),r.makeHtml(R,{optimizer:!0});const H=t.stepLoopButtons().init(i=>{const o=s.layers,y=r.layers,l=s.optimizer,p=r.optimizer,g=new Set(e.trainOutput.map(u=>u[0])).size;a.initialize(G.value,o,y,l,p,g,m.value).then(i),e.init()}),I=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]});t.text("Learning rate ");const L=n.append("div").style("display","inline-block");for(const i of[{name:"gen_rate",title:"G",value:.01},{name:"dis_rate",title:"D",value:.5}]){const o=L.append("div");o.append("span").text(i.title),o.append("input").attr("type","number").attr("name",i.name).attr("min",0).attr("max",100).attr("step",.01).attr("value",i.value)}const M=t.input.number({label:" Batch size ",min:1,max:100,value:10});let _=null;e.task==="AD"&&(_=t.input.number({label:" threshold = ",min:0,max:10,step:.01,value:.8})),H.step(c).epoch(()=>d),e.task==="GR"&&t.input.button("Generate").on("click",D),e.setting.terminate=()=>{a.terminate()}}v(F,"default");
