var N=Object.defineProperty;var m=(e,n)=>N(e,"name",{value:n,configurable:!0});import R from"../neuralnetwork_builder.js";import B from"../controller.js";import{BaseWorker as C,specialCategory as O}from"../utils.js";class j extends C{static{m(this,"GANWorker")}constructor(){super("js/view/worker/gan_worker.js",{type:"module"})}initialize(n,t,a,r,i,d,c){return this._type=c,this._postMessage({mode:"init",noise_dim:n,g_hidden:t,d_hidden:a,g_opt:r,d_opt:i,class_size:d,type:c})}fit(n,t,a,r,i,d){return this._postMessage({mode:"fit",x:n,y:t,iteration:a,gen_rate:r,dis_rate:i,batch:d}).then(c=>c.data)}prob(n,t){return this._postMessage({mode:"prob",x:n,y:t}).then(a=>a.data)}generate(n,t){return this._postMessage({mode:"generate",n,y:t}).then(a=>a.data)}}export default function A(e){const n=e.setting.ml.configElement;e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new B(e),a=new R,r=new R,i=new j;let d=0;const c=m(async()=>{if(e.datas.length===0)return;const s=+n.select("[name=gen_rate]").property("value"),o=+n.select("[name=dis_rate]").property("value"),l=e.trainInput,g=e.trainOutput,v=await i.fit(l,g,+H.value,s,o,L.value);if(d=v.epoch,e.plotLoss({generator:v.generatorLoss,discriminator:v.discriminatorLoss}),e.task==="GR"){const u=await i.generate(l.length,g);if(i._type==="conditional")e.trainResult=[u,g];else{const p=await i.prob(e.testInput(5));e.testResult(p.map(y=>O.errorRate(y[1]))),e.trainResult=u}}else{const u=l.concat(e.testInput(5)),p=await i.prob(u),y=p.slice(0,l.length),M=p.slice(l.length);e.trainResult=y.map(b=>b[1]>_.value),e.testResult(M.map(b=>b[1]>_.value))}},"fitModel"),z=m(async()=>{const s=e.trainOutput,o=await i.generate(e.trainInput.length,s);h.value==="conditional"?e.trainResult=[o,s]:e.trainResult=o},"genValues");let h;e.task==="GR"?h=t.select(["default","conditional"]):h=t.input({type:"hidden",value:"default"});const D=t.input.number({label:"Noise dim",min:1,max:100,value:5});t.text("Hidden size ");const x=n.append("div").style("display","inline-block"),k=x.append("div");k.append("span").text("G"),a.makeHtml(k,{optimizer:!0});const w=x.append("div");w.append("span").text("D"),r.makeHtml(w,{optimizer:!0});const G=t.stepLoopButtons().init(s=>{const o=a.layers,l=r.layers,g=a.optimizer,v=r.optimizer,u=new Set(e.trainOutput.map(p=>p[0])).size;i.initialize(D.value,o,l,g,v,u,h.value).then(s),e.init()}),H=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]});t.text("Learning rate ");const I=n.append("div").style("display","inline-block");for(const s of[{name:"gen_rate",title:"G",value:.01},{name:"dis_rate",title:"D",value:.5}]){const o=I.append("div");o.append("span").text(s.title),o.append("input").attr("type","number").attr("name",s.name).attr("min",0).attr("max",100).attr("step",.01).attr("value",s.value)}const L=t.input.number({label:" Batch size ",min:1,max:100,value:10});let _=null;return e.task==="AD"&&(_=t.input.number({label:" threshold = ",min:0,max:10,step:.01,value:.8})),G.step(c).epoch(()=>d),e.task==="GR"&&t.input.button("Generate").on("click",z),()=>{i.terminate()}}m(A,"default");
