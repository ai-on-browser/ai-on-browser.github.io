var N=Object.defineProperty;var m=(e,t)=>N(e,"name",{value:t,configurable:!0});import D from"../neuralnetwork_builder.js";import B from"../controller.js";import{BaseWorker as C,specialCategory as O}from"../utils.js";class j extends C{static{m(this,"GANWorker")}constructor(){super("js/view/worker/model_worker.js",{type:"module"})}initialize(t,s,i,n,r,g,u){return this._type=u,this._postMessage({name:"gan",method:"constructor",arguments:[t,s,i,n,r,g,u]})}epoch(){return this._postMessage({name:"gan",method:"epoch"}).then(t=>t.data)}fit(t,s,i,n,r,g){return this._postMessage({name:"gan",method:"fit",arguments:[t,s,i,n,r,g]}).then(u=>u.data)}prob(t,s){return this._postMessage({name:"gan",method:"prob",arguments:[t,s]}).then(i=>i.data)}generate(t,s){return this._postMessage({name:"gan",method:"generate",arguments:[t,s]}).then(i=>i.data)}}export default function A(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new B(e),s=new D,i=new D,n=new j;let r=0;const g=m(async()=>{if(e.datas.length===0)return;const a=b.gen_rate.value,o=b.dis_rate.value,l=e.trainInput,p=e.trainOutput,v=await n.fit(l,p,+I.value,a,o,M.value);if(r=await n.epoch(),e.plotLoss({generator:v.generatorLoss,discriminator:v.discriminatorLoss}),e.task==="GR"){const c=await n.generate(l.length,p);if(n._type==="conditional")e.trainResult=[c,p];else{const d=await n.prob(e.testInput(5));e.testResult(d.map(y=>O.errorRate(y[1]))),e.trainResult=c}}else{const c=l.concat(e.testInput(5)),d=await n.prob(c),y=d.slice(0,l.length),L=d.slice(l.length);e.trainResult=y.map(w=>w[1]>k.value),e.testResult(L.map(w=>w[1]>k.value))}},"fitModel"),u=m(async()=>{const a=e.trainOutput,o=await n.generate(e.trainInput.length,a);h.value==="conditional"?e.trainResult=[o,a]:e.trainResult=o},"genValues");let h;e.task==="GR"?h=t.select(["default","conditional"]):h=t.input({type:"hidden",value:"default"});const G=t.input.number({label:"Noise dim",min:1,max:100,value:5});t.text("Hidden size ");const _=t.div();_.element.style.display="inline-block";const x=_.div();x.text("G"),s.makeHtml(x,{optimizer:!0});const R=_.div();R.text("D"),i.makeHtml(R,{optimizer:!0});const H=t.stepLoopButtons().init(a=>{const o=s.layers,l=i.layers,p=s.optimizer,v=i.optimizer,c=new Set(e.trainOutput.map(d=>d[0])).size;n.initialize(G.value,o,l,p,v,c,h.value).then(a),e.init()}),I=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]});t.text("Learning rate ");const z=t.div();z.element.style.display="inline-block";const b={};for(const a of[{name:"gen_rate",title:"G",value:.01},{name:"dis_rate",title:"D",value:.5}]){const o=z.div();b[a.name]=o.input.number({label:a.title,name:a.name,min:0,max:100,step:.01,value:a.value})}const M=t.input.number({label:" Batch size ",min:1,max:100,value:10});let k=null;return e.task==="AD"&&(k=t.input.number({label:" threshold = ",min:0,max:10,step:.01,value:.8})),H.step(g).epoch(()=>r),e.task==="GR"&&t.input.button("Generate").on("click",u),()=>{n.terminate()}}m(A,"default");
