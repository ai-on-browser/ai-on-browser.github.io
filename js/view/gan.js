var N=Object.defineProperty;var m=(e,n)=>N(e,"name",{value:n,configurable:!0});import R from"../neuralnetwork_builder.js";import B from"../controller.js";import{BaseWorker as C,specialCategory as O}from"../utils.js";class j extends C{static{m(this,"GANWorker")}constructor(){super("js/view/worker/model_worker.js",{type:"module"})}initialize(n,t,s,r,a,d,c){return this._type=c,this._postMessage({name:"gan",method:"constructor",arguments:[n,t,s,r,a,d,c]})}epoch(){return this._postMessage({name:"gan",method:"epoch"}).then(n=>n.data)}fit(n,t,s,r,a,d){return this._postMessage({name:"gan",method:"fit",arguments:[n,t,s,r,a,d]}).then(c=>c.data)}prob(n,t){return this._postMessage({name:"gan",method:"prob",arguments:[n,t]}).then(s=>s.data)}generate(n,t){return this._postMessage({name:"gan",method:"generate",arguments:[n,t]}).then(s=>s.data)}}export default function A(e){const n=e.setting.ml.configElement;e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new B(e),s=new R,r=new R,a=new j;let d=0;const c=m(async()=>{if(e.datas.length===0)return;const i=+n.select("[name=gen_rate]").property("value"),o=+n.select("[name=dis_rate]").property("value"),l=e.trainInput,g=e.trainOutput,v=await a.fit(l,g,+H.value,i,o,M.value);if(d=await a.epoch(),e.plotLoss({generator:v.generatorLoss,discriminator:v.discriminatorLoss}),e.task==="GR"){const u=await a.generate(l.length,g);if(a._type==="conditional")e.trainResult=[u,g];else{const p=await a.prob(e.testInput(5));e.testResult(p.map(b=>O.errorRate(b[1]))),e.trainResult=u}}else{const u=l.concat(e.testInput(5)),p=await a.prob(u),b=p.slice(0,l.length),L=p.slice(l.length);e.trainResult=b.map(y=>y[1]>_.value),e.testResult(L.map(y=>y[1]>_.value))}},"fitModel"),z=m(async()=>{const i=e.trainOutput,o=await a.generate(e.trainInput.length,i);h.value==="conditional"?e.trainResult=[o,i]:e.trainResult=o},"genValues");let h;e.task==="GR"?h=t.select(["default","conditional"]):h=t.input({type:"hidden",value:"default"});const D=t.input.number({label:"Noise dim",min:1,max:100,value:5});t.text("Hidden size ");const k=n.append("div").style("display","inline-block"),x=k.append("div");x.append("span").text("G"),s.makeHtml(x,{optimizer:!0});const w=k.append("div");w.append("span").text("D"),r.makeHtml(w,{optimizer:!0});const G=t.stepLoopButtons().init(i=>{const o=s.layers,l=r.layers,g=s.optimizer,v=r.optimizer,u=new Set(e.trainOutput.map(p=>p[0])).size;a.initialize(D.value,o,l,g,v,u,h.value).then(i),e.init()}),H=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]});t.text("Learning rate ");const I=n.append("div").style("display","inline-block");for(const i of[{name:"gen_rate",title:"G",value:.01},{name:"dis_rate",title:"D",value:.5}]){const o=I.append("div");o.append("span").text(i.title),o.append("input").attr("type","number").attr("name",i.name).attr("min",0).attr("max",100).attr("step",.01).attr("value",i.value)}const M=t.input.number({label:" Batch size ",min:1,max:100,value:10});let _=null;return e.task==="AD"&&(_=t.input.number({label:" threshold = ",min:0,max:10,step:.01,value:.8})),G.step(c).epoch(()=>d),e.task==="GR"&&t.input.button("Generate").on("click",z),()=>{a.terminate()}}m(A,"default");
