import Matrix from"../../lib/util/matrix.js";import{BasisFunctions}from"./least_square.js";import ElasticNet from"../../lib/model/elastic_net.js";import Controller from"../controller.js";var dispElasticNet=function(t,e){e.setting.ml.reference={author:"H. Zou, T. Hastie",title:"Regularization and variable selection via the elastic net",year:2005};const a=new Controller(e);let n=new ElasticNet;const i=e.task,l=new BasisFunctions(e);"FS"!==i&&l.makeHtml(t);const s=a.select({label:"lambda = ",name:"lambda",values:[1e-4,.001,.01,.1,1,10,100]}),o=a.input.number({label:"alpha = ",name:"alpha",value:.5,min:0,max:1,step:.1}).on("change",(()=>{let t=+o.value;r.value=0===t?" ridge ":1===t?" lasso ":""})),r=a.text();a.stepLoopButtons().init((()=>{n=new ElasticNet(+s.value,+o.value),e.init()})).step((t=>{if(n._alpha=+o.value,"FS"===i){n.fit(e.trainInput,e.trainOutput);const a=n.importance().map(((t,e)=>[t,e]));a.sort(((t,e)=>e[0]-t[0]));const i=e.dimension,l=a.map((t=>t[1])).slice(0,i),s=Matrix.fromArray(e.trainInput);e.trainResult=s.col(l).toArray(),t&&t()}else{n.fit(l.apply(e.trainInput).toArray(),e.trainOutput);const a=n.predict(l.apply(e.testInput(4)).toArray());e.testResult(a),t&&t()}})).epoch()};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',dispElasticNet(t.setting.ml.configElement,t),t.setting.ml.detail="\nThe model form is\n$$\nf(X) = X W + \\epsilon\n$$\n\nThe loss function can be written as\n$$\nL(W) = \\| X W - y \\|^2 + \\alpha \\lambda \\| W \\|_1 + (1 - \\alpha) \\lambda \\| W \\|^2\n$$\nwhere $ y $ is the observed value corresponding to $ X $.\n"}