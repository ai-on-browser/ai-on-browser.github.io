import Matrix from"../../lib/util/matrix.js";import ElasticNet from"../../lib/model/elastic_net.js";import Controller from"../controller.js";export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ml.reference={author:"H. Zou, T. Hastie",title:"Regularization and variable selection via the elastic net",year:2005},t.setting.ml.detail="\nThe model form is\n$$\nf(X) = X W + \\epsilon\n$$\n\nThe loss function can be written as\n$$\nL(W) = \\| X W - y \\|^2 + \\alpha \\lambda \\| W \\|_1 + (1 - \\alpha) \\lambda \\| W \\|^2\n$$\nwhere $ y $ is the observed value corresponding to $ X $.\n";const e=new Controller(t);let a=new ElasticNet;const n=t.task,l=e.select({label:"lambda = ",name:"lambda",values:[1e-4,.001,.01,.1,1,10,100]}),i=e.input.number({label:"alpha = ",name:"alpha",value:.5,min:0,max:1,step:.1}).on("change",(()=>{let t=+i.value;o.value=0===t?" ridge ":1===t?" lasso ":""})),o=e.text();e.stepLoopButtons().init((()=>{a=new ElasticNet(+l.value,+i.value),t.init()})).step((e=>{if(a._alpha=+i.value,"FS"===n){a.fit(t.trainInput,t.trainOutput);const n=a.importance().map(((t,e)=>[t,e]));n.sort(((t,e)=>e[0]-t[0]));const l=t.dimension,i=n.map((t=>t[1])).slice(0,l),o=Matrix.fromArray(t.trainInput);t.trainResult=o.col(i).toArray(),e&&e()}else{a.fit(t.trainInput,t.trainOutput);const n=a.predict(t.testInput(4));t.testResult(n),e&&e()}})).epoch()}