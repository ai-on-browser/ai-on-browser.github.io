import Matrix from"../../lib/util/matrix.js";import{BasisFunctions}from"./least_square.js";import ElasticNet from"../../lib/model/elastic_net.js";import Controller from"../controller.js";var dispElasticNet=function(t,e){const a=new Controller(e);let n=new ElasticNet;const l=e.task,i=new BasisFunctions(e);"FS"!==l&&i.makeHtml(t),t.append("span").text("lambda = "),t.append("select").attr("name","lambda").selectAll("option").data([1e-4,.001,.01,.1,1,10,100]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text("alpha = "),t.append("input").attr("type","number").attr("name","alpha").attr("value",.5).attr("min",0).attr("max",1).attr("step",.1).on("change",(function(){let e=+d3.select(this).property("value");t.select("[name=sp]").text(0===e?" ridge ":1===e?" lasso ":"")})),t.append("span").attr("name","sp"),a.stepLoopButtons().init((()=>{n=new ElasticNet(+t.select("[name=lambda]").property("value"),+t.select("[name=alpha]").property("value")),e.init()})).step((a=>{e.fit(((p,r,o)=>{if(n._alpha=+t.select("[name=alpha]").property("value"),"FS"===l){n.fit(p,r);const t=n.importance().map(((t,e)=>[t,e]));t.sort(((t,e)=>e[0]-t[0]));const l=e.dimension,i=t.map((t=>t[1])).slice(0,l);o(Matrix.fromArray(p).col(i).toArray()),a&&a()}else n.fit(i.apply(p).toArray(),r),e.predict(((t,e)=>{e(n.predict(i.apply(t).toArray())),a&&a()}),4)}))})).epoch()};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',dispElasticNet(t.setting.ml.configElement,t),t.setting.ml.detail="\nThe model form is\n$$\nf(X) = X W + \\epsilon\n$$\n\nThe loss function can be written as\n$$\nL(W) = \\| X W - y \\|^2 + \\alpha \\lambda \\| W \\|_1 + (1 - \\alpha) \\lambda \\| W \\|^2\n$$\nwhere $ y $ is the observed value corresponding to $ X $.\n"}