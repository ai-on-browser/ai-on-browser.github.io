var n=Object.defineProperty;var i=(e,s)=>n(e,"name",{value:s,configurable:!0});import f from"../../../lib/util/matrix.js";import a from"../../../lib/util/tensor.js";self.imported={},self.model=null,self.addEventListener("message",async function(e){const s=e.data,o=s.name;if(self.imported[o]||(self.imported[o]=(await import(`../../../lib/model/${o}.js`)).default),s.method==="constructor")self.model=new self.imported[o](...s.arguments),self.postMessage(null);else if(s.static){let t=self.imported[o][s.method];typeof t=="function"&&(t=await Promise.resolve(t(...s.arguments))),s.initialize?(self.model=t,self.postMessage(null)):self.postMessage(l(t))}else{let t=self.model[s.method];typeof t=="function"&&(t=await Promise.resolve(t.bind(self.model)(...s.arguments))),s.initialize?(self.model=t,self.postMessage(null)):self.postMessage(l(t))}},!1);const l=i(e=>{if(e==null)return e;if(e instanceof f||e instanceof a)return e.toArray();if(e instanceof Array)return e.map(l);if(typeof e=="object"){const s={};for(const o in e)s[o]=l(e[o]);return s}return e},"convert");
