import QAgent from"../../lib/model/q_learning.js";import Controller from"../controller.js";var dispQLearning=function(t,e){const n=new Controller(e),r="grid"===e.type?Math.max(...e.env.size):20;let a=new QAgent(e,r),o=e.reset(a);e.render((()=>a.get_score()));const s=(n=!0)=>{const r=+t.select("[name=greedy_rate]").property("value"),s=a.get_action(o,r),{state:p,reward:i,done:l}=e.step(s,a);return a.update(s,o,p,i),n&&(e.epoch%10==0?e.render((()=>a.get_score())):e.render()),o=p,l},p=()=>{o=e.reset(a),e.render((()=>a.get_score()))};t.append("span").text("Resolution"),t.append("input").attr("type","number").attr("name","resolution").attr("min",2).attr("max",100).attr("value",r);const i=n.stepLoopButtons().init((()=>{const n=+t.select("[name=resolution]").property("value");a=new QAgent(e,n),p()}));t.append("input").attr("type","button").attr("value","Reset").on("click",p),t.append("input").attr("type","number").attr("name","greedy_rate").attr("min",0).attr("max",1).attr("step","0.01").attr("value",.02),i.step((t=>{s()?setTimeout((()=>{p(),t&&setTimeout(t,10)})):t&&setTimeout(t,5)})).skip((()=>{s(!1)&&p()})),e.plotRewards(t)};export default function(t){t.setting.ml.usage='Click "step" to update.',dispQLearning(t.setting.ml.configElement,t)}