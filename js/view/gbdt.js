import{GBDT,GBDTClassifier}from"../../lib/model/gbdt.js";import Controller from"../controller.js";var dispGBDT=function(t,e){const a=new Controller(e),n=e.task;let r=null;t.append("span").text(" max depth = "),t.append("input").attr("type","number").attr("name","maxd").attr("value",1).attr("min",1).attr("max",10),t.append("span").text(" Sampling rate "),t.append("input").attr("type","number").attr("name","srate").property("value",.8).attr("min",.1).attr("max",1).attr("step",.1),t.append("span").text(" learning rate = "),t.append("input").attr("type","number").attr("name","lr").attr("value",.1).attr("min",0).attr("max",1).attr("step",.1);const p=a.stepLoopButtons().init((()=>{r=null,e.init()}));t.append("span").text(" Iteration "),t.append("input").attr("type","number").attr("name","itr").attr("value",1).attr("min",1).attr("max",100),p.step((a=>{const p=+t.select("[name=maxd]").property("value"),i=+t.select("[name=lr]").property("value"),l=+t.select("[name=itr]").property("value"),s=+t.select("input[name=srate]").property("value");r||("CF"===n?(r=new GBDTClassifier(p,s,i),r.init(e.trainInput,e.trainOutput.map((t=>t[0])))):(r=new GBDT(p,s,i),r.init(e.trainInput,e.trainOutput)));for(let t=0;t<l;t++)r.fit();let m=r.predict(e.testInput(4));e.testResult(m),a&&a()})).epoch((()=>r.size))};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Fit" button.',dispGBDT(t.setting.ml.configElement,t)}