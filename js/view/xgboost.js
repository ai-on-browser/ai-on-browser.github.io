import{XGBoost,XGBoostClassifier}from"../../lib/model/xgboost.js";var dispXGBoost=function(t,a){const e=a.task;let n=null;t.append("span").text(" max depth = "),t.append("input").attr("type","number").attr("name","maxd").attr("value",1).attr("min",1).attr("max",10),t.append("span").text(" Sampling rate "),t.append("input").attr("type","number").attr("name","srate").property("value",.8).attr("min",.1).attr("max",1).attr("step",.1),t.append("span").text(" lambda = "),t.append("input").attr("type","number").attr("name","lambda").attr("value",.1).attr("min",.1).attr("max",10).attr("step",.1),t.append("span").text(" learning rate = "),t.append("input").attr("type","number").attr("name","lr").attr("value",.1).attr("min",0).attr("max",10).attr("step",.1);const p=a.setting.ml.controller.stepLoopButtons().init((()=>{n=null,a.init()}));t.append("span").text(" Iteration "),t.append("input").attr("type","number").attr("name","itr").attr("value",1).attr("min",1).attr("max",100),p.step((p=>{const r=+t.select("[name=lambda]").property("value"),i=+t.select("[name=lr]").property("value"),l=+t.select("[name=maxd]").property("value"),s=+t.select("[name=itr]").property("value"),m=+t.select("input[name=srate]").property("value");a.fit(((t,o)=>{n||("CF"===e?(n=new XGBoostClassifier(l,m,r,i),n.init(t,o.map((t=>t[0])))):(n=new XGBoost(l,m,r,i),n.init(t,o)));for(let t=0;t<s;t++)n.fit();a.predict(((t,a)=>{a(n.predict(t)),p&&p()}),4)}))})).epoch((()=>n.size))};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Fit" button.',dispXGBoost(t.setting.ml.configElement,t)}