import OCSVM from"../../lib/model/ocsvm.js";import Controller from"../controller.js";var dispOCSVM=function(t,e){const a=new Controller(e);let n=null,p=0;t.append("span").text(" nu "),t.append("input").attr("type","number").attr("name","nu").attr("value",.5).attr("min",0).attr("max",1).attr("step",.1),t.append("select").attr("name","kernel").on("change",(function(){"gaussian"===d3.select(this).property("value")?t.select("input[name=gamma]").style("display","inline"):t.select("input[name=gamma]").style("display","none")})).selectAll("option").data(["gaussian","linear"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("input").attr("type","number").attr("name","gamma").attr("value",.1).attr("min",.01).attr("max",10).attr("step",.01);const r=a.stepLoopButtons().init((()=>{const a=t.select("[name=nu]").property("value"),r=t.select("[name=kernel]").property("value"),l=[];"gaussian"===r&&l.push(+t.select("input[name=gamma]").property("value")),n=new OCSVM(a,r,l),n.init(e.trainInput,e.trainOutput),p=0,e.init()}));t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value",.6).attr("min",0).attr("max",1).attr("step",.01),r.step((function(a){let r=+t.select("[name=iteration]").property("value");for(let t=0;t<r;t++)n.fit();p+=r;const l=e.trainInput,i=[].concat(l,e.testInput(8));let s=n.predict(i);const o=Math.min(...s),u=Math.max(...s),m=+t.select("[name=threshold]").property("value");s=s.map((t=>(t-o)/(u-o)<m)),e.trainResult=s.slice(0,l.length),e.testResult(s.slice(l.length)),a&&a()})).epoch((()=>p))};export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',dispOCSVM(t.setting.ml.configElement,t)}