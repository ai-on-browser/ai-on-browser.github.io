import OCSVM from"../../lib/model/ocsvm.js";var dispOCSVM=function(t,e){let a=null,n=0;t.append("span").text(" nu "),t.append("input").attr("type","number").attr("name","nu").attr("value",.5).attr("min",0).attr("max",1).attr("step",.1),t.append("select").attr("name","kernel").on("change",(function(){"gaussian"===d3.select(this).property("value")?t.select("input[name=gamma]").style("display","inline"):t.select("input[name=gamma]").style("display","none")})).selectAll("option").data(["gaussian","linear"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("input").attr("type","number").attr("name","gamma").attr("value",.1).attr("min",.01).attr("max",10).attr("step",.01);const p=e.setting.ml.controller.stepLoopButtons().init((()=>{const p=t.select("[name=nu]").property("value"),l=t.select("[name=kernel]").property("value"),r=[];"gaussian"===l&&r.push(+t.select("input[name=gamma]").property("value")),e.fit(((t,e)=>{a=new OCSVM(p,l,r),a.init(t,e)})),n=0,e.init()}));t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value",.6).attr("min",0).attr("max",1).attr("step",.01),p.step((function(p){e.fit(((l,r,i)=>{let s=+t.select("[name=iteration]").property("value");for(let t=0;t<s;t++)a.fit();n+=s,e.predict(((e,n)=>{e=[].concat(l,e);let r=a.predict(e);const s=Math.min(...r),o=Math.max(...r),m=+t.select("[name=threshold]").property("value");r=r.map((t=>(t-s)/(o-s)<m)),i(r.slice(0,l.length)),n(r.slice(l.length)),p&&p()}),8)}))})).epoch((()=>n))};export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',dispOCSVM(t.setting.ml.configElement,t)}