var _=Object.defineProperty;var a=(t,e)=>_(t,"name",{value:e,configurable:!0});import c from"../../lib/model/policy_gradient.js";import x from"../controller.js";var w=a(function(t,e){const d=new x(e),i=e.type==="grid"?Math.max(...e.env.size):20;let n=new c(e,i),o=e.reset(n);e.render(()=>n.get_score());const p=a((r=!0)=>{const m=+t.select("[name=learning_rate]").property("value"),u=n.get_action(o),{state:f,reward:y,done:l}=e.step(u,n);return n.update(u,o,y,l,m),r&&e.render(),o=f,l},"step"),s=a(()=>{o=e.reset(n),n.reset(),e.render(()=>n.get_score())},"reset");t.append("span").text("Resolution"),t.append("input").attr("type","number").attr("name","resolution").attr("min",2).attr("max",100).attr("value",i);const g=d.stepLoopButtons().init(()=>{const r=+t.select("[name=resolution]").property("value");n=new c(e,r),s()});t.append("input").attr("type","button").attr("value","Reset").on("click",s),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","learning_rate").attr("min",.01).attr("max",10).attr("step","0.01").attr("value",.1),g.step(r=>{p()?setTimeout(()=>{s(),r&&setTimeout(r,10)}):r&&setTimeout(r,5)}).skip(()=>{p(!1)&&s()}),e.plotRewards(t)},"dispPolicyGradient");export default function R(t){t.setting.ml.usage='Click "step" to update.',w(t.setting.ml.configElement,t)}a(R,"default");
