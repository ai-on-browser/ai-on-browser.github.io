import PGAgent from"../../lib/model/policy_gradient.js";var dispPolicyGradient=function(t,e){const n="grid"===e.type?Math.max(...e.env.size):20;let a=new PGAgent(e,n),r=e.reset(a);e.render((()=>a.get_score(e)));let o=[];const p=(n=!0)=>{const p=+t.select("[name=learning_rate]").property("value"),i=a.get_action(e,r),[s,l,u]=e.step(i,a);return o.push([i,r,l]),n&&e.render(),r=s,u&&(a.update(o,p),o=[]),u},i=()=>{r=e.reset(a),o=[],e.render((()=>a.get_score(e)))};t.append("span").text("Resolution"),t.append("input").attr("type","number").attr("name","resolution").attr("min",2).attr("max",100).attr("value",n);const s=e.setting.ml.controller.stepLoopButtons().init((()=>{const n=+t.select("[name=resolution]").property("value");a=new PGAgent(e,n),i()}));t.append("input").attr("type","button").attr("value","Reset").on("click",i),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","learning_rate").attr("min",.01).attr("max",10).attr("step","0.01").attr("value",.1),s.step((t=>{p()?setTimeout((()=>{i(),t&&setTimeout(t,10)})):t&&setTimeout(t,5)})).skip((()=>{p(!1)&&i()})),e.plotRewards(t)};export default function(t){t.setting.ml.usage='Data point becomes wall. Click "step" to update.',dispPolicyGradient(t.setting.ml.configElement,t)}