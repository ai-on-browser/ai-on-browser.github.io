import PGAgent from"../../lib/model/policy_gradient.js";var dispPolicyGradient=function(t,e){const n="grid"===e.type?Math.max(...e.env.size):20;let r=new PGAgent(e,n),a=e.reset(r);e.render((()=>r.get_score()));const o=(n=!0)=>{const o=+t.select("[name=learning_rate]").property("value"),i=r.get_action(a),{state:p,reward:s,done:l}=e.step(i,r);return r.update(i,a,s,l,o),n&&e.render(),a=p,l},i=()=>{a=e.reset(r),r.reset(),e.render((()=>r.get_score()))};t.append("span").text("Resolution"),t.append("input").attr("type","number").attr("name","resolution").attr("min",2).attr("max",100).attr("value",n);const p=e.setting.ml.controller.stepLoopButtons().init((()=>{const n=+t.select("[name=resolution]").property("value");r=new PGAgent(e,n),i()}));t.append("input").attr("type","button").attr("value","Reset").on("click",i),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","learning_rate").attr("min",.01).attr("max",10).attr("step","0.01").attr("value",.1),p.step((t=>{o()?setTimeout((()=>{i(),t&&setTimeout(t,10)})):t&&setTimeout(t,5)})).skip((()=>{o(!1)&&i()})),e.plotRewards(t)};export default function(t){t.setting.ml.usage='Click "step" to update.',dispPolicyGradient(t.setting.ml.configElement,t)}