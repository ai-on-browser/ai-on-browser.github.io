import{PCA,AnomalyPCA}from"../../lib/model/pca.js";var dispPCA=function(e,t){let n=null,a=2;const l=()=>{t.fit(((a,l,p)=>{if("DR"===t.task){const e=t.dimension,l=new PCA(n);l.fit(a);p(l.predict(a,e))}else{const n=new AnomalyPCA;n.fit(a);const l=+e.select("[name=threshold]").property("value");p(n.predict(a).map((e=>e>l))),t.predict(((e,t)=>{t(n.predict(e).map((e=>e>l)))}),10)}}))};"AD"!==t.task&&e.append("select").on("change",(function(){const t=d3.select(this);t.selectAll("option").filter((e=>e.value===t.property("value"))).each((t=>{n=t.kernel,"polynomial"===t.value?e.select("[name=poly_dimension]").style("display","inline-block"):e.select("[name=poly_dimension]").style("display","none")}))})).selectAll("option").data([{value:"no kernel",kernel:null},{value:"gaussian",kernel:(e,t,n=1)=>{const a=e.copySub(t).reduce(((e,t)=>e+t*t),0);return Math.exp(-a/n**2)}},{value:"polynomial",kernel:(e,t)=>e.tDot(t).value[0]**a}]).enter().append("option").attr("value",(e=>e.value)).text((e=>e.value)),e.append("span").attr("name","poly_dimension").style("display","none").each((function(){d3.select(this).append("span").text(" d = ").append("input").attr("type","number").attr("value",2).attr("min",1).attr("max",10).on("change",(function(){a=d3.select(this).property("value")}))})),"AD"===t.task&&(e.append("span").text(" threshold = "),e.append("input").attr("type","number").attr("name","threshold").attr("value",.1).attr("min",0).attr("max",10).attr("step",.01).on("change",l)),e.append("input").attr("type","button").attr("value","Fit").on("click",l)};export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Fit" button.',dispPCA(e.setting.ml.configElement,e)}