import{PCA,AnomalyPCA}from"../../lib/model/pca.js";var dispPCA=function(t,e){let n=2;const a=()=>{e.fit(((a,p,l)=>{if("DR"===e.task){const p=e.dimension,i=t.select("[name=kernel]").property("value"),o=new PCA(i,[n]);o.fit(a);l(o.predict(a,p))}else{const n=new AnomalyPCA;n.fit(a);const p=+t.select("[name=threshold]").property("value");l(n.predict(a).map((t=>t>p))),e.predict(((t,e)=>{e(n.predict(t).map((t=>t>p)))}),10)}}))};"AD"!==e.task&&t.append("select").attr("name","kernel").on("change",(function(){"polynomial"===d3.select(this).property("value")?t.select("[name=poly_dimension]").style("display","inline-block"):t.select("[name=poly_dimension]").style("display","none")})).selectAll("option").data(["no kernel","gaussian","polynomial"]).enter().append("option").attr("value",(t=>t)).text((t=>t)),t.append("span").attr("name","poly_dimension").style("display","none").each((function(){d3.select(this).append("span").text(" d = ").append("input").attr("type","number").attr("value",2).attr("min",1).attr("max",10).on("change",(function(){n=d3.select(this).property("value")}))})),"AD"===e.task&&(t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value",.1).attr("min",0).attr("max",10).attr("step",.01).on("change",a)),t.append("input").attr("type","button").attr("value","Fit").on("click",a)};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Fit" button.',dispPCA(t.setting.ml.configElement,t)}