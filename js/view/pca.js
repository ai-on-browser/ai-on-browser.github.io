import{PCA,DualPCA,KernelPCA,AnomalyPCA}from"../../lib/model/pca.js";var dispPCA=function(t,e){const n=()=>{if("DR"===e.task){const n=e.dimension,a=t.select("[name=kernel]").property("value"),p=t.select("[name=type]").property("value");let l;if(""===p)l=new PCA;else if("dual"===p)l=new DualPCA;else{const e=[];"polynomial"===a?e.push(+t.select("[name=poly_d]").property("value")):"gaussian"===a&&e.push(+t.select("[name=sigma]").property("value")),l=new KernelPCA(a,e)}l.fit(e.trainInput);const s=l.predict(e.trainInput,n);e.trainResult=s}else{const n=new AnomalyPCA;n.fit(e.trainInput);const a=+t.select("[name=threshold]").property("value"),p=n.predict(e.trainInput);e.trainResult=p.map((t=>t>a));const l=n.predict(e.testInput(10));e.testResult(l.map((t=>t>a)))}};"AD"!==e.task&&t.append("select").attr("name","type").on("change",(function(){"kernel"===d3.select(this).property("value")?a.style("display","inline-block"):a.style("display","none")})).selectAll("option").data(["","dual","kernel"]).enter().append("option").attr("value",(t=>t)).text((t=>t));const a=t.append("span").style("display","none");a.append("select").attr("name","kernel").on("change",(function(){const t=d3.select(this);p.style("display","none"),l.style("display","none"),"polynomial"===t.property("value")?p.style("display","inline-block"):"gaussian"===t.property("value")&&l.style("display","inline-block")})).selectAll("option").data(["gaussian","polynomial"]).enter().append("option").attr("value",(t=>t)).text((t=>t));const p=a.append("span").style("display","none");p.append("span").text(" d = ").append("input").attr("type","number").attr("name","poly_d").attr("value",2).attr("min",1).attr("max",10);const l=a.append("span");l.append("span").text(" sigma = ").append("input").attr("type","number").attr("name","sigma").attr("value",1).attr("min",0).attr("max",10).attr("step",.1),"AD"===e.task&&(t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value",.1).attr("min",0).attr("max",10).attr("step",.01).on("change",n)),t.append("input").attr("type","button").attr("value","Fit").on("click",n)};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Fit" button.',dispPCA(t.setting.ml.configElement,t)}