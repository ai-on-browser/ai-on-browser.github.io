var v=Object.defineProperty;var m=(e,t)=>v(e,"name",{value:t,configurable:!0});import{PCA as b,DualPCA as h,KernelPCA as A,AnomalyPCA as C}from"../../lib/model/pca.js";import w from"../controller.js";export default function x(e){e.setting.ml.usage='Click and add data point. Next, click "Fit" button.';const t=new w(e),p=m(()=>{if(e.task==="DR"){const l=e.dimension;let n;i.value===""?n=new b(l):i.value==="dual"?n=new h(l):n=new A({name:o.value,sigma:k.value,n:r.value},l),n.fit(e.trainInput);const c=n.predict(e.trainInput);e.trainResult=c}else{const l=new C;l.fit(e.trainInput);const n=y.value,c=l.predict(e.trainInput);e.trainResult=c.map(d=>d>n);const g=l.predict(e.testInput(10));e.testResult(g.map(d=>d>n))}},"fitModel");let i=null;e.task!=="AD"&&(i=t.select(["","dual","kernel"]).on("change",()=>{i.value==="kernel"?s.element.style.display="inline-block":s.element.style.display="none"}));const s=t.span();s.element.style.display="none";const o=s.select(["gaussian","polynomial"]).on("change",function(){a.element.style.display="none",u.element.style.display="none",o.value==="polynomial"?a.element.style.display="inline-block":o.value==="gaussian"&&(u.element.style.display="inline-block")}),a=s.span();a.element.style.display="none";const r=a.input.number({label:" d = ",value:2,min:1,max:10}),u=s.span(),k=u.input.number({label:" sigma = ",value:1,min:0,max:10,step:.1});let y=null;e.task==="AD"&&(y=t.input.number({label:" threshold = ",value:.1,min:0,max:10,step:.01}).on("change",p)),t.input.button("Fit").on("click",p)}m(x,"default");
