import{PCA,DualPCA,KernelPCA,AnomalyPCA}from"../../lib/model/pca.js";import Controller from"../controller.js";export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Fit" button.';const n=new Controller(e),l=()=>{if("DR"===e.task){const n=e.dimension;let l;if(""===t.value)l=new PCA;else if("dual"===t.value)l=new DualPCA;else{const e=[];"polynomial"===s.value?e.push(o.value):"gaussian"===s.value&&e.push(p.value),l=new KernelPCA(s.value,e)}l.fit(e.trainInput);const a=l.predict(e.trainInput,n);e.trainResult=a}else{const n=new AnomalyPCA;n.fit(e.trainInput);const l=m.value,t=n.predict(e.trainInput);e.trainResult=t.map((e=>e>l));const a=n.predict(e.testInput(10));e.testResult(a.map((e=>e>l)))}};let t=null;"AD"!==e.task&&(t=n.select(["","dual","kernel"]).on("change",(()=>{"kernel"===t.value?a.element.style.display="inline-block":a.element.style.display="none"})));const a=n.span();a.element.style.display="none";const s=a.select(["gaussian","polynomial"]).on("change",(function(){i.element.style.display="none",u.element.style.display="none","polynomial"===s.value?i.element.style.display="inline-block":"gaussian"===s.value&&(u.element.style.display="inline-block")})),i=a.span();i.element.style.display="none";const o=i.input.number({label:" d = ",value:2,min:1,max:10}),u=a.span(),p=u.input.number({label:" sigma = ",value:1,min:0,max:10,step:.1});let m=null;"AD"===e.task&&(m=n.input.number({label:" threshold = ",value:.1,min:0,max:10,step:.01}).on("change",l)),n.input.button("Fit").on("click",l)}