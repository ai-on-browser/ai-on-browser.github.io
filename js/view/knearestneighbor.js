import{KNN,KNNRegression,KNNAnomaly,KNNDensityEstimation,SemiSupervisedKNN}from"../../lib/model/knearestneighbor.js";var dispKNN=function(t,e){const n=e.task;let a=5;const i=function(){const i=t.select("[name=metric]").property("value");if("CF"===n){if(0===e.datas.length)return;let t=new KNN(a,i);t.fit(e.trainInput,e.trainOutput.map((t=>t[0])));const n=t.predict(e.testInput(4));e.testResult(n)}else if("RG"===n){const t=e.datas.dimension;let n=new KNNRegression(a,i);n.fit(e.trainInput,e.trainOutput.map((t=>t[0])));let r=n.predict(e.testInput(1===t?1:4));e.testResult(r)}else if("AD"===n){const n=new KNNAnomaly(a+1,i);n.fit(e.trainInput);const r=+t.select("[name=threshold]").property("value"),p=n.predict(e.trainInput).map((t=>t>r));e.trainResult=p}else if("DE"===n){const t=new KNNDensityEstimation(a+1,i);t.fit(e.trainInput);const n=t.predict(e.testInput(5)),r=Math.min(...n),p=Math.max(...n);e.testResult(n.map((t=>specialCategory.density((t-r)/(p-r)))))}else if("CP"===n){const n=new KNNAnomaly(a+1,i),r=+t.select("[name=window]").property("value"),p=e.trainInput.rolling(r);n.fit(p);const s=+t.select("[name=threshold]").property("value"),l=n.predict(p);for(let t=0;t<r/2;t++)l.unshift(0);e.trainResult=l,e._plotter.threshold=s}else if("SC"===n){const t=new SemiSupervisedKNN(a,i);t.fit(e.trainInput,e.trainOutput.map((t=>t[0]))),e.trainResult=t.predict()}else if("IN"===n){let t=new KNNRegression(1,"euclid");t.fit(e.trainInput,e.trainOutput.map((t=>t[0])));let n=t.predict(e.testInput(1));e.testResult(n)}};t.append("select").attr("name","metric").selectAll("option").data(["euclid","manhattan","chebyshev"]).enter().append("option").attr("value",(t=>t)).text((t=>t)),"IN"!==n&&(t.append("span").text(" k = "),t.append("input").attr("type","number").attr("name","k").attr("value",a).attr("min",1).attr("max",100).property("required",!0).on("change",(function(){a=+t.select("[name=k]").property("value")}))),"CP"===n&&(t.append("span").text(" window = "),t.append("input").attr("type","number").attr("name","window").attr("value",10).attr("min",1).attr("max",100).on("change",(function(){i()}))),"AD"!==n&&"CP"!==n||(t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value","AD"===n?.05:.4).attr("min",.001).attr("max",10).property("required",!0).attr("step",.001).on("change",(function(){i()}))),t.append("input").attr("type","button").attr("value","Calculate").on("click",i)};export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',dispKNN(t.setting.ml.configElement,t)}