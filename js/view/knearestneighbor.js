import{KNN,KNNRegression,KNNAnomaly,KNNDensityEstimation,SemiSupervisedKNN}from"../../lib/model/knearestneighbor.js";var dispKNN=function(t,e){const n=e.task;let a=5;const i=function(){const i=t.select("[name=metric]").property("value");if("CF"===n){if(0===e.datas.length)return;e.fit(((t,n)=>{let p=new KNN(a,i);p.fit(t,n.map((t=>t[0]))),e.predict(((t,e)=>{e(t.map((t=>p.predict(t))))}),4)}))}else if("RG"===n){const t=e.datas.dimension;e.fit(((n,p)=>{let r=new KNNRegression(a,i);r.fit(n,p.map((t=>t[0]))),e.predict(((t,e)=>{e(t.map((t=>r.predict(t))))}),1===t?1:4)}))}else"AD"===n?e.fit(((e,n,p)=>{const r=new KNNAnomaly(a+1,i);r.fit(e);const o=+t.select("[name=threshold]").property("value");p(e.map((t=>r.predict(t)>o)))})):"DE"===n?e.fit(((t,n)=>{const p=new KNNDensityEstimation(a+1,i);p.fit(t),e.predict(((t,e)=>{const n=t.map((t=>p.predict(t))),a=Math.min(...n),i=Math.max(...n);e(n.map((t=>specialCategory.density((t-a)/(i-a)))))}),5)})):"CP"===n?e.fit(((e,n,p)=>{const r=new KNNAnomaly(a+1,i),o=+t.select("[name=window]").property("value"),s=e.rolling(o);r.fit(s);const c=+t.select("[name=threshold]").property("value"),l=s.map((t=>r.predict(t)));for(let t=0;t<o/2;t++)l.unshift(0);p(l,c)})):"SC"===n?e.fit(((t,e,n)=>{const p=new SemiSupervisedKNN(a,i);p.fit(t,e.map((t=>t[0]))),n(p.predict())})):"IN"===n&&e.fit(((t,n)=>{let a=new KNNRegression(1,"euclid");a.fit(t,n.map((t=>t[0]))),e.predict(((t,e)=>{e(t.map((t=>a.predict(t))))}),1)}))};t.append("select").attr("name","metric").selectAll("option").data(["euclid","manhattan","chebyshev"]).enter().append("option").attr("value",(t=>t)).text((t=>t)),"IN"!==n&&(t.append("span").text(" k = "),t.append("input").attr("type","number").attr("name","k").attr("value",a).attr("min",1).attr("max",100).property("required",!0).on("change",(function(){a=+t.select("[name=k]").property("value")}))),"CP"===n&&(t.append("span").text(" window = "),t.append("input").attr("type","number").attr("name","window").attr("value",10).attr("min",1).attr("max",100).on("change",(function(){i()}))),"AD"!==n&&"CP"!==n||(t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value","AD"===n?.05:.4).attr("min",.001).attr("max",10).property("required",!0).attr("step",.001).on("change",(function(){i()}))),t.append("input").attr("type","button").attr("value","Calculate").on("click",i)};export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',dispKNN(t.setting.ml.configElement,t)}