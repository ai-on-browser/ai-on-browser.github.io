var C=Object.defineProperty;var b=(t,c)=>C(t,"name",{value:c,configurable:!0});import S from"../../lib/model/dbscan.js";import _ from"../controller.js";import{getCategoryColor as w}from"../utils.js";export default function k(t){t.setting.ml.usage='Click and add data point. Then, click "Fit" button.',t.setting.ml.reference={title:"DBSCAN (Wikipedia)",url:"https://en.wikipedia.org/wiki/DBSCAN"};const c=new _(t),h=t.svg,s=document.createElementNS("http://www.w3.org/2000/svg","g");h.insertBefore(s,h.firstChild),s.classList.add("range"),s.setAttribute("opacity",.4);const d=b(()=>{s.replaceChildren();const o=new S(i.value,m.value,v.value).predict(t.trainInput);t.trainResult=o.map(r=>r+1),y.value=new Set(o).size;const l=t._renderer[0].scale[0],A=t.trainInput,g=t.invertScale([Array(t.datas.dimension).fill(1),Array(t.datas.dimension).fill(2)]),a=g[1][t._renderer[0]._select[0]]-g[0][t._renderer[0]._select[0]],u=g[1][t._renderer[0]._select[1]]-g[0][t._renderer[0]._select[1]];for(let r=0;r<A.length;r++){const n=t._renderer[0].toPoint(t.invertScale(A[r]));if(v.value==="euclid"){const e=document.createElementNS("http://www.w3.org/2000/svg","ellipse");e.setAttribute("cx",n[0]),e.setAttribute("cy",n[1]),e.setAttribute("rx",i.value*l*a),e.setAttribute("ry",i.value*l*u),e.setAttribute("fill-opacity",0),e.setAttribute("stroke",w(o[r]+1)),s.append(e)}else if(v.value==="manhattan"){const e=document.createElementNS("http://www.w3.org/2000/svg","polygon"),p=i.value*l;e.setAttribute("points",`${n[0]-p*a},${n[1]} ${n[0]},${n[1]-p*u} ${n[0]+p*a},${n[1]} ${n[0]},${n[1]+p*u}`),e.setAttribute("fill-opacity",0),e.setAttribute("stroke",w(o[r]+1)),s.append(e)}else if(v.value==="chebyshev"){const e=document.createElementNS("http://www.w3.org/2000/svg","rect");e.setAttribute("x",n[0]-i.value*l*a),e.setAttribute("y",n[1]-i.value*l*u),e.setAttribute("width",i.value*2*l*a),e.setAttribute("height",i.value*2*l*u),e.setAttribute("fill-opacity",0),e.setAttribute("stroke",w(o[r]+1)),s.append(e)}}},"fitModel"),v=c.select(["euclid","manhattan","chebyshev"]).on("change",d),i=c.input.number({label:"eps",min:.01,max:10,step:.01,value:.05}).on("change",d),m=c.input.number({label:"min pts",min:2,max:1e3,value:5}).on("change",d);c.input.button("Fit").on("click",d);const y=c.text({label:" Clusters: "});return()=>{s.remove()}}b(k,"default");
