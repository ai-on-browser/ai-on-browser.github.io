import{KMeans,KMeanspp,KMedoids,KMedians,SemiSupervisedKMeansModel}from"../../lib/model/kmeans.js";import Controller from"../controller.js";var dispKMeans=function(t,e){const n=new Controller(e);let i="SC"===e.task?new SemiSupervisedKMeansModel:new KMeans;const a=()=>{if(e.init(),"SC"!==e.task)i.clear(),t.select("[name=clusternumber]").text(i.size+" clusters");else{i.init(e.trainInput,e.trainOutput.map((t=>t[0])));const t=i.predict(e.trainInput);e.trainResult=t,e.centroids(i.centroids,i.categories,{line:!0})}},s=n.stepLoopButtons().init(a);"SC"!==e.task&&(t.append("select").on("change",(function(){const t=d3.select(this);t.selectAll("option").filter((e=>e.value===t.property("value"))).each((t=>i=new t.class)),a()})).selectAll("option").data([{value:"k-means",class:KMeans},{value:"k-means++",class:KMeanspp},{value:"k-medoids",class:KMedoids},{value:"k-medians",class:KMedians}]).enter().append("option").attr("value",(t=>t.value)).text((t=>t.value)),t.append("input").attr("type","button").attr("value","Add centroid").on("click",(()=>{i.add(e.trainInput);const n=i.predict(e.trainInput);e.trainResult=n.map((t=>t+1)),e.centroids(i.centroids,i.centroids.map(((t,e)=>e+1)),{line:!0}),t.select("[name=clusternumber]").text(i.size+" clusters")})),t.append("span").attr("name","clusternumber").style("padding","0 10px").text("0 clusters")),s.step((t=>{if(0===i.size)return void(t&&t());i.fit(e.trainInput,e.trainOutput.map((t=>t[0])));const n=i.predict(e.trainInput);e.trainResult="SC"!==e.task?n.map((t=>t+1)):n,e.centroids(i.centroids,"SC"!==e.task?i.centroids.map(((t,e)=>e+1)):i.categories,{line:!0,duration:1e3}),t&&setTimeout(t,1e3)})),t.append("input").attr("type","button").attr("value","Skip").on("click",(()=>{const t=e.trainInput;let n=e.trainOutput;for(n=n.map((t=>t[0]));i.fit(t,n)>1e-8;);const a=i.predict(t);e.trainResult="SC"!==e.task?a.map((t=>t+1)):a,e.centroids(i.centroids,"SC"!==e.task?i.centroids.map(((t,e)=>e+1)):i.categories,{line:!0,duration:1e3})})),s.enable="SC"!==e.task};export default function(t){"SC"!==t.task?t.setting.ml.usage='Click and add data point. Next, select "k-means", "k-means++", "k-medoids" or "k-medians" and click "Add centroid" to add centroid. Finally, click "Step" button repeatedly.':t.setting.ml.usage='Click and add data point. Then, click "Step" button repeatedly.',dispKMeans(t.setting.ml.configElement,t),t.setting.ml.detail="\n$ S_i $ as a set of datas in $ i $th cluster, the objective is to find\n$$\n  \\argmin_S \\sum_{i=1}^k \\sum_{x \\in S_i} \\| x - \\mu_i \\|^2\n$$\nwhere $ \\mu_i $ is the mean of points in $ S_i $.\n<br>\nThe algorithm is simple.\n<ol>\n<li>Initialize $ \\mu_i $.</li>\n<li>Assign the datas to the cluster $ S_i $ with the nearest mean $ \\mu_i $.</li>\n<li>Update $ \\mu_i $.\n$$\n\\mu_i = \\frac{1}{|S_i|} \\sum_{x \\in S_i} x\n$$\n</li>\n<li>Finish if $ \\mu_i $ does not change. Otherwise, go back to step 2.</li>\n</ol>\n"}