import{KMeans,KMeanspp,KMedoids,KMedians,SemiSupervisedKMeansModel}from"../../lib/model/kmeans.js";import Controller from"../controller.js";var dispKMeans=function(e,t){const n=new Controller(t);let i="SC"===t.task?new SemiSupervisedKMeansModel:new KMeans;const s=()=>{t.init(),"SC"!==t.task?(i.clear(),e.select("[name=clusternumber]").text(i.size+" clusters")):(t.fit(((e,t,n)=>{i.init(e,t.map((e=>e[0])));n(i.predict(e))})),t.centroids(i.centroids,i.categories,{line:!0}))},a=n.stepLoopButtons().init(s);"SC"!==t.task&&(e.append("select").on("change",(function(){const e=d3.select(this);e.selectAll("option").filter((t=>t.value===e.property("value"))).each((e=>i=new e.class)),s()})).selectAll("option").data([{value:"k-means",class:KMeans},{value:"k-means++",class:KMeanspp},{value:"k-medoids",class:KMedoids},{value:"k-medians",class:KMedians}]).enter().append("option").attr("value",(e=>e.value)).text((e=>e.value)),e.append("input").attr("type","button").attr("value","Add centroid").on("click",(()=>{t.fit(((e,t,n)=>{i.add(e);n(i.predict(e).map((e=>e+1)))})),t.centroids(i.centroids,i.centroids.map(((e,t)=>t+1)),{line:!0}),e.select("[name=clusternumber]").text(i.size+" clusters")})),e.append("span").attr("name","clusternumber").style("padding","0 10px").text("0 clusters")),a.step((e=>{0!==i.size?(t.fit(((e,n,s)=>{i.fit(e,n.map((e=>e[0])));const a=i.predict(e);s("SC"!==t.task?a.map((e=>e+1)):a)})),t.centroids(i.centroids,"SC"!==t.task?i.centroids.map(((e,t)=>t+1)):i.categories,{line:!0,duration:1e3}),e&&setTimeout(e,1e3)):e&&e()})),e.append("input").attr("type","button").attr("value","Skip").on("click",(()=>{t.fit(((e,n,s)=>{for(n=n.map((e=>e[0]));i.fit(e,n)>1e-8;);const a=i.predict(e);s("SC"!==t.task?a.map((e=>e+1)):a)})),t.centroids(i.centroids,"SC"!==t.task?i.centroids.map(((e,t)=>t+1)):i.categories,{line:!0,duration:1e3})})),a.enable="SC"!==t.task};export default function(e){"SC"!==e.task?e.setting.ml.usage='Click and add data point. Next, select "k-means", "k-means++", "k-medoids" or "k-medians" and click "Add centroid" to add centroid. Finally, click "Step" button repeatedly.':e.setting.ml.usage='Click and add data point. Then, click "Step" button repeatedly.',dispKMeans(e.setting.ml.configElement,e),e.setting.ml.detail="\n$ S_i $ as a set of datas in $ i $th cluster, the objective is to find\n$$\n  \\argmin_S \\sum_{i=1}^k \\sum_{x \\in S_i} \\| x - \\mu_i \\|^2\n$$\nwhere $ \\mu_i $ is the mean of points in $ S_i $.\n<br>\nThe algorithm is simple.\n<ol>\n<li>Initialize $ \\mu_i $.</li>\n<li>Assign the datas to the cluster $ S_i $ with the nearest mean $ \\mu_i $.</li>\n<li>Update $ \\mu_i $.\n$$\n\\mu_i = \\frac{1}{|S_i|} \\sum_{x \\in S_i} x\n$$\n</li>\n<li>Finish if $ \\mu_i $ does not change. Otherwise, go back to step 2.</li>\n</ol>\n"}