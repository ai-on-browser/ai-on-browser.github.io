import NeuralNetworkBuilder from"../neuralnetwork_builder.js";import Matrix from"../../lib/util/matrix.js";import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class NNWorker extends BaseWorker{constructor(){super("js/view/worker/neuralnetwork_worker.js",{type:"module"})}initialize(e,t,i,a){this._postMessage({mode:"init",layers:e,loss:t,optimizer:i},a)}fit(e,t,i,a,l,r){this._postMessage({mode:"fit",x:e,y:t,iteration:i,rate:a,batch:l},r)}predict(e,t){this._postMessage({mode:"predict",x:e},t)}}export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new Controller(e),i=e.task,a=new NNWorker,l=new NeuralNetworkBuilder;let r=0,s=0;const n=()=>"TP"===i?o.value:e.datas.dimension||2;let o=null;"TP"===i&&(o=t.input.number({label:"window width",min:1,max:1e3,value:20})),t.text(" Hidden Layers "),l.makeHtml(e.setting.ml.configElement,{optimizer:!0});const u=t.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const t=l.optimizer;s="CF"===i?Math.max.apply(null,e.datas.y)+1:"TP"===i?e.datas.dimension:1;const n=[{type:"input"}];n.push(...l.layers),n.push({type:"full",out_size:s}),"CF"===i&&n.push({type:"sigmoid"}),a.initialize(n,"mse",t),e.init(),r=0})),p=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),m=t.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),d=t.input.number({label:" Batch size ",min:1,max:100,value:10});let c;u.step((t=>{const l=n();let o=e.trainInput,u=e.trainOutput;const f=Matrix.fromArray(o);if("TP"===i){u=o.slice(l),o=[];for(let e=0;e<f.rows-l;e++)o.push(f.slice(e,e+l).value)}else if("CF"===i)for(let e=0;e<u.length;e++){const t=Array(s).fill(0);t[u[e]]=1,u[e]=t}a.fit(o,u,+p.value,m.value,d.value,(s=>{if(r+=+p.value,"TP"===i){let i=f.slice(f.rows-l).value;const r=[],s=()=>{if(r.length>=c.value)return e.trainResult=r,void(t&&t());a.predict([i],(e=>{e.data[0];r.push(e.data[0]),i=i.slice(f.cols),i.push(...e.data[0]),s()}))};s()}else a.predict(e.testInput(1===l?2:4),(a=>{const l="CF"===i?Matrix.fromArray(a.data).argmax(1).value:a.data;e.testResult(l),t&&t()}))}))})).epoch((()=>r)),c="TP"===i?t.input.number({label:" predict count",min:1,max:1e3,value:100}):t.input({type:"hidden",value:0}),e.setting.ternimate=()=>{a.terminate()}}