import NeuralNetworkBuilder from"../neuralnetwork_builder.js";import Matrix from"../../lib/util/matrix.js";import Controller from"../controller.js";class NNWorker extends BaseWorker{constructor(){super("js/view/worker/neuralnetwork_worker.js",{type:"module"})}initialize(t,e,a,r){this._postMessage({mode:"init",layers:t,loss:e,optimizer:a},r)}fit(t,e,a,r,n,i){this._postMessage({mode:"fit",x:t,y:e,iteration:a,rate:r,batch:n},i)}predict(t,e){this._postMessage({mode:"predict",x:t},e)}}var dispNN=function(t,e){const a=new Controller(e),r=e.task,n=new NNWorker,i=new NeuralNetworkBuilder;let p=0,s=0;const o=()=>"TP"===r?+t.select("[name=width]").property("value"):e.datas.dimension||2;"TP"===r&&(t.append("span").text("window width"),t.append("input").attr("type","number").attr("name","width").attr("min",1).attr("max",1e3).attr("value",20)),t.append("span").text(" Hidden Layers "),i.makeHtml(t,{optimizer:!0});const l=a.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const t=i.optimizer;s="CF"===r?Math.max.apply(null,e.datas.y)+1:"TP"===r?e.datas.dimension:1;const a=[{type:"input"}];a.push(...i.layers),a.push({type:"full",out_size:s}),"CF"===r&&a.push({type:"sigmoid"}),n.initialize(a,"mse",t),e.init(),p=0}));return t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","rate").attr("min",0).attr("max",100).attr("step",.01).attr("value",.001),t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",10).attr("min",1).attr("max",100).attr("step",1),l.step((a=>{const i=+t.select("[name=iteration]").property("value"),l=+t.select("[name=batch]").property("value"),d=+t.select("[name=rate]").property("value"),u=+t.select("[name=pred_count]").property("value"),m=o();e.fit(((t,o,c)=>{const y=Matrix.fromArray(t);if("TP"===r){o=t.slice(m),t=[];for(let e=0;e<y.rows-m;e++)t.push(y.slice(e,e+m).value)}else if("CF"===r)for(let t=0;t<o.length;t++){const e=Array(s).fill(0);e[o[t]]=1,o[t]=e}n.fit(t,o,i,d,l,(t=>{if(p+=i,"TP"===r){let t=y.slice(y.rows-m).value;const e=[],r=()=>{if(e.length>=u)return c(e),void(a&&a());n.predict([t],(a=>{a.data[0];e.push(a.data[0]),t=t.slice(y.cols),t.push(...a.data[0]),r()}))};r()}else e.predict(((t,e)=>{n.predict(t,(t=>{const n="CF"===r?Matrix.fromArray(t.data).argmax(1).value:t.data;e(n),a&&a()}))}),1===m?2:4)}))}))})).epoch((()=>p)),"TP"===r?(t.append("span").text(" predict count"),t.append("input").attr("type","number").attr("name","pred_count").attr("min",1).attr("max",1e3).attr("value",100)):t.append("input").attr("type","hidden").attr("name","pred_count").property("value",0),()=>{n.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ternimate=dispNN(t.setting.ml.configElement,t)}