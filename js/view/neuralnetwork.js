import NeuralNetworkBuilder from"../neuralnetwork_builder.js";import Matrix from"../../lib/util/matrix.js";class NNWorker extends BaseWorker{constructor(){super("js/view/worker/neuralnetwork_worker.js",{type:"module"})}initialize(t,e,a,r){this._postMessage({mode:"init",layers:t,loss:e,optimizer:a},r)}fit(t,e,a,r,n,i){this._postMessage({mode:"fit",x:t,y:e,iteration:a,rate:r,batch:n},i)}predict(t,e){this._postMessage({mode:"predict",x:t},e)}}var dispNN=function(t,e){const a=e.task,r=new NNWorker,n=new NeuralNetworkBuilder;let i=0,p=0;const s=()=>"TP"===a?+t.select("[name=width]").property("value"):e.datas.dimension||2;"TP"===a&&(t.append("span").text("window width"),t.append("input").attr("type","number").attr("name","width").attr("min",1).attr("max",1e3).attr("value",20)),t.append("span").text(" Hidden Layers "),n.makeHtml(t,{optimizer:!0});const o=e.setting.ml.controller.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const t=n.optimizer;p="CF"===a?Math.max.apply(null,e.datas.y)+1:"TP"===a?e.datas.dimension:1;const s=[{type:"input"}];s.push(...n.layers),s.push({type:"full",out_size:p}),"CF"===a&&s.push({type:"sigmoid"}),r.initialize(s,"mse",t),e.init(),i=0}));return t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","rate").attr("min",0).attr("max",100).attr("step",.01).attr("value",.001),t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",10).attr("min",1).attr("max",100).attr("step",1),o.step((n=>{const o=+t.select("[name=iteration]").property("value"),l=+t.select("[name=batch]").property("value"),d=+t.select("[name=rate]").property("value"),u=+t.select("[name=pred_count]").property("value"),m=s();e.fit(((t,s,c)=>{const y=Matrix.fromArray(t);if("TP"===a){s=t.slice(m),t=[];for(let e=0;e<y.rows-m;e++)t.push(y.slice(e,e+m).value)}else if("CF"===a)for(let t=0;t<s.length;t++){const e=Array(p).fill(0);e[s[t]]=1,s[t]=e}r.fit(t,s,o,d,l,(t=>{if(i+=o,"TP"===a){let t=y.slice(y.rows-m).value;const e=[],a=()=>{if(e.length>=u)return c(e),void(n&&n());r.predict([t],(r=>{r.data[0];e.push(r.data[0]),t=t.slice(y.cols),t.push(...r.data[0]),a()}))};a()}else e.predict(((t,e)=>{r.predict(t,(t=>{const r="CF"===a?Matrix.fromArray(t.data).argmax(1).value:t.data;e(r),n&&n()}))}),1===m?2:4)}))}))})).epoch((()=>i)),"TP"===a?(t.append("span").text(" predict count"),t.append("input").attr("type","number").attr("name","pred_count").attr("min",1).attr("max",1e3).attr("value",100)):t.append("input").attr("type","hidden").attr("name","pred_count").property("value",0),()=>{r.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ternimate=dispNN(t.setting.ml.configElement,t)}