import{RBM,GBRBM}from"../../lib/model/rbm.js";var dispRBM=function(t,e){let n=null,a=null,p=null,l=1;"GR"===e.task?t.append("input").attr("type","hidden").attr("name","type").attr("value","GBRBM"):t.append("select").attr("name","type").selectAll("option").data(["RBM","GBRBM"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" hidden nodes "),t.append("input").attr("type","number").attr("name","hiddens").attr("min",1).attr("max",100).attr("value",10),t.append("span").text(" learning rate "),t.append("input").attr("type","number").attr("name","lr").attr("min",.01).attr("max",10).attr("step",.01).attr("value",.01),e.setting.ml.controller.stepLoopButtons().init((()=>{n=null,e.init()})).step((r=>{e.fit(((i,s,o)=>{let d=i;if("DN"===e.task&&(d=[d.flat(2)]),!n){const a=t.select("[name=type]").property("value"),p=+t.select("[name=hiddens]").property("value"),r=+t.select("[name=lr]").property("value");"RBM"===a?(n=new RBM(p,r),l=255):(n=new GBRBM(p,r,"DN"===e.task),l=1)}n.fit(d),"GR"===e.task?(o(n.predict(d)),r&&r()):e.predict(((t,e)=>{a=[t.flat(2)],a=n.predict(a),p=t=>e(t[0].map((t=>t*l))),p(a),r&&r()}),8)}),8)})).epoch(),"GR"!==e.task&&(t.append("epan").text(" Estimate"),e.setting.ml.controller.stepLoopButtons().init((()=>{n&&e.predict(((t,e)=>{a=[t.flat(2)],p=t=>e(t[0].map((t=>t*l))),p(a)}),8)})).step((t=>{n&&(a=n.predict(a),p(a),t&&t())})))};export default function(t){t.setting.ml.usage='Click "Fit" button. Then, click "estimate" button.',dispRBM(t.setting.ml.configElement,t)}