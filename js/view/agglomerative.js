import{CompleteLinkageAgglomerativeClustering,SingleLinkageAgglomerativeClustering,GroupAverageAgglomerativeClustering,WardsAgglomerativeClustering,CentroidAgglomerativeClustering,WeightedAverageAgglomerativeClustering,MedianAgglomerativeClustering}from"../../lib/model/agglomerative.js";import Controller from"../controller.js";import{getCategoryColor,DataConvexHull}from"../utils.js";const argmin=function(e,t){return 0===e.length?-1:(e=t?e.map(t):e).indexOf(Math.min(...e))},argmax=function(e,t){return 0===e.length?-1:(e=t?e.map(t):e).indexOf(Math.max(...e))};export default function(e){e.setting.ml.usage='Click and add data point. Next, select distance type and click "Initialize". Finally, select cluster number.',e.setting.terminate=()=>{document.querySelector("svg .grouping").remove()};const t=d3.select(e.svg),l=new Controller(e);let n=null,a=null,i=null;t.insert("g",":first-child").attr("class","grouping");const r=l=>{let n=[];const i=d.value;let r=1;const o=[];a.getClusters(i).forEach((t=>{if(t.size>1){let a=[];const i=[t];for(;i.length>0;){const e=i.pop();e.size>1?(e.line||(e.line=l(e.children[0],e.children[1])),a=a.concat(e.line)):e.children||(o[e.index]=r),e.children&&i.push(...e.children)}a=a.map((t=>({path:t.map((t=>e._renderer[0].toPoint(t))),color:getCategoryColor(r)}))),n=n.concat(a)}else o[t.index]=r;r+=t.size})),e.trainResult=o,t.selectAll(".grouping path").remove(),t.select(".grouping").selectAll("path").data(n).enter().append("path").attr("d",(e=>(e=>{let t="";for(let l=0;l<e.length;l++)t+=`${0===l?"M":"L"}${e[l][0]},${e[l][1]}`;return t})(e.path))).attr("stroke",(e=>e.color))},o=function(){t.selectAll(".grouping polygon").remove();const l=d.value;let n=1;const i=[];a.getClusters(l).forEach((l=>{if(l.size>1){const a=[l];for(;a.length>0;){const e=a.pop();e.poly?e.poly.remove():e.children||(i[e.index]=n),e.children&&a.push(...e.children)}l.poly=new DataConvexHull(t.select(".grouping"),l.leafs.map((t=>e._renderer[0].points[t.index]))),l.poly.color=getCategoryColor(n)}else i[l.index]=n;n+=l.size})),e.trainResult=i},s={"Complete Linkage":{class:CompleteLinkageAgglomerativeClustering,plot:()=>{r(((e,t)=>{const l=e.leafs,n=t.leafs;let a=l.map((e=>[e,n[argmax(n,(t=>e.distances[t.index]))]])),i=a[argmax(a,(e=>e[0].distances[e[1].index]))];return[[i[0].point,i[1].point]]}))}},"Single Linkage":{class:SingleLinkageAgglomerativeClustering,plot:()=>{r(((e,t)=>{const l=e.leafs,n=t.leafs;let a=l.map((e=>[e,n[argmin(n,(t=>e.distances[t.index]))]])),i=a[argmin(a,(e=>e[0].distances[e[1].index]))];return[[i[0].point,i[1].point]]}))}},"Group Average":{class:GroupAverageAgglomerativeClustering,plot:()=>o()},"Ward's":{class:WardsAgglomerativeClustering,plot:()=>o()},Centroid:{class:CentroidAgglomerativeClustering,plot:()=>o()},"Weighted Average":{class:WeightedAverageAgglomerativeClustering,plot:()=>o()},Median:{class:MedianAgglomerativeClustering,plot:()=>o()}},g=l.select(["Complete Linkage","Single Linkage","Group Average","Ward's","Centroid","Weighted Average","Median"]).on("change",(()=>{n=s[g.value].class,i=s[g.value].plot}));n=s["Complete Linkage"].class,i=s["Complete Linkage"].plot;const c=l.select(["euclid","manhattan","chebyshev"]);l.input.button("Initialize").on("click",(()=>{n&&(a=new n(c.value),a.fit(e.trainInput),u.element.max=e.datas.length,u.element.value=10,u.element.disabled=!1,d.element.max=e.datas.length,d.element.value=10,d.element.disabled=!1,t.selectAll("path").remove(),t.selectAll(".grouping *").remove(),i())}));const u=l.input.number({label:"Cluster #",min:1,max:1,value:1,disabled:"disabled"}).on("change",(()=>{d.value=u.value,i()})),d=l.input.range({min:1,disabled:"disabled"}).on("change",(()=>{u.value=d.value,i()})).on("input",(()=>{u.value=d.value}))}