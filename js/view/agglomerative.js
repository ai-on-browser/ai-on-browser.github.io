import{CompleteLinkageAgglomerativeClustering,SingleLinkageAgglomerativeClustering,GroupAverageAgglomerativeClustering,WardsAgglomerativeClustering,CentroidAgglomerativeClustering,WeightedAverageAgglomerativeClustering,MedianAgglomerativeClustering}from"../../lib/model/agglomerative.js";import Controller from"../controller.js";import{getCategoryColor,DataConvexHull}from"../utils.js";const argmin=function(e,t){return 0===e.length?-1:(e=t?e.map(t):e).indexOf(Math.min(...e))},argmax=function(e,t){return 0===e.length?-1:(e=t?e.map(t):e).indexOf(Math.max(...e))};export default function(e){e.setting.ml.usage='Click and add data point. Next, select distance type and click "Initialize". Finally, select cluster number.',e.setting.terminate=()=>{d3.selectAll("svg .grouping").remove()};const t=e.svg,l=d3.line().x((e=>e[0])).y((e=>e[1])),n=new Controller(e);let a=null,i=null,r=null;t.insert("g",":first-child").attr("class","grouping");const o=n=>{let a=[];const r=p.value;let o=1;const s=[];i.getClusters(r).forEach((t=>{if(t.size>1){let l=[];const i=[t];for(;i.length>0;){const e=i.pop();e.size>1?(e.line||(e.line=n(e.children[0],e.children[1])),l=l.concat(e.line)):e.children||(s[e.index]=o),e.children&&i.push(...e.children)}l=l.map((t=>({path:t.map((t=>e._renderer[0].toPoint(t))),color:getCategoryColor(o)}))),a=a.concat(l)}else s[t.index]=o;o+=t.size})),e.trainResult=s,t.selectAll(".grouping path").remove(),t.select(".grouping").selectAll("path").data(a).enter().append("path").attr("d",(e=>l(e.path))).attr("stroke",(e=>e.color))},s=function(){t.selectAll(".grouping polygon").remove();const l=p.value;let n=1;const a=[];i.getClusters(l).forEach((l=>{if(l.size>1){const i=[l];for(;i.length>0;){const e=i.pop();e.poly?e.poly.remove():e.children||(a[e.index]=n),e.children&&i.push(...e.children)}l.poly=new DataConvexHull(t.select(".grouping"),l.leafs.map((t=>e._renderer[0].points[t.index]))),l.poly.color=getCategoryColor(n)}else a[l.index]=n;n+=l.size})),e.trainResult=a},g={"Complete Linkage":{class:CompleteLinkageAgglomerativeClustering,plot:()=>{o(((e,t)=>{const l=e.leafs,n=t.leafs;let a=l.map((e=>[e,n[argmax(n,(t=>e.distances[t.index]))]])),i=a[argmax(a,(e=>e[0].distances[e[1].index]))];return[[i[0].point,i[1].point]]}))}},"Single Linkage":{class:SingleLinkageAgglomerativeClustering,plot:()=>{o(((e,t)=>{const l=e.leafs,n=t.leafs;let a=l.map((e=>[e,n[argmin(n,(t=>e.distances[t.index]))]])),i=a[argmin(a,(e=>e[0].distances[e[1].index]))];return[[i[0].point,i[1].point]]}))}},"Group Average":{class:GroupAverageAgglomerativeClustering,plot:()=>s()},"Ward's":{class:WardsAgglomerativeClustering,plot:()=>s()},Centroid:{class:CentroidAgglomerativeClustering,plot:()=>s()},"Weighted Average":{class:WeightedAverageAgglomerativeClustering,plot:()=>s()},Median:{class:MedianAgglomerativeClustering,plot:()=>s()}},c=n.select(["Complete Linkage","Single Linkage","Group Average","Ward's","Centroid","Weighted Average","Median"]).on("change",(()=>{a=g[c.value].class,r=g[c.value].plot}));a=g["Complete Linkage"].class,r=g["Complete Linkage"].plot;const u=n.select(["euclid","manhattan","chebyshev"]);n.input.button("Initialize").on("click",(()=>{a&&(i=new a(u.value),i.fit(e.trainInput),d.element.max=e.datas.length,d.element.value=10,d.element.disabled=!1,p.element.max=e.datas.length,p.element.value=10,p.element.disabled=!1,t.selectAll("path").remove(),t.selectAll(".grouping *").remove(),r())}));const d=n.input.number({label:"Cluster #",min:1,max:1,value:1,disabled:"disabled"}).on("change",(()=>{p.value=d.value,r()})),p=n.input.range({min:1,disabled:"disabled"}).on("change",(()=>{d.value=p.value,r()})).on("input",(()=>{d.value=p.value}))}