import{CompleteLinkageAgglomerativeClustering,SingleLinkageAgglomerativeClustering,GroupAverageAgglomerativeClustering,WardsAgglomerativeClustering,CentroidAgglomerativeClustering,WeightedAverageAgglomerativeClustering,MedianAgglomerativeClustering}from"../../lib/model/agglomerative.js";import Controller from"../controller.js";import{getCategoryColor,DataConvexHull}from"../utils.js";const argmin=function(e,l){return 0===e.length?-1:(e=l?e.map(l):e).indexOf(Math.min(...e))},argmax=function(e,l){return 0===e.length?-1:(e=l?e.map(l):e).indexOf(Math.max(...e))};var dispAgglomerative=function(e,l){const t=l.svg,a=d3.line().x((e=>e[0])).y((e=>e[1])),n=new Controller(l);let i=null,o=null,r=null;t.insert("g",":first-child").attr("class","grouping");const s=e=>{let n=[];const i=c.value;let r=1;o.getClusters(i).forEach((t=>{if(t.leafCount()>1){let a=[];t.scan((t=>{t.leafCount()>1?(t.value.line||(t.value.line=e(t.at(0),t.at(1))),a=a.concat(t.value.line)):t.isLeaf()&&(l.datas.at(t.value.index).y=r)})),a=a.map((e=>({path:e.map((e=>l._renderer.toPoint(e))),color:getCategoryColor(r)}))),n=n.concat(a)}else l.datas.at(t.value.index).y=r;r+=t.leafCount()})),t.selectAll(".grouping path").remove(),t.select(".grouping").selectAll("path").data(n).enter().append("path").attr("d",(e=>a(e.path))).attr("stroke",(e=>e.color))},g=function(){t.selectAll(".grouping polygon").remove();const e=c.value;let a=1;o.getClusters(e).forEach((e=>{e.leafCount()>1?(e.scan((e=>{e.value.poly?e.value.poly.remove():e.isLeaf()&&(l.datas.at(e.value.index).y=a)})),Promise.resolve().then((()=>{e.value.poly=new DataConvexHull(t.select(".grouping"),e.leafs().map((e=>l.datas.points[e.value.index])))}))):l.datas.at(e.value.index).y=a,a+=e.leafCount()}))};e.append("select").on("change",(function(){var e=d3.select(this);e.selectAll("option").filter((l=>l.value===e.property("value"))).each((e=>i=e.class)).each((e=>r=e.plot))})).selectAll("option").data([{value:"Complete Linkage",class:CompleteLinkageAgglomerativeClustering,plot:()=>{s(((e,l)=>{let t=e.leafValues(),a=l.leafValues(),n=t.map((e=>[e,a[argmax(a,(l=>e.distances[l.index]))]])),i=n[argmax(n,(e=>e[0].distances[e[1].index]))];return[[i[0].point,i[1].point]]}))}},{value:"Single Linkage",class:SingleLinkageAgglomerativeClustering,plot:()=>{s(((e,l)=>{let t=e.leafValues(),a=l.leafValues(),n=t.map((e=>[e,a[argmin(a,(l=>e.distances[l.index]))]])),i=n[argmin(n,(e=>e[0].distances[e[1].index]))];return[[i[0].point,i[1].point]]}))}},{value:"Group Average",class:GroupAverageAgglomerativeClustering,plot:()=>g()},{value:"Ward's",class:WardsAgglomerativeClustering,plot:()=>g()},{value:"Centroid",class:CentroidAgglomerativeClustering,plot:()=>g()},{value:"Weighted Average",class:WeightedAverageAgglomerativeClustering,plot:()=>g()},{value:"Median",class:MedianAgglomerativeClustering,plot:()=>g()}]).enter().append("option").attr("value",(e=>e.value)).text((e=>e.value)).each(((e,l)=>0===l&&(i=e.class))).each(((e,l)=>0===l&&(r=e.plot)));const u=n.select(["euclid","manhattan","chebyshev"]);n.input.button("Initialize").on("click",(()=>{i&&(o=new i(u.value),o.fit(l.trainInput),v.element.max=l.datas.length,v.element.value=10,v.element.disabled=!1,c.element.max=l.datas.length,c.element.value=10,c.element.disabled=!1,t.selectAll("path").remove(),t.selectAll(".grouping *").remove(),r())}));const v=n.input.number({label:"Cluster #",min:1,max:1,value:1,disabled:"disabled"}).on("change",(()=>{c.value=v.value,r()})),c=n.input.range({min:1,disabled:"disabled"}).on("change",(()=>{v.value=c.value,r()})).on("input",(()=>{v.value=c.value}))};export default function(e){e.setting.ml.usage='Click and add data point. Next, select distance type and click "Initialize". Finally, select cluster number.',dispAgglomerative(e.setting.ml.configElement,e),e.setting.terminate=()=>{d3.selectAll("svg .grouping").remove()}}