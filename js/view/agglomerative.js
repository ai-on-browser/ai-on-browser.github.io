import{CompleteLinkageAgglomerativeClustering,SingleLinkageAgglomerativeClustering,GroupAverageAgglomerativeClustering,WardsAgglomerativeClustering,CentroidAgglomerativeClustering,WeightedAverageAgglomerativeClustering,MedianAgglomerativeClustering}from"../../lib/model/agglomerative.js";import Controller from"../controller.js";import{getCategoryColor}from"../utils.js";import{DataConvexHull}from"../renderer/util/figure.js";const argmin=function(e,t){return 0===e.length?-1:(e=t?e.map(t):e).indexOf(Math.min(...e))},argmax=function(e,t){return 0===e.length?-1:(e=t?e.map(t):e).indexOf(Math.max(...e))};export default function(e){e.setting.ml.usage='Click and add data point. Next, select distance type and click "Initialize". Finally, select cluster number.',e.setting.terminate=()=>{document.querySelector("svg .grouping").remove()};const t=e.svg,l=e=>{let t="";for(let l=0;l<e.length;l++)t+=`${0===l?"M":"L"}${e[l][0]},${e[l][1]}`;return t},n=new Controller(e);let a=null,r=null,i=null;const o=document.createElementNS("http://www.w3.org/2000/svg","g");t.insertBefore(o,t.firstChild),o.classList.add("grouping");const s=t=>{let n=[];const a=p.value;let i=1;const s=[];r.getClusters(a).forEach((l=>{if(l.size>1){let a=[];const r=[l];for(;r.length>0;){const e=r.pop();e.size>1?(e.line||(e.line=t(e.children[0],e.children[1])),a=a.concat(e.line)):e.children||(s[e.index]=i),e.children&&r.push(...e.children)}a=a.map((t=>({path:t.map((t=>e._renderer[0].toPoint(t))),color:getCategoryColor(i)}))),n=n.concat(a)}else s[l.index]=i;i+=l.size})),e.trainResult=s,o.querySelectorAll("path").forEach((e=>e.remove()));for(const e of n){const t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("d",l(e.path)),t.setAttribute("stroke",e.color),o.append(t)}},g=function(){o.querySelectorAll("polygon").forEach((e=>e.remove()));const t=p.value;let l=1;const n=[];r.getClusters(t).forEach((t=>{if(t.size>1){const a=[t];for(;a.length>0;){const e=a.pop();e.poly?e.poly.remove():e.children||(n[e.index]=l),e.children&&a.push(...e.children)}t.poly=new DataConvexHull(o,t.leafs.map((t=>e._renderer[0].points[t.index]))),t.poly.color=getCategoryColor(l)}else n[t.index]=l;l+=t.size})),e.trainResult=n},c={"Complete Linkage":{class:CompleteLinkageAgglomerativeClustering,plot:()=>{s(((e,t)=>{const l=e.leafs,n=t.leafs;let a=l.map((e=>[e,n[argmax(n,(t=>e.distances[t.index]))]])),r=a[argmax(a,(e=>e[0].distances[e[1].index]))];return[[r[0].point,r[1].point]]}))}},"Single Linkage":{class:SingleLinkageAgglomerativeClustering,plot:()=>{s(((e,t)=>{const l=e.leafs,n=t.leafs;let a=l.map((e=>[e,n[argmin(n,(t=>e.distances[t.index]))]])),r=a[argmin(a,(e=>e[0].distances[e[1].index]))];return[[r[0].point,r[1].point]]}))}},"Group Average":{class:GroupAverageAgglomerativeClustering,plot:()=>g()},"Ward's":{class:WardsAgglomerativeClustering,plot:()=>g()},Centroid:{class:CentroidAgglomerativeClustering,plot:()=>g()},"Weighted Average":{class:WeightedAverageAgglomerativeClustering,plot:()=>g()},Median:{class:MedianAgglomerativeClustering,plot:()=>g()}},u=n.select(["Complete Linkage","Single Linkage","Group Average","Ward's","Centroid","Weighted Average","Median"]).on("change",(()=>{a=c[u.value].class,i=c[u.value].plot}));a=c["Complete Linkage"].class,i=c["Complete Linkage"].plot;const d=n.select(["euclid","manhattan","chebyshev"]);n.input.button("Initialize").on("click",(()=>{a&&(r=new a(d.value),r.fit(e.trainInput),m.element.max=e.datas.length,m.element.value=10,m.element.disabled=!1,p.element.max=e.datas.length,p.element.value=10,p.element.disabled=!1,t.querySelectorAll("path").forEach((e=>e.remove())),o.replaceChildren(),i())}));const m=n.input.number({label:"Cluster #",min:1,max:1,value:1,disabled:"disabled"}).on("change",(()=>{p.value=m.value,i()})),p=n.input.range({min:1,disabled:"disabled"}).on("change",(()=>{m.value=p.value,i()})).on("input",(()=>{m.value=p.value}))}