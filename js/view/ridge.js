import Matrix from"../../lib/util/matrix.js";import{BasisFunctions}from"./least_square.js";import{Ridge,MulticlassRidge,KernelRidge}from"../../lib/model/ridge.js";import EnsembleBinaryModel from"../../lib/model/ensemble_binary.js";import Controller from"../controller.js";export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Fit" button.',e.setting.ml.reference={title:"Ridge regression (Wikipedia)",url:"https://en.wikipedia.org/wiki/Ridge_regression"},e.setting.ml.detail="\nThe model form is\n$$\nf(X) = X W + \\epsilon\n$$\n\nThe loss function can be written as\n$$\nL(W) = \\| X W - y \\|^2 + \\lambda \\| W \\|^2\n$$\nwhere $ y $ is the observed value corresponding to $ X $.\nTherefore, the optimum parameter $ \\hat{W} $ is estimated as\n$$\n\\hat{W} = \\left( X^T X + \\lambda I \\right)^{-1} X^T y\n$$\n";const t=new Controller(e),n=e.task,l=new BasisFunctions(e);let i=null;"CF"===n&&(i=t.select(["oneone","onerest","multiclass"]).on("change",(()=>{"multiclass"===i.value?s.element.style.display="none":s.element.style.display=null})));let s=null;"FS"!==n?(l.makeHtml(t.element),s=t.select(["no kernel","gaussian"])):s=t.input({type:"hidden",value:""});const a=t.select({label:"lambda = ",values:[0,1e-4,.001,.01,.1,1,10,100]});t.input.button("Fit").on("click",(()=>(()=>{const t=e.datas.dimension,r="no kernel"===s.value?null:s.value;let o;const u=+a.value;if(o="CF"===n?r?new EnsembleBinaryModel((function(){return new KernelRidge(u,r)}),i.value):"multiclass"===i.value?new MulticlassRidge(u):new EnsembleBinaryModel((function(){return new Ridge(u)}),i.value):r?new KernelRidge(u,r):new Ridge(u),"FS"===n){o.fit(e.trainInput,e.trainOutput);const t=o.importance().map(((e,t)=>[e,t]));t.sort(((e,t)=>t[0]-e[0]));const n=e.dimension,l=t.map((e=>e[1])).slice(0,n),i=Matrix.fromArray(e.trainInput);e.trainResult=i.col(l).toArray()}else{o.fit(l.apply(e.trainInput).toArray(),e.trainOutput);let n=o.predict(l.apply(e.testInput(r?1===t?1:10:1===t?100:4)));e.testResult(n)}})()))}