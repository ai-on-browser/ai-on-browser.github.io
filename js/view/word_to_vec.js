var h=Object.defineProperty;var o=(t,e)=>h(t,"name",{value:e,configurable:!0});import v from"../controller.js";import{BaseWorker as g}from"../utils.js";class k extends g{static{o(this,"W2VWorker")}constructor(){super("js/view/worker/word2vec_worker.js",{type:"module"})}initialize(e,i,n,s,c){return this._postMessage({mode:"init",method:e,n:i,wordsOrNumber:n,reduce_size:s,optimizer:c})}fit(e,i,n,s){return this._postMessage({mode:"fit",words:e,iteration:i,rate:n,batch:s})}predict(e){return this._postMessage({mode:"predict",x:e})}reduce(e){return this._postMessage({mode:"reduce",x:e}).then(i=>i.data)}}export default function w(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ml.reference={title:"Word2vec (Wikipedia)",url:"https://en.wikipedia.org/wiki/Word2vec"};const e=new v(t),i=new k;let n=0;const s=o(async a=>{const r=await i.fit(t.trainInput,+d.value,p.value,m.value);n=r.data.epoch,t.plotLoss(r.data.loss),t.testResult(await i.reduce(t.testInput())),a&&a()},"fitModel"),c=e.select(["CBOW","skip-gram"]),l=e.input.number({label:" n ",min:1,max:10,value:1}),u=e.stepLoopButtons().init(a=>{if(t.init(),t.datas.length===0){a();return}const r=2;i.initialize(c.value,l.value,t.trainInput,r,"adam").then(a)}),d=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),p=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),m=e.input.number({label:" Batch size ",min:1,max:100,value:10});u.step(s).epoch(()=>n),t.setting.terminate=()=>{i.terminate()}}o(w,"default");
