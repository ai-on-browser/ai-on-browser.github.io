var h=Object.defineProperty;var r=(t,e)=>h(t,"name",{value:e,configurable:!0});import p from"../controller.js";import{BaseWorker as v}from"../utils.js";class g extends v{static{r(this,"W2VWorker")}constructor(){super("js/view/worker/model_worker.js",{type:"module"})}initialize(e,n,i,s,a){return this._postMessage({name:"word_to_vec",method:"constructor",arguments:[e,n,i,s,a]})}epoch(){return this._postMessage({name:"word_to_vec",method:"epoch"}).then(e=>e.data)}fit(e,n,i,s){return this._postMessage({name:"word_to_vec",method:"fit",arguments:[e,n,i,s]}).then(a=>a.data)}predict(e){return this._postMessage({name:"word_to_vec",method:"predict",arguments:[e]}).then(n=>n.data)}reduce(e){return this._postMessage({name:"word_to_vec",method:"reduce",arguments:[e]}).then(n=>n.data)}}export default function _(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ml.reference={title:"Word2vec (Wikipedia)",url:"https://en.wikipedia.org/wiki/Word2vec"};const e=new p(t),n=new g;let i=0;const s=r(async()=>{const o=await n.fit(t.trainInput,+l.value,d.value,m.value);i=await n.epoch(),t.plotLoss(o),t.testResult(await n.reduce(t.testInput()))},"fitModel"),a=e.select(["CBOW","skip-gram"]),c=e.input.number({label:" n ",min:1,max:10,value:1}),u=e.stepLoopButtons().init(o=>{if(t.init(),t.datas.length===0){o();return}n.initialize(a.value,c.value,t.trainInput,2,"adam").then(o)}),l=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),d=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),m=e.input.number({label:" Batch size ",min:1,max:100,value:10});return u.step(s).epoch(()=>i),()=>{n.terminate()}}r(_,"default");
