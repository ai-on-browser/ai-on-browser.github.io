import SVM from"../../lib/model/svm.js";import EnsembleBinaryModel from"../../lib/model/ensemble_binary.js";import Controller from"../controller.js";var dispSVM=function(e,t){const n=new Controller(t);let a=null,o=0;e.append("select").attr("name","method").selectAll("option").data(["oneone","onerest"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.select("[name=method]").property("value","onerest"),e.append("select").attr("name","kernel").on("change",(function(){"gaussian"===d3.select(this).property("value")?e.select("input[name=gamma]").style("display","inline"):e.select("input[name=gamma]").style("display","none")})).selectAll("option").data(["gaussian","linear"]).enter().append("option").property("value",(e=>e)).text((e=>e)),e.append("input").attr("type","number").attr("name","gamma").attr("value",1).attr("min",.01).attr("max",10).attr("step",.01);const l=n.stepLoopButtons().init((()=>{const n=e.select("[name=kernel]").property("value"),l=[];"gaussian"===n&&l.push(+e.select("input[name=gamma]").property("value"));const p=e.select("[name=method]").property("value");a=new EnsembleBinaryModel((function(){return new SVM(n,l)}),p),a.init(t.trainInput,t.trainOutput.map((e=>e[0]))),o=0,t.init()}));e.append("span").text(" Iteration "),e.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3]).enter().append("option").property("value",(e=>e)).text((e=>e)),l.step((function(n){if(0===t.datas.length)return;const l=+e.select("[name=iteration]").property("value");for(let e=0;e<l;e++)a.fit();const p=a.predict(t.testInput(4));t.testResult(p),o+=l,n&&n()})).epoch((()=>o))};export default function(e){e.setting.ml.usage='Click and add data point. Then, click "Calculate".',dispSVM(e.setting.ml.configElement,e)}