import Matrix from"../../lib/util/matrix.js";import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class MLPWorker extends BaseWorker{constructor(){super("js/view/worker/mlp_worker.js",{type:"module"})}initialize(e,t,a,i){this._postMessage({mode:"init",type:e,hidden_sizes:t,activation:a,optimizer:i})}fit(e,t,a,i,l){return this._postMessage({mode:"fit",x:e,y:t,iteration:a,rate:i,batch:l})}predict(e){return this._postMessage({mode:"predict",x:e})}}export default function(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new Controller(e),a=e.task,i=new MLPWorker;let l=0;const s=()=>"TP"===a?r.value:e.datas.dimension||2;let r=null;"TP"===a&&(r=t.input.number({label:"window width",min:1,max:1e3,value:20}));const n=t.array({label:" Hidden Layers ",type:"number",values:[10],default:10,min:1,max:100}),o=t.select({label:" Activation ",values:["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","identity"]}),u=t.select({label:" Optimizer ",values:["sgd","adam","momentum","rmsprop"]}),p=t.stepLoopButtons().init((()=>{0!==e.datas.length&&(i.initialize("CF"===a?"classifier":"regressor",n.value,o.value,u.value),e.init())})),c=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),m=t.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),d=t.input.number({label:" Batch size ",min:1,max:100,value:10});let v;p.step((async t=>{const r=s();let n=e.trainInput,o=e.trainOutput;const u=Matrix.fromArray(n);if("TP"===a){o=n.slice(r),n=[];for(let e=0;e<u.rows-r;e++)n.push(u.slice(e,e+r).value)}"CF"===a&&(o=o.map((e=>e[0])));const p=await i.fit(n,o,+c.value,m.value,d.value);if(l=p.data.epoch,e.plotLoss(p.data.loss),"TP"===a){let a=u.slice(u.rows-r).value;const l=[];for(;;){if(l.length>=v.value)return e.trainResult=l,void(t&&t());const s=await i.predict([a]);l.push(s.data[0]),a=a.slice(u.cols),a.push(...s.data[0])}}else{const a=(await i.predict(e.testInput(1===r?2:4))).data;e.testResult(a),t&&t()}})).epoch((()=>l)),v="TP"===a?t.input.number({label:" predict count",min:1,max:1e3,value:100}):t.input({type:"hidden",value:0}),e.setting.ternimate=()=>{i.terminate()}}