import{Matrix}from"../../lib/util/math.js";class MLPWorker extends BaseWorker{constructor(){super("js/view/worker/mlp_worker.js",{type:"module"})}initialize(t,e,a,n,p){this._postMessage({mode:"init",type:t,hidden_sizes:e,activation:a,optimizer:n},p)}fit(t,e,a,n,p,r){this._postMessage({mode:"fit",x:t,y:e,iteration:a,rate:n,batch:p},r)}predict(t,e){this._postMessage({mode:"predict",x:t},e)}}var dispMLP=function(t,e){const a=e.task,n=new MLPWorker,p=[10];let r=0;const i=()=>"TP"===a?+t.select("[name=width]").property("value"):e.datas.dimension||2;"TP"===a&&(t.append("span").text("window width"),t.append("input").attr("type","number").attr("name","width").attr("min",1).attr("max",1e3).attr("value",20)),t.append("span").text(" Hidden Layers ");const o=t.append("span"),s=()=>{o.selectAll("*").remove();for(let t=0;t<p.length;t++){const e=o.append("input").attr("type","number").attr("min",1).attr("max",100).attr("value",p[t]).on("change",(()=>{p[t]=+e.property("value")}))}p.length>0&&o.append("input").attr("type","button").attr("value","-").on("click",(()=>{p.pop(),s()}))};t.append("input").attr("type","button").attr("value","+").on("click",(()=>{p.push(10),s()})),s(),t.append("span").text(" Activation "),t.append("select").attr("name","activation").selectAll("option").data(["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","linear"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Optimizer "),t.append("select").attr("name","optimizer").selectAll("option").data(["sgd","adam","momentum","rmsprop"]).enter().append("option").property("value",(t=>t)).text((t=>t));const l=e.setting.ml.controller.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const r=t.select("[name=activation]").property("value"),i=t.select("[name=optimizer]").property("value");n.initialize("CF"===a?"classifier":"regressor",p,r,i),e.init()}));return t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text(" Learning rate "),t.append("input").attr("type","number").attr("name","rate").attr("min",0).attr("max",100).attr("step",.01).attr("value",.001),t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",10).attr("min",1).attr("max",100).attr("step",1),l.step((p=>{const o=+t.select("[name=iteration]").property("value"),s=+t.select("[name=batch]").property("value"),l=+t.select("[name=rate]").property("value"),d=+t.select("[name=pred_count]").property("value"),c=i();e.fit(((t,i,u)=>{const m=Matrix.fromArray(t);if("TP"===a){i=t.slice(c),t=[];for(let e=0;e<m.rows-c;e++)t.push(m.slice(e,e+c).value)}"CF"===a&&(i=i.map((t=>t[0]))),n.fit(t,i,o,l,s,(t=>{if(r=t.data.epoch,"TP"===a){let t=m.slice(m.rows-c).value;const e=[],a=()=>{if(e.length>=d)return u(e),void(p&&p());n.predict([t],(n=>{n.data[0];e.push(n.data[0]),t=t.slice(m.cols),t.push(...n.data[0]),a()}))};a()}else e.predict(((t,e)=>{n.predict(t,(t=>{const a=t.data;e(a),p&&p()}))}),1===c?2:4)}))}))})).epoch((()=>r)),"TP"===a?(t.append("span").text(" predict count"),t.append("input").attr("type","number").attr("name","pred_count").attr("min",1).attr("max",1e3).attr("value",100)):t.append("input").attr("type","hidden").attr("name","pred_count").property("value",0),()=>{n.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.ternimate=dispMLP(t.setting.ml.configElement,t)}