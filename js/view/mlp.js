var P=Object.defineProperty;var d=(t,e)=>P(t,"name",{value:e,configurable:!0});import _ from"../../lib/util/matrix.js";import I from"../controller.js";import{BaseWorker as L}from"../utils.js";class T extends L{static{d(this,"MLPWorker")}constructor(){super("js/view/worker/mlp_worker.js",{type:"module"})}initialize(e,s,n,l){return this._postMessage({mode:"init",type:e,hidden_sizes:s,activation:n,optimizer:l})}fit(e,s,n,l,m){return this._postMessage({mode:"fit",x:e,y:s,iteration:n,rate:l,batch:m})}predict(e){return this._postMessage({mode:"predict",x:e})}}export default function F(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new I(t),s=t.task,n=new T;let l=0;const m=d(async a=>{const r=x();let o=t.trainInput,p=t.trainOutput;const u=_.fromArray(o);if(s==="TP"){p=o.slice(r),o=[];for(let i=0;i<u.rows-r;i++)o.push(u.slice(i,i+r).value)}s==="CF"&&(p=p.map(i=>i[0]));const g=await n.fit(o,p,+z.value,C.value,M.value);if(l=g.data.epoch,t.plotLoss(g.data.loss),s==="TP"){let i=u.slice(u.rows-r).value;const c=[];for(;;){if(c.length>=v.value){t.trainResult=c,a&&a();return}const w=await n.predict([i]);c.push(w.data[0]),i=i.slice(u.cols),i.push(...w.data[0])}}else{const c=(await n.predict(t.testInput(r===1?2:4))).data;t.testResult(c),a&&a()}},"fitModel"),x=d(()=>s==="TP"?h.value:t.datas.dimension||2,"getInputDim");let h=null;s==="TP"&&(h=e.input.number({label:"window width",min:1,max:1e3,value:20}));const b=e.array({label:" Hidden Layers ",type:"number",values:[10],default:10,min:1,max:100}),y=e.select({label:" Activation ",values:["sigmoid","tanh","relu","elu","leaky_relu","rrelu","prelu","gaussian","softplus","softsign","identity"]}),f=e.select({label:" Optimizer ",values:["sgd","adam","momentum","rmsprop"]}),k=e.stepLoopButtons().init(a=>{if(t.datas.length===0){a();return}n.initialize(s==="CF"?"classifier":"regressor",b.value,y.value,f.value).then(a),t.init()}),z=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),C=e.input.number({label:" Learning rate ",min:0,max:100,step:.01,value:.001}),M=e.input.number({label:" Batch size ",min:1,max:100,value:10});k.step(m).epoch(()=>l);let v;s==="TP"?v=e.input.number({label:" predict count",min:1,max:1e3,value:100}):v=e.input({type:"hidden",value:0}),t.setting.ternimate=()=>{n.terminate()}}d(F,"default");
