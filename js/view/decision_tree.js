import Matrix from"../../lib/util/matrix.js";import{DecisionTreeClassifier,DecisionTreeRegression}from"../../lib/model/decision_tree.js";import Controller from"../controller.js";import{getCategoryColor}from"../utils.js";class DecisionTreePlotter{constructor(t){this._platform=t,this._mode=t.task,this._svg=t.svg,this._r=null,this._lineEdge=[]}remove(){this._svg.querySelector(".separation")?.remove()}plot(t){if(this._svg.querySelector(".separation")?.remove(),0!==this._platform.datas.length&&(this._r=document.createElementNS("http://www.w3.org/2000/svg","g"),this._r.classList.add("separation"),1===this._platform.datas.dimension?this._svg.append(this._r):(this._svg.insertBefore(this._r,this._svg.firstChild),this._r.setAttribute("opacity",.5)),this._lineEdge=[],this._dispRange(t._tree),1===this._platform.datas.dimension)){const t=t=>{let e="";for(let i=0;i<t.length;i++)e+=`${0===i?"M":"L"}${t[i][0]},${t[i][1]}`;return e},e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("stroke","red"),e.setAttribute("fill-opacity",0),e.setAttribute("d",t(this._lineEdge)),this._r.append(e)}}_dispRange(t,e){if(e=e||this._platform.datas.domain,0===t.children.length){let i=0,r=0;if("CF"===this._mode?t.value.forEach(((t,e)=>{t>r&&(r=t,i=e)})):i=t.value,1===this._platform.datas.dimension){const t=this._platform._renderer[0].toPoint([e[0][0],i]),r=this._platform._renderer[0].toPoint([e[0][1],i]);this._lineEdge.push(t),this._lineEdge.push(r)}else{const t=this._platform._renderer[0].toPoint([e[0][0],e[1][0]]),r=this._platform._renderer[0].toPoint([e[0][1],e[1][1]]),s=document.createElementNS("http://www.w3.org/2000/svg","rect");s.setAttribute("x",t[0]),s.setAttribute("y",t[1]),s.setAttribute("width",r[0]-t[0]),s.setAttribute("height",r[1]-t[1]),s.setAttribute("fill",getCategoryColor(i)),this._r.append(s)}}else t.children.forEach(((i,r)=>{let s=[[].concat(e[0]),[].concat(e[1])],o=0===r?1:0;s[t.feature][o]=t.threshold,this._dispRange(i,s)}))}}export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Separate".',t.setting.ml.reference={title:"Decision tree (Wikipedia)",url:"https://en.wikipedia.org/wiki/Decision_tree"};const e=new Controller(t),i=t.task,r=new DecisionTreePlotter(t);let s=null;const o=function(){if("FS"===t.task){const e=s.importance().map(((t,e)=>[t,e]));e.sort(((t,e)=>e[0]-t[0]));const i=t.dimension,r=e.map((t=>t[1])).slice(0,i),o=Matrix.fromArray(t.trainInput);t.trainResult=o.col(r).toArray()}else if(t.datas.dimension<=2)r.plot(s);else{let e=s.predict(t.testInput(2));t.testResult(e)}t.evaluate(((t,e)=>{e(s.predict(t))}))},n="CF"===i?["CART","ID3"]:["CART"],a=e.select(n);e.input.button("Initialize").on("click",(()=>{s="CF"===i?new DecisionTreeClassifier(a.value):new DecisionTreeRegression,s.init(t.trainInput,t.trainOutput.map((t=>t[0]))),o(),l.value=s.depth})),e.input.button("Separate").on("click",(()=>{s&&(s.fit(),o(),l.value=s.depth)}));const l=e.text("0");e.text(" depth "),t.setting.terminate=()=>{r.remove()}}