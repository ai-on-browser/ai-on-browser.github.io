import KernelDensityEstimator from"../../lib/model/kernel_density_estimator.js";var dispKernelDensityEstimator=function(t,e){const a=a=>{const p=t.select("[name=kernel]").property("value"),i=n.property("checked"),o=r.property("value"),s=new KernelDensityEstimator(p);e.fit(((a,n,p)=>{s.fit(a,i?0:o),r.property("value",s._h),e.predict(((n,r)=>{const i=s.predict(n);if("DE"===e.task){const t=Math.min(...i),e=Math.max(...i);r(i.map((a=>specialCategory.density((a-t)/(e-t)))))}else{const e=+t.select("[name=threshold]").property("value"),n=s.predict(a);p(n.map((t=>t<e))),r(i.map((t=>t<e)))}}),8)}))};t.append("select").attr("name","kernel").selectAll("option").data(["gaussian","rectangular","triangular","epanechnikov","biweight","triweight"]).enter().append("option").attr("value",(t=>t)).text((t=>t)),t.append("span").text("auto");const n=t.append("input").attr("type","checkbox").attr("name","auto").property("checked",!0).on("change",(()=>{r.property("disabled",n.property("checked"))})),r=t.append("input").attr("type","number").attr("name","h").attr("min",0).attr("value",.1).attr("step",.01).property("disabled",!0);"AD"===e.task&&(t.append("span").text(" threshold = "),t.append("input").attr("type","number").attr("name","threshold").attr("value",.3).attr("min",0).attr("max",10).attr("step",.01).on("change",a)),t.append("input").attr("type","button").attr("value","Fit").on("click",(()=>a()))};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Fit" button.',dispKernelDensityEstimator(t.setting.ml.configElement,t)}