import NeuralNetworkBuilder from"../neuralnetwork_builder.js";import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class VAEWorker extends BaseWorker{constructor(){super("js/view/worker/vae_worker.js",{type:"module"})}initialize(t,e,i,n,a,r,s,l){this._postMessage({mode:"init",in_size:t,noise_dim:e,enc_layers:i,dec_layers:n,optimizer:a,class_size:r,type:s},l),this._type=s}fit(t,e,i,n,a,r){this._postMessage({mode:"fit",x:t,y:e,iteration:i,rate:n,batch:a},r)}predict(t,e,i){this._postMessage({mode:"predict",x:t,y:e},i)}reduce(t,e,i){this._postMessage({mode:"reduce",x:t,y:e},i)}}export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new Controller(t),i=t.task,n=new VAEWorker;let a=0;const r=()=>{n.predict(t.trainInput,t.trainOutput,(e=>{const i=e.data;"conditional"===s.value?t.trainResult=[i,t.trainOutput]:t.trainResult=i}))},s=e.select(["default","conditional"]);let l=null;"DR"!==i&&(l=e.input.number({label:"Noise dim",min:1,max:100,value:5}));const o=new NeuralNetworkBuilder;o.makeHtml(t.setting.ml.configElement,{optimizer:!0});const u=e.stepLoopButtons().init((()=>{if(0===t.datas.length)return;const e=new Set(t.trainOutput.map((t=>t[0]))).size;n.initialize(t.datas.dimension,l?.value??t.dimension,o.layers,o.invlayers,o.optimizer,e,s.value),t.init()})),p=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),c=e.input.number({label:"Learning rate ",min:0,max:100,step:.01,value:.001}),d=e.input.number({label:" Batch size ",min:1,max:100,value:10});u.step((e=>{0!==t.datas.length?n.fit(t.trainInput,t.trainOutput,+p.value,c.value,d.value,(r=>{a=r.data.epoch,t.plotLoss(r.data.loss),"DR"===i?n.reduce(t.trainInput,t.trainOutput,(i=>{const n=i.data.mean;t.trainResult=n,e&&e()})):"GR"===i&&n.predict(t.trainInput,t.trainOutput,(i=>{const a=i.data;"conditional"===n._type?t.trainResult=[a,t.trainOutput]:t.trainResult=a,e&&e()}))})):e&&e()})).epoch((()=>a)),"GR"===i&&e.input.button("Generate").on("click",r),t.setting.terminate=()=>{n.terminate()}}