import NeuralNetworkBuilder from"../neuralnetwork_builder.js";import Controller from"../controller.js";import{BaseWorker}from"../utils.js";class VAEWorker extends BaseWorker{constructor(){super("js/view/worker/vae_worker.js",{type:"module"})}initialize(t,e,i,a,n,r,s){this._postMessage({mode:"init",in_size:t,noise_dim:e,enc_layers:i,dec_layers:a,optimizer:n,class_size:r,type:s}),this._type=s}fit(t,e,i,a,n){return this._postMessage({mode:"fit",x:t,y:e,iteration:i,rate:a,batch:n})}predict(t,e){return this._postMessage({mode:"predict",x:t,y:e})}reduce(t,e){return this._postMessage({mode:"reduce",x:t,y:e})}}export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new Controller(t),i=t.task,a=new VAEWorker;let n=0;const r=async()=>{const e=(await a.predict(t.trainInput,t.trainOutput)).data;"conditional"===s.value?t.trainResult=[e,t.trainOutput]:t.trainResult=e},s=e.select(["default","conditional"]);let l=null;"DR"!==i&&(l=e.input.number({label:"Noise dim",min:1,max:100,value:5}));const o=new NeuralNetworkBuilder;o.makeHtml(t.setting.ml.configElement,{optimizer:!0});const u=e.stepLoopButtons().init((()=>{if(0===t.datas.length)return;const e=new Set(t.trainOutput.map((t=>t[0]))).size;a.initialize(t.datas.dimension,l?.value??t.dimension,o.layers,o.invlayers,o.optimizer,e,s.value),t.init()})),p=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),c=e.input.number({label:"Learning rate ",min:0,max:100,step:.01,value:.001}),d=e.input.number({label:" Batch size ",min:1,max:100,value:10});u.step((async e=>{if(0===t.datas.length)return void(e&&e());const r=await a.fit(t.trainInput,t.trainOutput,+p.value,c.value,d.value);if(n=r.data.epoch,t.plotLoss(r.data.loss),"DR"===i){const e=(await a.reduce(t.trainInput,t.trainOutput)).data.mean;t.trainResult=e}else if("GR"===i){const e=(await a.predict(t.trainInput,t.trainOutput)).data;"conditional"===a._type?t.trainResult=[e,t.trainOutput]:t.trainResult=e}e&&e()})).epoch((()=>n)),"GR"===i&&e.input.button("Generate").on("click",r),t.setting.terminate=()=>{a.terminate()}}