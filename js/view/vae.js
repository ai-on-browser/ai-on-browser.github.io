class VAEWorker extends BaseWorker{constructor(){super("js/view/worker/vae_worker.js",{type:"module"})}initialize(t,e,a,n,i,r,p,o){this._postMessage({mode:"init",in_size:t,noise_dim:e,enc_layers:a,dec_layers:n,optimizer:i,class_size:r,type:p},o),this._type=p}fit(t,e,a,n,i,r){this._postMessage({mode:"fit",x:t,y:e,iteration:a,rate:n,batch:i},r)}predict(t,e,a,n){this._postMessage({mode:"predict",x:t,y:e,out:a},n)}}var dispVAE=function(t,e){const a=e.task,n=new VAEWorker;let i=0;const r=a=>{e.fit(((e,i,r)=>{n.predict(e,i,null,(e=>{const n=e.data;"conditional"===t.select("[name=type]").property("value")?r(n,i):r(n),a&&a()}))}))};t.append("select").attr("name","type").selectAll("option").data(["default","conditional"]).enter().append("option").property("value",(t=>t)).text((t=>t)),"DR"!==a&&(t.append("span").text("Noise dim"),t.append("input").attr("type","number").attr("name","noise_dim").attr("min",1).attr("max",100).attr("value",5));const p=new NeuralNetworkBuilder;p.makeHtml(t,{optimizer:!0});const o=e.setting.ml.controller.stepLoopButtons().init((()=>{if(0===e.datas.length)return;const a=e.dimension||+t.select("[name=noise_dim]").property("value"),i=t.select("[name=type]").property("value"),r=e.datas.categories.length;n.initialize(e.datas.dimension,a,p.layers,p.invlayers,p.optimizer,r,i),e.init()}));return t.append("span").text(" Iteration "),t.append("select").attr("name","iteration").selectAll("option").data([1,10,100,1e3,1e4]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("span").text("Learning rate "),t.append("input").attr("type","number").attr("name","rate").attr("min",0).attr("max",100).attr("step",.01).attr("value",.001),t.append("span").text(" Batch size "),t.append("input").attr("type","number").attr("name","batch").attr("value",10).attr("min",1).attr("max",100).attr("step",1),o.step((r=>{if(0===e.datas.length)return void(r&&r());const p=+t.select("[name=iteration]").property("value"),o=+t.select("[name=rate]").property("value"),s=+t.select("[name=batch]").property("value");e.fit(((t,e,l)=>{n.fit(t,e,p,o,s,(p=>{i=p.data.epoch,"DR"===a?n.predict(t,e,["mean"],(t=>{const e=t.data.mean;l(e),r&&r()})):"GR"===a&&n.predict(t,e,null,(t=>{const a=t.data;"conditional"===n._type?l(a,e):l(a),r&&r()}))}))}))})).epoch((()=>i)),"GR"===a&&t.append("input").attr("type","button").attr("value","Generate").on("click",r),()=>{n.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.',t.setting.terminate=dispVAE(t.setting.ml.configElement,t)}