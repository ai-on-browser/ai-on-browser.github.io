var b=Object.defineProperty;var c=(e,t)=>b(e,"name",{value:t,configurable:!0});import k from"../neuralnetwork_builder.js";import y from"../controller.js";import{BaseWorker as R}from"../utils.js";class _ extends R{static{c(this,"VAEWorker")}constructor(){super("js/view/worker/model_worker.js",{type:"module"})}initialize(t,i,n,s,u,r,o){return this._type=o,this._postMessage({name:"vae",method:"constructor",arguments:[t,i,n,s,u,r,o]})}epoch(){return this._postMessage({name:"vae",method:"epoch"}).then(t=>t.data)}fit(t,i,n,s,u){return this._postMessage({name:"vae",method:"fit",arguments:[t,i,n,s,u]}).then(r=>r.data)}predict(t,i){return this._postMessage({name:"vae",method:"predict",arguments:[t,i]}).then(n=>n.data)}reduce(t,i){return this._postMessage({name:"vae",method:"reduce",arguments:[t,i]}).then(n=>n.data)}}export default function z(e){e.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const t=new y(e),i=e.task,n=new _;let s=0;const u=c(async()=>{if(e.datas.length===0)return;const a=await n.fit(e.trainInput,e.trainOutput,+m.value,v.value,g.value);if(s=await n.epoch(),e.plotLoss(a),i==="DR")e.trainResult=await n.reduce(e.trainInput,e.trainOutput);else if(i==="GR"){const d=await n.predict(e.trainInput,e.trainOutput);n._type==="conditional"?e.trainResult=[d,e.trainOutput]:e.trainResult=d}},"fitModel"),r=c(async()=>{const a=await n.predict(e.trainInput,e.trainOutput);o.value==="conditional"?e.trainResult=[a,e.trainOutput]:e.trainResult=a},"genValues"),o=t.select(["default","conditional"]);let h=null;i!=="DR"&&(h=t.input.number({label:"Noise dim",min:1,max:100,value:5}));const l=new k;l.makeHtml(t,{optimizer:!0});const p=t.stepLoopButtons().init(a=>{if(e.datas.length===0){a();return}const d=new Set(e.trainOutput.map(w=>w[0])).size;n.initialize(e.datas.dimension,h?.value??e.dimension,l.layers,l.invlayers,l.optimizer,d,o.value).then(a),e.init()}),m=t.select({label:" Iteration ",values:[1,10,100,1e3,1e4]}),v=t.input.number({label:"Learning rate ",min:0,max:100,step:.01,value:.001}),g=t.input.number({label:" Batch size ",min:1,max:100,value:10});return p.step(u).epoch(()=>s),i==="GR"&&t.input.button("Generate").on("click",r),()=>{n.terminate()}}c(z,"default");
