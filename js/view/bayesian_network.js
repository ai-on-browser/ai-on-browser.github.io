var b=Object.defineProperty;var s=(n,a)=>b(n,"name",{value:a,configurable:!0});import v from"../../lib/util/matrix.js";import w from"../../lib/model/bayesian_network.js";var C=s(function(n,a){const k=s(()=>{let i=a.trainInput,m=a.trainOutput;const d=+n.select("[name=discrete]").property("value"),f=v.fromArray(i),x=f.max(),r=f.min();i=i.map(t=>t.map(e=>Math.floor((e-r)/(x-r)*d))),i=i.map((t,e)=>[...t,...m[e]]);const g=new w(1);g.fit(i);const c=[...new Set(m.map(t=>t[0]))];let o=a.testInput(3);o=o.map(t=>t.map(e=>Math.floor((e-r)/(x-r)*d)));const h=[];for(let t=0;t<o.length;t++)for(let e=0;e<c.length;e++)h.push([...o[t],c[e]]);const p=g.probability(h),l=[];for(let t=0,e=0;t<p.length;e++){let y=0;l[e]=-1;for(let u=0;u<c.length;u++,t++)p[t]>y&&(y=p[t],l[e]=c[u])}a.testResult(l)},"calc");n.append("span").text(" discrete = "),n.append("input").attr("type","number").attr("name","discrete").attr("value",10).attr("min",2).attr("max",100),n.append("input").attr("type","button").attr("value","Calculate").on("click",k)},"dispQuadraticDiscriminant");export default function M(n){n.setting.ml.usage='Click and add data point. Then, click "Calculate".',C(n.setting.ml.configElement,n)}s(M,"default");
