import VBGMM from"../../lib/model/vbgmm.js";import Controller from"../controller.js";import{getCategoryColor}from"../utils.js";class VBGMMPlotter{constructor(t,e){this._r=document.createElementNS("http://www.w3.org/2000/svg","g"),t.append(this._r),this._model=e,this._size=e._k,this._circle=[],this._rm=[],this._duration=200,this._scale=1e3;for(let t=0;t<this._size;t++)this.add(t+1)}terminate(){this._r.remove()}add(t){const e=document.createElementNS("http://www.w3.org/2000/svg","ellipse");e.setAttribute("cx",0),e.setAttribute("cy",0),e.setAttribute("stroke",getCategoryColor(t)),e.setAttribute("stroke-width",2),e.setAttribute("fill-opacity",0),e.style.transitionDuration=this._duration+"ms",this._r.append(e),this._set_el_attr(e,this._size-1),this._circle.push(e),this._rm.push(!1)}_set_el_attr(t,e){let i=this._model.means.row(e).value,s=this._model.covs[e].value;const r=(s[0]+s[3]+Math.sqrt((s[0]-s[3])**2+4*s[1]**2))/2,l=(s[0]+s[3]-Math.sqrt((s[0]-s[3])**2+4*s[1]**2))/2;let a=360*Math.atan((r-s[0])/s[1])/(2*Math.PI);isNaN(a)&&(a=0),t.setAttribute("rx",2.146*Math.sqrt(r)*this._scale),t.setAttribute("ry",2.146*Math.sqrt(l)*this._scale),t.setAttribute("transform","translate("+i[0]*this._scale+","+i[1]*this._scale+") rotate("+a+")")}move(){for(let t=0;t<this._circle.length;t++)this._model.effectivity[t]||(this._rm[t]||this._circle[t].remove(),this._rm[t]=!0);this._circle.forEach(((t,e)=>{this._rm[e]||this._set_el_attr(t,e)}))}}export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Fit" button.';const e=new Controller(t);let i=null,s=null;const r=e.input.number({label:" alpha ",min:0,max:10,value:.001}),l=e.input.number({label:" beta ",min:0,max:10,value:.001}),a=e.input.number({label:" k ",min:1,max:1e3,value:10});e.stepLoopButtons().init((()=>{i=null,s?.terminate(),s=null,o.value="0",t.init()})).step((e=>{i||(i=new VBGMM(r.value,l.value,a.value),i.init(t.trainInput)),i.fit();const n=i.predict(t.trainInput);t.trainResult=n.map((t=>t+1)),o.value=i.effectivity.reduce(((t,e)=>t+(e?1:0)),0),s||(s=new VBGMMPlotter(t.svg,i)),s.move();const m=i.effectivity,u=i.means.toArray().map(((t,e)=>[t,e])).filter(((t,e)=>m[e]));t.centroids(u.map((t=>t[0])),u.map((t=>t[1]+1)),{duration:200}),setTimeout((()=>{e&&e()}),200)})).epoch();const o=e.text({label:" Clusters: "});t.setting.terminate=()=>{s?.terminate()}}