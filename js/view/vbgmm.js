import VBGMM from"../../lib/model/vbgmm.js";import Controller from"../controller.js";class VBGMMPlotter{constructor(t,e){this._r=t.append("g").attr("class","centroids2"),this._model=e,this._size=e._k,this._circle=[],this._rm=[],this._duration=200,this._scale=1e3;for(let t=0;t<this._size;t++)this.add(t+1)}terminate(){this._r.remove()}add(t){let e=this._r.append("ellipse").attr("cx",0).attr("cy",0).attr("stroke",getCategoryColor(t)).attr("stroke-width",2).attr("fill-opacity",0);this._set_el_attr(e,this._size-1),this._circle.push(e),this._rm.push(!1)}_set_el_attr(t,e){let a=this._model.means.row(e).value,r=this._model.covs[e].value;const s=(r[0]+r[3]+Math.sqrt((r[0]-r[3])**2+4*r[1]**2))/2,i=(r[0]+r[3]-Math.sqrt((r[0]-r[3])**2+4*r[1]**2))/2;let n=360*Math.atan((s-r[0])/r[1])/(2*Math.PI);isNaN(n)&&(n=0),t.attr("rx",2.146*Math.sqrt(s)*this._scale).attr("ry",2.146*Math.sqrt(i)*this._scale).attr("transform","translate("+a[0]*this._scale+","+a[1]*this._scale+") rotate("+n+")")}move(){for(let t=0;t<this._circle.length;t++)this._model.effectivity[t]||(this._rm[t]||this._circle[t].remove(),this._rm[t]=!0);this._circle.forEach(((t,e)=>{this._rm[e]||this._set_el_attr(t.transition().duration(this._duration),e)}))}}var dispVBGMM=function(t,e){const a=new Controller(e);let r=null,s=null;return t.append("span").text(" alpha "),t.append("input").attr("type","number").attr("name","alpha").attr("min",0).attr("max",10).attr("value",.001),t.append("span").text(" beta "),t.append("input").attr("type","number").attr("name","beta").attr("min",0).attr("max",10).attr("value",.001),t.append("span").text(" k "),t.append("input").attr("type","number").attr("name","k").attr("min",1).attr("max",1e3).attr("value",10),a.stepLoopButtons().init((()=>{r=null,s?.terminate(),s=null,t.select("[name=clusters]").text(0),e.init()})).step((a=>{if(!r){const a=+t.select("[name=k]").property("value"),s=+t.select("[name=alpha]").property("value"),i=+t.select("[name=beta]").property("value");r=new VBGMM(s,i,a),r.init(e.trainInput)}r.fit();const i=r.predict(e.trainInput);e.trainResult=i.map((t=>t+1)),t.select("[name=clusters]").text(r.effectivity.reduce(((t,e)=>t+(e?1:0)),0)),s||(s=new VBGMMPlotter(e.svg,r)),s.move();const n=r.effectivity,l=r.means.toArray().map(((t,e)=>[t,e])).filter(((t,e)=>n[e]));e.centroids(l.map((t=>t[0])),l.map((t=>t[1]+1)),{duration:200}),setTimeout((()=>{a&&a()}),200)})).epoch(),t.append("span").text(" Clusters: "),t.append("span").attr("name","clusters"),()=>{s?.terminate()}};export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Fit" button.',t.setting.terminate=dispVBGMM(t.setting.ml.configElement,t)}