import Matrix from"../../lib/util/matrix.js";import{GMM,SemiSupervisedGMM,GMR}from"../../lib/model/gmm.js";import Controller from"../controller.js";import{specialCategory,getCategoryColor}from"../utils.js";class GMMPlotter{constructor(t,e,i=!1){this._r=t.append("g").attr("class","centroids2"),this._model=e,this._size=0,this._circle=[],this._grayscale=i,this._duration=200}terminate(){this._r.remove()}_set_el_attr(t,e){if(!this._model._m[e])return;const i=this._model._m[e].value,r=this._model._s[e].value,a=(r[0]+r[3]+Math.sqrt((r[0]-r[3])**2+4*r[1]**2))/2,s=(r[0]+r[3]-Math.sqrt((r[0]-r[3])**2+4*r[1]**2))/2;let n=360*Math.atan((a-r[0])/r[1])/(2*Math.PI);isNaN(n)&&(n=0),t.attr("rx",2.146*Math.sqrt(a)*1e3).attr("ry",2.146*Math.sqrt(s)*1e3).attr("transform","translate("+1e3*i[0]+","+1e3*i[1]+") rotate("+n+")")}add(t){this._size++;const e=this._r.append("ellipse").attr("cx",0).attr("cy",0).attr("stroke",this._grayscale?"gray":getCategoryColor(t||this._size)).attr("stroke-width",2).attr("fill-opacity",0);this._set_el_attr(e,this._size-1),this._circle.push(e)}clear(){this._circle.forEach((t=>t.remove())),this._circle=[],this._size=0}move(){this._circle.forEach(((t,e)=>{this._set_el_attr(t.transition().duration(this._duration),e)}))}}export default function(t){t.setting.ml.usage='Click and add data point. Finally, click "Step" button repeatedly.';const e=t.svg,i=t.task,r=new Controller(t),a="CT"!==i&&"SC"!==i&&"RG"!==i;let s=new GMM;"SC"===i?s=new SemiSupervisedGMM:"RG"===i&&(s=new GMR);const n=new GMMPlotter(e,s,a),l=(e,r)=>{if("AD"===i){e&&s.fit(t.trainInput);const i=s.probability(t.trainInput).map((t=>1-t.reduce(((t,e)=>t*Math.exp(-e)),1)<p.value));t.trainResult=i;const r=s.probability(t.testInput(3)).map((t=>1-t.reduce(((t,e)=>t*Math.exp(-e)),1)<p.value));t.testResult(r)}else if("DE"===i){e&&s.fit(t.trainInput);const i=s.probability(t.testInput(8)).map((t=>Math.max(...t))),r=Math.min(...i),a=Math.max(...i);t.testResult(i.map((t=>specialCategory.density((t-r)/(a-r)))))}else if("SC"===i){e&&s.fit(t.trainInput,t.trainOutput.map((t=>t[0]))),t.trainResult=s.predict(t.trainInput);const i=s.predict(t.testInput(4));t.testResult(i)}else if("GR"===i){const i=t.trainInput;e&&s.fit(i);const r=[];if(s._k>0)for(let t=0;t<i.length;t++){let t=Math.random(),e=0;for(;e<s._p.length&&!((t-=s._p[e])<=0);e++);r.push(Matrix.randn(1,i[0].length,s._m[e],s._s[e]).value)}t.trainResult=r}else if("RG"===i){if(e){s.fit(t.trainInput,t.trainOutput);const e=s.predict(t.testInput(4));t.testResult(e)}}else e&&s.fit(t.trainInput),t.trainResult=s.predict(t.trainInput).map((t=>t+1));"RG"===i||(n.move(),t.centroids(s._m.map((t=>t.value)),a?0:"SC"===i?s.categories:s._m.map(((t,e)=>e+1)),{duration:200})),u.value=s._k+" clusters"},o=r.stepLoopButtons();"SC"===i?o.init((()=>{s.clear(),s.init(t.trainInput,t.trainOutput.map((t=>t[0])));for(let t=0;t<s._k;t++)n.add(s.categories[t]);l(!1)})):r.input.button("Add cluster").on("click",(()=>{s.add(),n.add(),l(!1)}));const u=r.text("0 clusters");let p=null;"AD"===i&&(p=r.input.number({label:" threshold = ",min:0,max:1,step:.1,value:.5}).on("change",(()=>l(!1)))),o.step((t=>{l(!0),setTimeout((()=>t&&t()),200)})),"SC"!==i&&r.input.button("Clear").on("click",(()=>{s&&s.clear(),n.clear(),u.value="0 clusters",t.init()})),t.setting.terminate=()=>{n.terminate()}}