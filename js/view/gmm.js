var g=Object.defineProperty;var M=(t,r)=>g(t,"name",{value:r,configurable:!0});import v from"../../lib/util/matrix.js";import{GMM as b,SemiSupervisedGMM as y,GMR as k}from"../../lib/model/gmm.js";import w from"../controller.js";import{specialCategory as x,getCategoryColor as A}from"../utils.js";class C{static{M(this,"GMMPlotter")}constructor(r,s,l,n=!1){this._platform=r,this._r=document.createElementNS("http://www.w3.org/2000/svg","g"),s.append(this._r),this._model=l,this._size=0,this._circle=[],this._grayscale=n,this._duration=200,this._scale=r._renderer[0].scale?.[0]??0}terminate(){this._r.remove()}_set_el_attr(r,s){if(!this._model._m[s])return;const l=this._platform.invertScale(this._model._m[s].value),n=this._model._s[s].value,e=(n[0]+n[3]+Math.sqrt((n[0]-n[3])**2+4*n[1]**2))/2,p=(n[0]+n[3]-Math.sqrt((n[0]-n[3])**2+4*n[1]**2))/2,m=2.146;let u=Math.atan((e-n[0])/n[1]);isNaN(u)&&(u=0);const h=this._platform.invertScale([Array(this._platform.datas.dimension).fill(1),Array(this._platform.datas.dimension).fill(2)]);r.setAttribute("rx",m*Math.sqrt(e)*this._scale),r.setAttribute("ry",m*Math.sqrt(p)*this._scale),r.setAttribute("vector-effect","non-scaling-stroke");const f=h[1][this._platform._renderer[0]._select[0]]-h[0][this._platform._renderer[0]._select[0]],a=h[1][this._platform._renderer[0]._select[1]]-h[0][this._platform._renderer[0]._select[1]];r.setAttribute("transform",`matrix(${Math.cos(u)*f} ${Math.sin(u)*a} ${-Math.sin(u)*f} ${Math.cos(u)*a} ${l[0]*this._scale} ${l[1]*this._scale})`)}add(r){this._size++;const s=document.createElementNS("http://www.w3.org/2000/svg","ellipse");s.setAttribute("cx",0),s.setAttribute("cy",0),s.setAttribute("stroke",this._grayscale?"gray":A(r||this._size)),s.setAttribute("stroke-width",2),s.setAttribute("fill-opacity",0),s.style.transitionDuration=this._duration+"ms",this._r.append(s),this._set_el_attr(s,this._size-1),this._circle.push(s)}clear(){this._circle.forEach(r=>r.remove()),this._circle=[],this._size=0}move(){this._circle.forEach((r,s)=>{this._set_el_attr(r,s)})}}export default function I(t){t.setting.ml.usage='Click and add data point. Finally, click "Step" button repeatedly.',t.setting.ml.reference={title:"Mixture model (Wikipedia)",url:"https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model"};const r=t.svg,s=t.task,l=new w(t),n=s!=="CT"&&s!=="SC"&&s!=="RG";let e=new b;s==="SC"?e=new y:s==="RG"&&(e=new k);const p=new C(t,r,e,n),m=M(a=>{if(s==="AD"){a&&e.fit(t.trainInput);const i=e.probability(t.trainInput).map(d=>1-d.reduce((o,_)=>o*Math.exp(-_),1)<f.value);t.trainResult=i;const c=e.probability(t.testInput(3)).map(d=>1-d.reduce((o,_)=>o*Math.exp(-_),1)<f.value);t.testResult(c)}else if(s==="DE"){a&&e.fit(t.trainInput);const i=e.probability(t.testInput(8)).map(o=>Math.max(...o)),c=Math.min(...i),d=Math.max(...i);t.testResult(i.map(o=>x.density((o-c)/(d-c))))}else if(s==="SC"){a&&e.fit(t.trainInput,t.trainOutput.map(c=>c[0])),t.trainResult=e.predict(t.trainInput);const i=e.predict(t.testInput(4));t.testResult(i)}else if(s==="GR"){const i=t.trainInput;a&&e.fit(i);const c=[];if(e._k>0)for(let d=0;d<i.length;d++){let o=Math.random(),_=0;for(;_<e._p.length&&!((o-=e._p[_])<=0);_++);c.push(v.randn(1,i[0].length,e._m[_],e._s[_]).value)}t.trainResult=c}else if(s==="RG"){if(a){e.fit(t.trainInput,t.trainOutput);const i=e.predict(t.testInput(4));t.testResult(i)}}else a&&e.fit(t.trainInput),t.trainResult=e.predict(t.trainInput).map(i=>i+1);s==="RG"||(p.move(),t.centroids(e._m.map(i=>i.value),n?0:s==="SC"?e.categories:e._m.map((i,c)=>c+1),{duration:200})),h.value=e._k+" clusters"},"fitModel"),u=l.stepLoopButtons();s==="SC"?u.init(()=>{e.clear(),e.init(t.trainInput,t.trainOutput.map(a=>a[0]));for(let a=0;a<e._k;a++)p.add(e.categories[a]);m(!1)}):l.input.button("Add cluster").on("click",()=>{e.add(),p.add(),m(!1)});const h=l.text("0 clusters");let f=null;return s==="AD"&&(f=l.input.number({label:" threshold = ",min:0,max:1,step:.1,value:.5}).on("change",()=>m(!1))),u.step(async()=>{m(!0),await new Promise(a=>setTimeout(a,200))}),s!=="SC"&&l.input.button("Clear").on("click",()=>{e&&e.clear(),p.clear(),h.value="0 clusters",t.init()}),()=>{p.terminate()}}M(I,"default");
