import Matrix from"../../lib/util/matrix.js";import{GMM,SemiSupervisedGMM,GMR}from"../../lib/model/gmm.js";import Controller from"../controller.js";import{specialCategory,getCategoryColor}from"../utils.js";class GMMPlotter{constructor(t,e,i=!1){this._r=document.createElementNS("http://www.w3.org/2000/svg","g"),t.append(this._r),this._model=e,this._size=0,this._circle=[],this._grayscale=i,this._duration=200}terminate(){this._r.remove()}_set_el_attr(t,e){if(!this._model._m[e])return;const i=this._model._m[e].value,r=this._model._s[e].value,s=(r[0]+r[3]+Math.sqrt((r[0]-r[3])**2+4*r[1]**2))/2,a=(r[0]+r[3]-Math.sqrt((r[0]-r[3])**2+4*r[1]**2))/2;let n=360*Math.atan((s-r[0])/r[1])/(2*Math.PI);isNaN(n)&&(n=0),t.setAttribute("rx",2.146*Math.sqrt(s)*1e3),t.setAttribute("ry",2.146*Math.sqrt(a)*1e3),t.setAttribute("transform","translate("+1e3*i[0]+","+1e3*i[1]+") rotate("+n+")")}add(t){this._size++;const e=document.createElementNS("http://www.w3.org/2000/svg","ellipse");e.setAttribute("cx",0),e.setAttribute("cy",0),e.setAttribute("stroke",this._grayscale?"gray":getCategoryColor(t||this._size)),e.setAttribute("stroke-width",2),e.setAttribute("fill-opacity",0),e.style.transitionDuration=this._duration+"ms",this._r.append(e),this._set_el_attr(e,this._size-1),this._circle.push(e)}clear(){this._circle.forEach((t=>t.remove())),this._circle=[],this._size=0}move(){this._circle.forEach(((t,e)=>{this._set_el_attr(t,e)}))}}export default function(t){t.setting.ml.usage='Click and add data point. Finally, click "Step" button repeatedly.',t.setting.ml.reference={title:"Mixture model (Wikipedia)",url:"https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model"};const e=t.svg,i=t.task,r=new Controller(t),s="CT"!==i&&"SC"!==i&&"RG"!==i;let a=new GMM;"SC"===i?a=new SemiSupervisedGMM:"RG"===i&&(a=new GMR);const n=new GMMPlotter(e,a,s),l=(e,r)=>{if("AD"===i){e&&a.fit(t.trainInput);const i=a.probability(t.trainInput).map((t=>1-t.reduce(((t,e)=>t*Math.exp(-e)),1)<p.value));t.trainResult=i;const r=a.probability(t.testInput(3)).map((t=>1-t.reduce(((t,e)=>t*Math.exp(-e)),1)<p.value));t.testResult(r)}else if("DE"===i){e&&a.fit(t.trainInput);const i=a.probability(t.testInput(8)).map((t=>Math.max(...t))),r=Math.min(...i),s=Math.max(...i);t.testResult(i.map((t=>specialCategory.density((t-r)/(s-r)))))}else if("SC"===i){e&&a.fit(t.trainInput,t.trainOutput.map((t=>t[0]))),t.trainResult=a.predict(t.trainInput);const i=a.predict(t.testInput(4));t.testResult(i)}else if("GR"===i){const i=t.trainInput;e&&a.fit(i);const r=[];if(a._k>0)for(let t=0;t<i.length;t++){let t=Math.random(),e=0;for(;e<a._p.length&&!((t-=a._p[e])<=0);e++);r.push(Matrix.randn(1,i[0].length,a._m[e],a._s[e]).value)}t.trainResult=r}else if("RG"===i){if(e){a.fit(t.trainInput,t.trainOutput);const e=a.predict(t.testInput(4));t.testResult(e)}}else e&&a.fit(t.trainInput),t.trainResult=a.predict(t.trainInput).map((t=>t+1));"RG"===i||(n.move(),t.centroids(a._m.map((t=>t.value)),s?0:"SC"===i?a.categories:a._m.map(((t,e)=>e+1)),{duration:200})),u.value=a._k+" clusters"},o=r.stepLoopButtons();"SC"===i?o.init((()=>{a.clear(),a.init(t.trainInput,t.trainOutput.map((t=>t[0])));for(let t=0;t<a._k;t++)n.add(a.categories[t]);l(!1)})):r.input.button("Add cluster").on("click",(()=>{a.add(),n.add(),l(!1)}));const u=r.text("0 clusters");let p=null;"AD"===i&&(p=r.input.number({label:" threshold = ",min:0,max:1,step:.1,value:.5}).on("change",(()=>l(!1)))),o.step((t=>{l(!0),setTimeout((()=>t&&t()),200)})),"SC"!==i&&r.input.button("Clear").on("click",(()=>{a&&a.clear(),n.clear(),u.value="0 clusters",t.init()})),t.setting.terminate=()=>{n.terminate()}}