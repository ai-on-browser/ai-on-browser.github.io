var p=Object.defineProperty;var r=(t,a)=>p(t,"name",{value:a,configurable:!0});import{ContinuousHMM as l}from"../../lib/model/hmm.js";import k from"../../lib/model/probability_based_classifier.js";import g from"../controller.js";import{specialCategory as h}from"../utils.js";export default function w(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',t.setting.ml.reference={title:"Hidden Markov model (Wikipedia)",url:"https://en.wikipedia.org/wiki/Hidden_Markov_model"};const a=new g(t);let e=null;const d=r(function(c){if(t.task==="CP"){e||(e=new l(o.value));const i=[t.trainInput];e.fit(i,!0);const n=e.bestPath(i)[0],s=[];for(let u=0;u<n.length-1;u++)s.push(n[u]!==n[u+1]);t.trainResult=s}else if(t.task==="DE"){e||(e=new l(o.value)),e.fit(t.trainInput,!0);const i=e.probability(t.testInput()),n=Math.min(...i),s=Math.max(...i);t.testResult(i.map(u=>h.density((u-n)/(s-n))))}else if(t.task==="GR"){e||(e=new l(o.value)),e.fit(t.trainInput,!0);const i=e.generate(t.trainInput.length,2);t.trainResult=i.map(n=>n.map(s=>s[0]))}else{e||(e=new k(function(){return new l(o.value)})),e.fit(t.trainInput,t.trainOutput.map(n=>n[0]));const i=e.predict(t.testInput(5));t.testResult(i.map(n=>n??-1))}c&&c()},"fitModel"),o=a.input.number({label:" state = ",min:2,max:100,value:3});a.stepLoopButtons().init(()=>{e=null,t.init()}).step(d).epoch()}r(w,"default");
