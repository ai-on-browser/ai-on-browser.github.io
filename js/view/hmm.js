import{ContinuousHMM}from"../../lib/model/hmm.js";import ProbabilityBasedClassifier from"../../lib/model/probability_based_classifier.js";import Controller from"../controller.js";import{specialCategory}from"../utils.js";export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',t.setting.ml.reference={title:"Hidden Markov model (Wikipedia)",url:"https://en.wikipedia.org/wiki/Hidden_Markov_model"};const e=new Controller(t);let i=null;const n=e.input.number({label:" state = ",min:2,max:100,value:3});e.stepLoopButtons().init((()=>{i=null,t.init()})).step((function(e){if("CP"===t.task){i||(i=new ContinuousHMM(n.value));const e=[t.trainInput];i.fit(e,!0);const a=i.bestPath(e)[0],o=[];for(let t=0;t<a.length-1;t++)o.push(a[t]!==a[t+1]);t.trainResult=o}else if("DE"===t.task){i||(i=new ContinuousHMM(n.value)),i.fit(t.trainInput,!0);const e=i.probability(t.testInput()),a=Math.min(...e),o=Math.max(...e);t.testResult(e.map((t=>specialCategory.density((t-a)/(o-a)))))}else if("GR"===t.task){i||(i=new ContinuousHMM(n.value)),i.fit(t.trainInput,!0);const e=i.generate(t.trainInput.length,2);t.trainResult=e.map((t=>t.map((t=>t[0]))))}else{i||(i=new ProbabilityBasedClassifier((function(){return new ContinuousHMM(n.value)}))),i.fit(t.trainInput,t.trainOutput.map((t=>t[0])));const e=i.predict(t.testInput(5));t.testResult(e.map((t=>t??-1)))}e&&e()})).epoch()}