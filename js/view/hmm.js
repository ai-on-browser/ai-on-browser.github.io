var d=Object.defineProperty;var c=(t,s)=>d(t,"name",{value:s,configurable:!0});import{ContinuousHMM as o}from"../../lib/model/hmm.js";import p from"../../lib/model/probability_based_classifier.js";import k from"../controller.js";export default function g(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',t.setting.ml.reference={title:"Hidden Markov model (Wikipedia)",url:"https://en.wikipedia.org/wiki/Hidden_Markov_model"};const s=new k(t);let e=null;const r=c(function(){if(t.task==="CP"){e||(e=new o(u.value));const i=[t.trainInput];e.fit(i,!0);const n=e.bestPath(i)[0],a=[];for(let l=0;l<n.length-1;l++)a.push(n[l]!==n[l+1]);t.trainResult=a}else if(t.task==="DE"){e||(e=new o(u.value)),e.fit(t.trainInput,!0);const i=e.probability(t.testInput());t.testResult(i)}else if(t.task==="GR"){e||(e=new o(u.value)),e.fit(t.trainInput,!0);const i=e.generate(t.trainInput.length,2);t.trainResult=i.map(n=>n.map(a=>a[0]))}else{e||(e=new p(function(){return new o(u.value)})),e.fit(t.trainInput,t.trainOutput.map(n=>n[0]));const i=e.predict(t.testInput(5));t.testResult(i.map(n=>n??-1))}},"fitModel"),u=s.input.number({label:" state = ",min:2,max:100,value:3});s.stepLoopButtons().init(()=>{e=null,t.init()}).step(r).epoch()}c(g,"default");
