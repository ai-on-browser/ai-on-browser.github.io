import{ContinuousHMM,HMMClassifier}from"../../lib/model/hmm.js";import Controller from"../controller.js";import{specialCategory}from"../utils.js";export default function(t){t.setting.ml.usage='Click and add data point. Then, click "Calculate".',t.setting.ml.reference={title:"Hidden Markov model (Wikipedia)",url:"https://en.wikipedia.org/wiki/Hidden_Markov_model"};const e=new Controller(t);let n=null;const i=e.input.number({label:" state = ",min:2,max:100,value:3});e.stepLoopButtons().init((()=>{n=null,t.init()})).step((function(e){if("CP"===t.task){n||(n=new ContinuousHMM(i.value,t.trainInput[0].length));const e=[t.trainInput];n.fit(e,!0);const a=n.bestPath(e)[0],l=[];for(let t=0;t<a.length-1;t++)l.push(a[t]!==a[t+1]);t.trainResult=l}else if("DE"===t.task){n||(n=new ContinuousHMM(i.value,1)),n.fit(t.trainInput,!0);const e=n.probability(t.testInput()),a=Math.min(...e),l=Math.max(...e);t.testResult(e.map((t=>specialCategory.density((t-a)/(l-a)))))}else if("GR"===t.task){n||(n=new ContinuousHMM(i.value,1)),n.fit(t.trainInput,!0);const e=n.generate(t.trainInput.length,2);t.trainResult=e.map((t=>t.map((t=>t[0]))))}else{n||(n=new HMMClassifier(new Set(t.trainOutput.map((t=>t[0]))),i.value)),n.fit(t.trainInput,t.trainOutput.map((t=>t[0])));const e=n.predict(t.testInput(5));t.testResult(e.map((t=>t??-1)))}e&&e()})).epoch()}