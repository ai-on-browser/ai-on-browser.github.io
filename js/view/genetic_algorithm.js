var h=Object.defineProperty;var s=(t,e)=>h(t,"name",{value:e,configurable:!0});import l from"../../lib/model/genetic_algorithm.js";import b from"../controller.js";var w=s(function(t,e){const d=new b(e),c=e.type==="grid"?Math.max(...e.env.size):10;e.reward="achieve";let n=new l(e,100,c),i=0,p=[];e.reset(n),e.render(()=>n.get_score());const g=s(()=>{n.run(),p.push(n.top_agent().total_reward);const r=+t.select("[name=mutation_rate]").property("value");n.next(r),e.reset(n),e.render(()=>n.get_score()),t.select("[name=generation]").text(++i),t.select("[name=scores]").text(" ["+p.slice(-10).reverse().join(",")+"]")},"step");t.append("span").text("Generation size"),t.append("input").attr("type","number").attr("name","size").attr("min",5).attr("max",200).attr("value",100),t.append("span").text("Resolution"),t.append("input").attr("type","number").attr("name","resolution").attr("min",2).attr("max",100).attr("value",c);const m=d.stepLoopButtons().init(()=>{const r=+t.select("[name=size]").property("value"),o=+t.select("[name=resolution]").property("value");n=new l(e,r,o),p=[],e.reset(n),e.render(()=>n.get_score()),t.select("[name=generation]").text(i=0),t.select("[name=scores]").text("")});t.append("span").text("Mutation rate"),t.append("input").attr("type","number").attr("name","mutation_rate").attr("min",0).attr("max",1).attr("step","0.0001").attr("value","0.001"),m.step(g),t.append("span").text(" Generation: "),t.append("span").attr("name","generation").text(i);let a=!1;const u=t.append("input").attr("type","button").attr("value","Test").on("click",function(){if(a=!a,u.attr("value",a?"Stop":"Test"),a){const r=n.top_agent();let o=e.reset(r);s(function x(){const _=r.get_action(o),{state:f,done:y}=e.step(_,r);o=f,e.render(),a&&!y?setTimeout(()=>x(),0):(a=!1,u.attr("value","Test"))},"loop")()}});return t.append("span").attr("name","scores"),()=>{a=!1}},"dispGeneticAlgorithm");export default function z(t){t.setting.ml.usage='Click "step" to update.',t.setting.terminate=w(t.setting.ml.configElement,t)}s(z,"default");
