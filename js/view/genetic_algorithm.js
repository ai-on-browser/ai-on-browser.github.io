import GeneticAlgorithmGeneration from"../../lib/model/genetic_algorithm.js";import Controller from"../controller.js";var dispGeneticAlgorithm=function(t,e){const n=new Controller(e),a="grid"===e.type?Math.max(...e.env.size):10;e.reward="achieve";let r=new GeneticAlgorithmGeneration(e,100,a),o=0,i=[];e.reset(r),e.render((()=>r.get_score()));t.append("span").text("Generation size"),t.append("input").attr("type","number").attr("name","size").attr("min",5).attr("max",200).attr("value",100),t.append("span").text("Resolution"),t.append("input").attr("type","number").attr("name","resolution").attr("min",2).attr("max",100).attr("value",a);const s=n.stepLoopButtons().init((()=>{const n=+t.select("[name=size]").property("value"),a=+t.select("[name=resolution]").property("value");r=new GeneticAlgorithmGeneration(e,n,a),i=[],e.reset(r),e.render((()=>r.get_score())),t.select("[name=generation]").text(o=0),t.select("[name=scores]").text("")}));t.append("span").text("Mutation rate"),t.append("input").attr("type","number").attr("name","mutation_rate").attr("min",0).attr("max",1).attr("step","0.0001").attr("value","0.001"),s.step((()=>{r.run(),i.push(r.top_agent().total_reward);const n=+t.select("[name=mutation_rate]").property("value");r.next(n),e.reset(r),e.render((()=>r.get_score())),t.select("[name=generation]").text(++o),t.select("[name=scores]").text(" ["+i.slice(-10).reverse().join(",")+"]")})),t.append("span").text(" Generation: "),t.append("span").attr("name","generation").text(o);let p=!1;const l=t.append("input").attr("type","button").attr("value","Test").on("click",(function(){if(p=!p,l.attr("value",p?"Stop":"Test"),p){const t=r.top_agent();let n=e.reset(t);!function a(){const r=t.get_action(n),{state:o,done:i}=e.step(r,t);n=o,e.render(),p&&!i?setTimeout((()=>a()),0):(p=!1,l.attr("value","Test"))}()}}));return t.append("span").attr("name","scores"),()=>{p=!1}};export default function(t){t.setting.ml.usage='Click "step" to update.',t.setting.terminate=dispGeneticAlgorithm(t.setting.ml.configElement,t)}