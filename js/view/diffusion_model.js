var p=Object.defineProperty;var s=(t,e)=>p(t,"name",{value:e,configurable:!0});import f from"../controller.js";import{BaseWorker as b}from"../utils.js";class _ extends b{static{s(this,"DiffusionModelWorker")}constructor(){super("js/view/worker/model_worker.js",{type:"module"})}initialize(e){return this._postMessage({name:"diffusion_model",method:"constructor",arguments:[e]})}epoch(){return this._postMessage({name:"diffusion_model",method:"epoch"}).then(e=>e.data)}fit(e,n,i,l){return this._postMessage({name:"diffusion_model",method:"fit",arguments:[e,n,i,l]}).then(r=>r.data)}generate(e){return this._postMessage({name:"diffusion_model",method:"generate",arguments:[e]}).then(n=>n.data)}}export default function w(t){t.setting.ml.usage='Click and add data point. Next, click "Initialize". Finally, click "Fit" button repeatedly.';const e=new f(t),n=new _;let i=0;const l=s(async()=>{if(t.datas.length===0)return;const a=t.trainInput,o=await n.fit(a,+u.value,m.value,g.value);i=await n.epoch(),t.plotLoss(o[0]);const h=await n.generate(a.length);t.trainResult=h},"fitModel"),r=s(async()=>{const a=t.trainOutput;c.element.disabled=!0;const o=await n.generate(t.trainInput.length,a);c.element.disabled=!1,console.log(o),t.trainResult=o},"genValues"),d=e.stepLoopButtons().init(a=>{n.initialize(100).then(a),t.init()}),u=e.select({label:" Iteration ",values:[1,10,100,1e3,1e4]});u.value=10;const m=e.input.number({label:"Learning rate ",min:0,max:100,step:.01,value:.01}),g=e.input.number({label:" Batch size ",min:1,max:100,value:10});d.step(l).epoch(()=>i);const c=e.input.button("Generate").on("click",r);return()=>{n.terminate()}}s(w,"default");
