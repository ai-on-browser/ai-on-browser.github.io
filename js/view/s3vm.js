import S3VM from"../../lib/model/s3vm.js";var dispS3VM=function(t,e){let a=null;t.append("select").attr("name","kernel").on("change",(function(){"gaussian"===d3.select(this).property("value")?t.select("input[name=gamma]").style("display","inline"):t.select("input[name=gamma]").style("display","none")})).selectAll("option").data(["gaussian","linear"]).enter().append("option").property("value",(t=>t)).text((t=>t)),t.append("input").attr("type","number").attr("name","gamma").attr("value",.1).attr("min",.01).attr("max",10).attr("step",.01);const n=e.setting.ml.controller.stepLoopButtons().init((()=>{const n=t.select("[name=kernel]").property("value"),r=[];"gaussian"===n&&r.push(+t.select("input[name=gamma]").property("value")),a=new S3VM(n,r),e.fit(((t,e)=>{a.init(t,e.map((t=>null==t[0]?null:1===t[0]?-1:1)))})),e.init()}));t.append("span").text("learning rate = max("),t.append("input").attr("type","number").attr("name","min_learning_rate").attr("min",0).attr("max",1).attr("step",.01).attr("value",0),t.append("span").text(", "),t.append("input").attr("type","number").attr("name","learning_rate").attr("min",0).attr("max",1).attr("step",.1).attr("value",.1),t.append("span").text(" * "),t.append("input").attr("type","number").attr("name","learning_rate_update").attr("min",0).attr("max",1).attr("step","0.01").attr("value",.999),t.append("span").text(") "),n.step((n=>{e.fit(((r,p,l)=>{const i=+t.select("[name=learning_rate]").property("value"),s=+t.select("[name=min_learning_rate]").property("value"),m=+t.select("[name=learning_rate_update]").property("value");a._rate=Math.max(s,i),a.fit(),e.predict(((e,r)=>{const p=a.predict(e);t.select("[name=learning_rate]").property("value",i*m),r(p.map((t=>t<0?1:2))),n&&n()}),4)}))})).epoch()};export default function(t){t.setting.ml.usage='Currently, this model works only with binary classification. Click and add data point. Finally, click "Step" button repeatedly.',dispS3VM(t.setting.ml.configElement,t)}