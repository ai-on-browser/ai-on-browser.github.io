import BaseRenderer from"./base.js";export default class DocumentScatterRenderer extends BaseRenderer{constructor(t){super(t),this._size=[960,500];const e=this.setting.render.addItem("document-scatter"),s=document.createElement("div");if(s.id="plot-area",e.appendChild(s),this._root=d3.select(s).append("svg").style("border","1px solid #000000").attr("width",`${this._size[0]}px`).attr("height",`${this._size[1]}px`),this._svg=this._root.append("g"),this._r=this._svg.select("g.points g.datas"),0===this._r.size()){const t=this._svg.append("g").classed("points",!0);this._r=t.append("g").classed("datas",!0)}}get svg(){return this._svg}get width(){return this._size[0]}set width(t){this._size[0]=t,this._root.attr("width",`${t}px`)}get height(){return this._size[1]}set height(t){this._size[1]=t,this._root.attr("height",`${t}px`)}set trainResult(t){this._pred=t,this._displayResults(t,this.trainInput)}init(){this._lastpred=null,this._r_tile?.remove()}_render(){}testData(){const t=this.datas.x[0],[e,s]=this.datas.ordinal(t);return e}testResult(t){this._pred=t,this._displayResults(t,this.testData())}_displayResults(t,e){this._r.selectAll("*").remove();let s=[],i=[];for(let e=0;e<t[0].length;e++){const r=t.map((t=>t[e]));s.push(Math.max(...r)),i.push(Math.min(...r))}const r=this.width,h=this.height-20,a=[r,h].map(((t,e)=>(t-10)/(s[e]-i[e]))),n=Math.min(...a),d=[5,20];for(let t=0;t<a.length;t++)a[t]>n&&(isFinite(a[t])?d[t]+=(a[t]-n)*(s[t]-i[t])/2:d[t]=[r,h][t]/2-i[t]);for(let s=0;s<t.length;s++){const r=t[s].map(((t,e)=>(t-i[e])*n+d[e]));this._r.append("text").attr("x",r[0]).attr("y",r[1]).text(e[s]).append("title").text(e[s])}}terminate(){this.setting.render.removeItem("document-scatter"),super.terminate()}}