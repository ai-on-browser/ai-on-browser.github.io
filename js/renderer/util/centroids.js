var m=Object.defineProperty;var _=(l,r)=>m(l,"name",{value:r,configurable:!0});import{DataPointStarPlotter as v,DataPoint as f,DataLine as y}from"./figure.js";export default class u{static{_(this,"CentroidPlotter")}constructor(r){this._renderer=r,this._svg=r.svg}set(r,t,{line:a=!1,duration:g=0}={}){let i=this._svg.querySelector("g.centroids");if(!i){i=document.createElementNS("http://www.w3.org/2000/svg","g"),i.classList.add("centroids"),this._svg.appendChild(i);const e=document.createElementNS("http://www.w3.org/2000/svg","g");e.classList.add("c-line"),i.appendChild(e),this._centroids_line=[],this._centroids=null}const c=[];this._centroids&&this._centroids.forEach(e=>{Array.isArray(t)&&!t.includes(e.category)?e.remove():c.push(e)});const h=this._renderer.points;for(let e=0;e<h.length;e++)(this._centroids_line[e]?._from!==h[e]||!a)&&(this._centroids_line[e]?.remove(),this._centroids_line[e]=null);a&&=h[0]instanceof f,this._centroids=r.map((e,n)=>{let o=Array.isArray(t)?c.find(d=>d.category===t[n]):c[n];if(o||(o=new f(i,this._renderer.toPoint(e),Array.isArray(t)?t[n]:t),o.plotter(v)),a){const d=this._renderer.points,p=this._renderer.datas.y;for(let s=0;s<d.length;s++)p[s]===t[n]&&(this._centroids_line[s]?this._centroids_line[s].to=o:this._centroids_line[s]=new y(i.querySelector(".c-line"),d[s],o))}return o}),Promise.resolve().then(()=>{this._centroids.forEach((e,n)=>{e.move(this._renderer.toPoint(r[n]),g)})})}terminate(){this._svg.querySelector("g.centroids")?.remove()}}
