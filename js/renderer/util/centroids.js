import{DataPointStarPlotter,DataPoint,DataLine}from"../../utils.js";export default class CentroidPlotter{constructor(t){this._renderer=t,this._svg=t.svg}set(t,e,{line:r=!1,duration:i=0}={}){let s=this._svg.querySelector("g.centroids");if(!s){s=document.createElementNS("http://www.w3.org/2000/svg","g"),s.classList.add("centroids"),this._svg.appendChild(s);const t=document.createElementNS("http://www.w3.org/2000/svg","g");t.classList.add("c-line"),s.appendChild(t),this._centroids_line=[],this._centroids=null}const n=[];this._centroids&&this._centroids.forEach((t=>{Array.isArray(e)&&e.indexOf(t.category)<0?t.remove():n.push(t)}));const o=this._renderer.points;for(let t=0;t<o.length;t++)this._centroids_line[t]?._from===o[t]&&r||(this._centroids_line[t]?.remove(),this._centroids_line[t]=null);this._centroids=t.map(((t,i)=>{let o=Array.isArray(e)?n.find((t=>t.category===e[i])):n[i];if(o||(o=new DataPoint(s,this._renderer.toPoint(t),Array.isArray(e)?e[i]:e),o.plotter(DataPointStarPlotter)),r){const t=this._renderer.points,r=this._renderer.datas.y;for(let n=0;n<t.length;n++)r[n]===e[i]&&(this._centroids_line[n]?this._centroids_line[n].to=o:this._centroids_line[n]=new DataLine(s.querySelector(".c-line"),t[n],o))}return o})),Promise.resolve().then((()=>{this._centroids.forEach(((e,r)=>{e.move(this._renderer.toPoint(t[r]),i)}))}))}terminate(){this._svg.querySelector("g.centroids")?.remove()}}