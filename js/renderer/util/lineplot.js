export default class LinePlotter{constructor(t){this._r=t,this._item=null}_ready(t){if(!this._item)if("object"!=typeof t||Array.isArray(t))this._item=new LinePlotterItem(this._r);else{this._item={};for(const e of Object.keys(t))this._item[e]=new LinePlotterItem(this._r),this._item[e].name=e}}add(t){if(this._ready(t),"object"==typeof t)for(const e of Object.keys(t))this._item[e].add(t[e]);else this._item.add(t)}setValues(t){if(this._ready(t),Array.isArray(t))this._item.setValues(t);else for(const e of Object.keys(t))this._item[e].setValues(t[e])}terminate(){if(this._item instanceof LinePlotterItem)this._item.terminate();else for(const t of Object.keys(this._item))this._item[t].terminate()}}class LinePlotterItem{constructor(t){this._width=200,this._height=50,this._plot_count=1e4,this._print_count=0,this._plot_smooth_window=20,this._root=document.createElement("span"),t.appendChild(this._root),this._caption=document.createElement("div"),this._caption.innerText="loss",this._root.appendChild(this._caption);const e=document.createElement("span");e.style.display="inline-flex",e.style.alignItems="flex-start",e.style.margin="5px",e.style.fontSize="80%",this._root.appendChild(e);const s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.setAttribute("width",this._width),s.setAttribute("height",this._height),e.appendChild(s),this._scaleElm=document.createElement("span"),this._scaleElm.style.display="flex",this._scaleElm.style.flexDirection="column",this._scaleElm.style.margin="0 5px",this._scaleElm.style.textAlign="center",e.appendChild(this._scaleElm);const i=document.createElement("span");i.innerText="scale",this._scaleElm.appendChild(i),this._scale=document.createElement("select");for(const t of["linear","log"]){const e=document.createElement("option");e.value=e.innerText=t,this._scale.appendChild(e)}this._scale.onchange=()=>this.plotRewards(),this._scaleElm.appendChild(this._scale);const l=document.createElement("span");l.style.display="inline-flex",l.style.flexDirection="column",e.appendChild(l),this._state={root:l};for(const t of["count","max","ave","min","values"]){const e=document.createElement("span");l.append(e),this._state[t]=e}this._history=[]}set name(t){this._caption.innerText=t,this._caption.style.display=t?null:"none"}get length(){return this._history.length}add(t){this._history.push(t),this.plotRewards()}setValues(t){this._history=t,this.plotRewards()}terminate(){this._root.remove()}lastHistory(t=0){if(t<=0)return this._history;const e=this._history.length;return this._history.slice(Math.max(0,e-t),e)}plotRewards(){const t=this._root.querySelector("svg"),e=t.width.baseVal.value,s=t.height.baseVal.value;let i=null,l=null;0===t.childNodes.length?(i=document.createElementNS("http://www.w3.org/2000/svg","path"),i.setAttribute("name","value"),i.setAttribute("stroke","black"),i.setAttribute("fill-opacity",0),t.appendChild(i),l=document.createElementNS("http://www.w3.org/2000/svg","path"),l.setAttribute("name","smooth"),l.setAttribute("stroke","green"),l.setAttribute("fill-opacity",0),t.appendChild(l)):(i=t.querySelector("path[name=value]"),l=t.querySelector("path[name=smooth]"));const n=this.lastHistory(this._plot_count);if(0===n.length)return t.style.display="none",this._scaleElm.style.display="none",this._state.root.style.display="none",i.removeAttribute("d"),void l.removeAttribute("d");t.style.display=null,this._state.root.style.display="inline-flex";const o=Math.max(...n),a=Math.min(...n),h=t=>{if("number"!=typeof t)return t;if(0===t)return 0;const e=3-Math.floor(Math.log10(Math.abs(t)));return Math.round(t*10**e)/10**e};if(this._state.count.innerText=`Count: ${this.length}`,this._state.min.innerText=`Min: ${h(a)}`,this._state.max.innerText=`Max: ${h(o)}`,o===a)return void(this._scaleElm.style.display="none");this._history.some((t=>t<=0))?(this._scaleElm.style.display="none",this._scale.value="linear"):this._scaleElm.style.display="flex";const r=(t,i)=>"log"===this._scale.value?[e*t/(n.length-1),(1-(Math.log(i)-Math.log(a))/(Math.log(o)-Math.log(a)))*s]:[e*t/(n.length-1),(1-(i-a)/(o-a))*s],c=n.map(((t,e)=>r(e,t))),_=t=>{let e="";for(let s=0;s<t.length;s++)e+=`${0===s?"M":"L"}${t[s][0]},${t[s][1]}`;return e};i.setAttribute("d",_(c));const m=[];for(let t=0;t<n.length-this._plot_smooth_window;t++){let e=0;for(let s=0;s<this._plot_smooth_window;s++)e+=n[t+s];m.push([t+this._plot_smooth_window,e/this._plot_smooth_window])}m.length>0&&(l.setAttribute("d",_(m.map((t=>r(...t))))),this._state.ave.innerText=`Mean(${this._plot_smooth_window}): ${h(m[m.length-1]?.[1])}`),this._print_count>0?(this._state.values.style.display=null,this._state.values.innerText=` [${n.slice(n.length-this._print_count).reverse().join(",")}]`):this._state.values.style.display="none"}}