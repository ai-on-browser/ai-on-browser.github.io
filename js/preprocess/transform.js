var m=Object.defineProperty;var i=(r,e)=>m(r,"name",{value:e,configurable:!0});import a from"../../lib/model/minmax.js";import d from"../../lib/model/standardization.js";import h from"../../lib/model/maxabs.js";import c from"../../lib/model/robust_scaler.js";import l from"../../lib/model/box_cox.js";import p from"../../lib/model/yeo_johnson.js";const s={minmax:a,standard:d,maxabs:h,robust:c,"Box-Cox":l,"Yeo-Johnson":p};export default class _{static{i(this,"TransformPreprocessor")}constructor(e){this._manager=e,this._method="standard",this.init()}init(){if(this._r)this._r.replaceChildren();else{const o=this._manager.setting.preprocess.configElement;this._r=document.createElement("div"),o.append(this._r)}const e=document.createElement("div"),t=document.createElement("select");for(const o of Object.keys(s)){const n=t.appendChild(document.createElement("option"));n.value=n.innerText=o}t.onchange=()=>{this._method=t.value,this._manager.setting.ml.refresh()},t.value=this._method,e.append("Method ",t),this._r.append(e)}apply(e,{dofit:t=!0}){return t&&(this._model=new s[this._method],this._model.fit(e)),this._model.predict(e)}inverse(e){return this._model.inverse(e)}terminate(){this._r?.remove()}}
