import{RLEnvironmentBase}from"../../../lib/rl/base.js";import{Game}from"../game/base.js";const EMPTY=1,BLACK=2,WHITE=3,flipPiece=t=>2===t?3:3===t?2:1;export default class ReversiRLEnvironment extends RLEnvironmentBase{constructor(t){super(),this._platform=t,this._size=[8,8],this._game=new Reversi(this),this._board=this._game.board,this._reward={goal:1,step:1,fail:0},this._org_width=this._platform.width,this._org_height=this._platform.height}get actions(){const t=[];for(let s=0;s<this._size[0];s++)for(let e=0;e<this._size[1];e++)t.push(`${s}_${e}`);return[t]}get states(){const t=[];for(let s=0;s<this._size[0]*this._size[1];s++)t.push([1,2,3]);return t}set reward(t){}init(t){this._platform.width=500,this._platform.height=500;const s=this._platform.width,e=this._platform.height,i=s/this._size[1],r=e/this._size[0];this._cells=[];for(let s=0;s<this._size[0];s++){this._cells[s]=[];for(let e=0;e<this._size[1];e++)this._cells[s][e]=t.append("g"),this._cells[s][e].append("rect").attr("x",e*i).attr("y",s*r).attr("width",i).attr("height",r).attr("fill","#339933").attr("stroke","#333333").attr("stroke-width","1")}}reset(){return super.reset(),this._board.reset(),this.state()}render(t){for(let t=0;t<this._cells.length;t++)for(let s=0;s<this._cells[t].length;s++){if(this._cells[t][s].selectAll("circle").remove(),1===this._board.at([t,s]))continue;const e=this._cells[t][s].select("rect"),i=+e.attr("x"),r=+e.attr("y"),h=+e.attr("width"),o=+e.attr("height"),a=this._cells[t][s].append("circle").attr("cx",i+h/2).attr("cy",r+o/2).attr("r",.4*Math.min(h,o)).attr("stroke","black").attr("stroke-width","1");3===this._board.at([t,s])?a.attr("fill","white"):2===this._board.at([t,s])&&a.attr("fill","black")}}state(t){const s=[];for(let t=0;t<this._size[0];t++)for(let e=0;e<this._size[1];e++)s.push(this._board.at([t,e]));return s}step(t,s){super.step(t,s);return this.test(this.state,t,s)}test(t,s,e){return{state:[],reward:0,done:!1}}evaluation(t){this._evaluation=t}game(...t){return t[0]||(t[0]=new ManualPlayer(this)),t[1]||(t[1]=new ManualPlayer(this)),t[0].turn=2,t[1].turn=3,this._game.players=t,this._game}close(){this._platform.width=this._org_width,this._platform.height=this._org_height}}class Reversi extends Game{constructor(t){super(t),this._board=new ReversiBoard(t._size,t._evaluation),this.turns=[2,3]}_showResult(t){const s=this._board.count;t.append("tspan").attr("x","0em").attr("y","-1em").text(`BLACK: ${s.black}`),t.append("tspan").attr("x","0em").attr("y","1em").text(`WHITE: ${s.white}`)}}class ReversiBoard{constructor(t,s){this._evaluator=s,this._size=t,this.reset()}get size(){return this._size}get count(){let t=0,s=0;for(let e=0;e<this._size[0];e++)for(let i=0;i<this._size[1];i++)3===this._board[e][i]?s++:2===this._board[e][i]&&t++;return{black:t,white:s}}get finish(){return this.choices(2).length+this.choices(3).length===0}get winner(){if(!this.finish)return null;const t=this.count;return t.black>t.white?2:t.black<t.white?3:null}nextTurn(t){return 2===(s=t)?3:3===s?2:1;var s}copy(){const t=new ReversiBoard(this._size,this._evaluator);for(let s=0;s<this._size[0];s++)for(let e=0;e<this._size[1];e++)t._board[s][e]=this._board[s][e];return t}score(t){if(this._evaluator)return this._evaluator(this,t);const s=this.count;return 2===t?s.black-s.white:s.white-s.black}at(t){return this._board[t[0]][t[1]]}set(t,s){const e=this.flipPositions(t[0],t[1],s);if(0===e.length)return!1;this._board[t[0]][t[1]]=s;for(const[t,i]of e)this._board[t][i]=s;return!0}reset(){this._board=[];for(let t=0;t<this._size[0];t++)this._board[t]=Array(this._size[1]).fill(1);const t=Math.floor(this._size[0]/2),s=Math.floor(this._size[1]/2);this._board[t-1][s-1]=2,this._board[t-1][s]=3,this._board[t][s-1]=3,this._board[t][s]=2}choices(t){const s=[];for(let e=0;e<this._size[0];e++)for(let i=0;i<this._size[1];i++)this.flipPositions(e,i,t).length>0&&s.push([e,i]);return s}flipPositions(t,s,e){if(t<0||s<0||this._size[0]<=t||this._size[1]<=s)return[];if(1===e||1!==this._board[t][s])return[];const i=[];for(const[r,h]of[[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1],[0,1]]){let o=t,a=s;const n=[];for(;o+=r,a+=h,!(o<0||a<0||this._size[0]<=o||this._size[1]<=a);){if(this._board[o][a]===e){i.push(...n);break}if(1===this._board[o][a])break;n.push([o,a])}}return i}}class ManualPlayer{constructor(t){this._turn=null,this._env=t,this._obj=null}set turn(t){this._turn=t}action(t,s){const e=this._env.platform.width,i=this._env.platform.height,r=this;this._obj=this._env.svg.append("g");t.choices(this._turn);this._obj.append("rect").attr("x",0).attr("y",0).attr("width",e).attr("height",i).attr("opacity",0).on("click",(function(){const h=d3.mouse(this),o=[Math.floor(h[1]/e*t.size[0]),Math.floor(h[0]/i*t.size[1])];s(o),r._obj.remove(),r._obj=null}))}close(){this._obj&&this._obj.remove()}}