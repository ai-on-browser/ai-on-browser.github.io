import ReversiRLEnvironment from"../../../lib/rl/reversi.js";import{Game}from"../game/base.js";export default class ReversiRenderer extends ReversiRLEnvironment{constructor(t){super(),this._platform=t,this._game=new Reversi(this),this._org_width=this._platform.width,this._org_height=this._platform.height}init(t){this._platform.width=500,this._platform.height=500;const e=this._platform.width,r=this._platform.height,i=e/this._size[1],s=r/this._size[0];this._cells=[];for(let e=0;e<this._size[0];e++){this._cells[e]=[];for(let r=0;r<this._size[1];r++)this._cells[e][r]=t.append("g"),this._cells[e][r].append("rect").attr("x",r*i).attr("y",e*s).attr("width",i).attr("height",s).attr("fill","#339933").attr("stroke","#333333").attr("stroke-width","1")}}render(t){for(let t=0;t<this._cells.length;t++)for(let e=0;e<this._cells[t].length;e++){if(this._cells[t][e].selectAll("circle").remove(),this._board.at([t,e])===ReversiRLEnvironment.EMPTY)continue;const r=this._cells[t][e].select("rect"),i=+r.attr("x"),s=+r.attr("y"),h=+r.attr("width"),a=+r.attr("height"),n=this._cells[t][e].append("circle").attr("cx",i+h/2).attr("cy",s+a/2).attr("r",.4*Math.min(h,a)).attr("stroke","black").attr("stroke-width","1");this._board.at([t,e])===ReversiRLEnvironment.WHITE?n.attr("fill","white"):this._board.at([t,e])===ReversiRLEnvironment.BLACK&&n.attr("fill","black")}}game(...t){return t[0]||(t[0]=new ManualPlayer(this)),t[1]||(t[1]=new ManualPlayer(this)),t[0].turn=ReversiRLEnvironment.BLACK,t[1].turn=ReversiRLEnvironment.WHITE,this._game.players=t,this._game}close(){this._platform.width=this._org_width,this._platform.height=this._org_height}}class Reversi extends Game{constructor(t){super(t),this._board=t._board,this.turns=[ReversiRLEnvironment.BLACK,ReversiRLEnvironment.WHITE]}_showResult(t){const e=this._board.count;t.append("tspan").attr("x","0em").attr("y","-1em").text(`BLACK: ${e.black}`),t.append("tspan").attr("x","0em").attr("y","1em").text(`WHITE: ${e.white}`)}}class ManualPlayer{constructor(t){this._turn=null,this._env=t,this._obj=null}set turn(t){this._turn=t}action(t,e){const r=this._env._platform.width,i=this._env._platform.height,s=this;this._obj=this._env._platform.svg.append("g");t.choices(this._turn);this._obj.append("rect").attr("x",0).attr("y",0).attr("width",r).attr("height",i).attr("opacity",0).on("click",(h=>{const a=d3.pointer(h),n=[Math.floor(a[1]/r*t.size[0]),Math.floor(a[0]/i*t.size[1])];e(n),s._obj.remove(),s._obj=null}))}close(){this._obj&&this._obj.remove()}}