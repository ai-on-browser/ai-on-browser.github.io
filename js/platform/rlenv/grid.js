import GridMazeRLEnvironment from"../../../lib/rl/grid.js";const argmax=function(t,e){return 0===t.length?-1:(t=e?t.map(e):t).indexOf(Math.max(...t))};export default class GridMazeRenderer extends GridMazeRLEnvironment{constructor(t){super(),this.platform=t,this._points=[],this._q=null,this._show_max=!1,this._render_blocks=[],this._init_menu()}get _action_str(){return 1===this._dim?["→","←"]:["→","↓","←","↑"]}_init_menu(){const t=this.platform.setting.rl.configElement;t.selectAll("*").remove(),t.append("span").text("Columns "),t.append("input").attr("type","number").attr("name","columns").attr("min",1).attr("max",50).attr("value",this._size[0]).on("change",(()=>{this._size[0]=+t.select("[name=columns]").property("value"),this.__map=null,this.platform.init(),this.platform.setting.ml.refresh()})),t.append("span").text(" Rows "),t.append("input").attr("type","number").attr("name","rows").attr("min",1).attr("max",50).attr("value",this._size[1]).on("change",(()=>{this._size[1]=+t.select("[name=rows]").property("value"),this.__map=null,this.platform.init(),this.platform.setting.ml.refresh()}))}init(t){const e=this.platform.width,s=this.platform.height,i=this,r=t.append("g").on("click",(function(){const t=d3.mouse(this),e=i._size[0]/i.platform.width,s=i._size[1]/i.platform.height,r=Math.floor(t[0]*e),a=Math.floor(t[1]*s);i._points.push([r,a]),d3.event.stopPropagation(),setTimeout((()=>{i.platform.render()}),0)})),a=e/this._size[0],n=s/this._size[1];this._render_blocks=[];for(let t=0;t<this._size[0];t++){this._render_blocks[t]=[];for(let e=0;e<this._size[1];e++){const s=this._render_blocks[t][e]=r.append("g").classed("grid",!0).attr("stroke-width",1).attr("stroke","black").attr("stroke-opacity",.2);if(this._show_max)s.append("rect").attr("x",a*t).attr("y",n*e).attr("width",a).attr("height",n).attr("fill",d3.rgb(255,255,255)),s.append("text").classed("value",!0).attr("x",a*t).attr("y",n*(e+.8)).attr("font-size",14).style("user-select","none");else{const i=[a*(t+.5),n*(e+.5)],r=[[a*(t+1),n*e],[a*(t+1),n*(e+1)],[a*t,n*(e+1)],[a*t,n*e]];r[4]=r[0];for(let t=0;t<4;t++)s.append("polygon").attr("points",`${r[t][0]},${r[t][1]} ${r[t+1][0]},${r[t+1][1]} ${i[0]},${i[1]}`).attr("fill",d3.rgb(255,255,255)).append("title")}s.append("text").classed("action",!0).attr("x",a*(t+.5)).attr("y",n*(e+.5)).style("user-select","none").style("transform-box","fill-box").style("transform","translate(-50%, 25%)")}}t.append("circle").classed("agent",!0).attr("cx",.5*a).attr("cy",.5*n).attr("fill",d3.rgb(128,128,128,.8)).attr("stroke-width",1).attr("stroke","black").attr("r",Math.min(a,n)/3)}_min(t){return Array.isArray(t[0])?Math.min(...t.map(this._min.bind(this))):Math.min(...t)}_max(t){return Array.isArray(t[0])?Math.max(...t.map(this._max.bind(this))):Math.max(...t)}render(t,e){const s=this.platform.width,i=this.platform.height,r=s/this._size[0],a=i/this._size[1],n=this.map;if(e&&(this._q=e()),this._q){const t=this._q,e=this._max(t),s=this._min(t),i=Math.max(Math.abs(e),Math.abs(s));for(let e=0;e<this._size[0];e++){if(!this._q[e])continue;const s=2===this._dim?t[e]:[t[e]];for(let t=0;t<this._size[1];t++){if(!s[t])continue;if(n[e][t]||e===this._size[0]-1&&t===this._size[1]-1)continue;const r=(l=s[t],o=void 0,0===l.length?-1:(l=o?l.map(o):l).indexOf(Math.max(...l))),a=t=>{const e=255*(1-Math.abs(t)/i);return t>0?d3.rgb(e,255,e):t<0?d3.rgb(255,e,e):d3.rgb(255,255,255)};if(this._render_blocks[e][t].select("text.action").text(this._action_str[r]),this._show_max){const i=Math.max(...s[t]);this._render_blocks[e][t].selectAll("rect").attr("fill",a(i)),this._render_blocks[e][t].select("text.value").text(`${i}`.slice(0,6))}else this._render_blocks[e][t].selectAll("polygon").each((function(e,i){const r=d3.select(this);r.attr("fill",a(s[t][i])),r.select("title").text(s[t][i])}))}}}else t.selectAll("g.grid rect, g.grid polygon").attr("fill",d3.rgb(255,255,255));var l,o;for(let t=0;t<this._size[0];t++)for(let e=0;e<this._size[1];e++)n[t][e]&&this._render_blocks[t][e].selectAll("rect, polygon").attr("fill",d3.rgb(0,0,0));this._render_blocks[this._size[0]-1][this._size[1]-1].selectAll("rect, polygon").attr("fill","yellow"),t.select("circle.agent").attr("cx",(this._position[0]+.5)*r).attr("cy",((this._position[1]||0)+.5)*a)}}