var m=Object.defineProperty;var p=(l,t)=>m(l,"name",{value:t,configurable:!0});import{BasePlatform as f}from"./base.js";import d from"../data/image.js";import u from"../renderer/image.js";export default class g extends f{static{p(this,"ImagePlatform")}constructor(t){super(t),this._reduce_algorithm="mean",this._color_space="rgb",this._normalize=!1,this._step=10,this._binary_threshold=180,this._renderer.forEach(r=>r.terminate()),this._renderer=[new u(t)];const s=this.setting.task.configElement;s.append("Color space");const e=document.createElement("select");e.name="space",e.onchange=()=>{this._color_space=e.value,a.style.display=this._color_space==="binary"?null:"none",this.render()};for(const r of Object.keys(d.colorSpaces).map(i=>d.colorSpaces[i])){const i=document.createElement("option");i.value=r,i.innerText=r,e.appendChild(i)}s.appendChild(e);const a=document.createElement("input");a.type="number",a.name="threshold",a.min=0,a.max=255,a.value=this._binary_threshold,a.style.display="none",a.onchange=()=>{this._binary_threshold=a.value,this.render()},s.appendChild(a)}set colorSpace(t){this._color_space=t,this.setting.task.configElement.querySelector("[name=space]").value=t,this.setting.task.configElement.querySelector("[name=threshold]").style.display=this._color_space==="binary"?null:"none",this.render()}get trainInput(){const t=this.datas.x[0];let s=this.datas._applySpace(this.datas._reduce(t,this._step,this._reduce_algorithm),this._color_space,this._normalize,this._binary_threshold);for(const e of this._manager.preprocesses)s=e.apply(s,{dofit:!0});return s}set trainResult(t){t=this._to2d(t,this.trainInput,this._step),this._renderer.forEach(s=>s.trainResult=t)}testInput(t=8){const s=this.datas.x[0];let e=this.datas._reduce(s,t,this._reduce_algorithm);for(const r of this._manager.preprocesses)e=r.apply(e,{dofit:!1});if(this.task==="DN")for(let r=0;r<e.length;r++)for(let i=0;i<e[r].length;i++)for(let n=0;n<e[r][i].length;n++)e[r][i][n]=Math.max(0,Math.min(255,e[r][i][n]+Math.floor(Math.random()*50-25)));const a=this.datas._applySpace(e,this._color_space,this._normalize,this._binary_threshold);return this.__pred=a,this.__pred_x=e,this.__pred_step=t,a}testResult(t){if(!Array.isArray(t[0])){const s=[];for(let e=0;e<t.length;e+=this.__pred[0][0].length)s.push(t.slice(e,e+this.__pred[0][0].length));t=s}t=this._to2d(t,this.__pred_x,this.__pred_step),this._renderer.forEach(s=>s.testResult(t))}_to2d(t,s,e){const a=Array.from({length:s.length*e},()=>[]);for(let r=0,i=0,n=0;r<s.length;r++,i+=e)for(let c=0,_=0;c<s[r].length;c++,n++,_+=e)for(let o=0;o<e;o++)for(let h=0;h<e;h++)a[i+o][_+h]=t[n];return a}init(){this._renderer.forEach(t=>t.init()),this.render()}terminate(){this.setting.task.configElement.replaceChildren(),super.terminate()}}
