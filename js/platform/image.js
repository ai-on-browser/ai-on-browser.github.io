import{BasePlatform}from"./base.js";import ImageData from"../data/image.js";import{specialCategory,getCategoryColor}from"../utils.js";import ImageRenderer from"../renderer/image.js";export default class ImagePlatform extends BasePlatform{constructor(t,e){super(t,e),this._reduce_algorithm="mean",this._color_space="rgb",this._normalize=!1,this._step=10,this._binary_threshold=180,this._renderer.terminate(),this._renderer=new ImageRenderer(e);const s=this.setting.task.configElement;s.append("Color space");const a=document.createElement("select");a.name="space",a.onchange=()=>{this._color_space=a.value,r.style.display="binary"===this._color_space?null:"none",this.render()};for(const t of Object.keys(ImageData.colorSpaces).map((t=>ImageData.colorSpaces[t]))){const e=document.createElement("option");e.value=t,e.innerText=t,a.appendChild(e)}s.appendChild(a);const r=document.createElement("input");r.type="number",r.name="threshold",r.min=0,r.max=255,r.value=this._binary_threshold,r.style.display="none",r.onchange=()=>{this._binary_threshold=r.value,this.render()},s.appendChild(r),s.append(" overwrap "),this._opacity=document.createElement("input"),this._opacity.name="opacity",this._opacity.type="range",this._opacity.min=0,this._opacity.max=1,this._opacity.step=.1,this._opacity.value=.5,this._opacity.oninput=()=>{const t=this._renderer._root.querySelector("canvas.overlay");t&&(t.style.opacity=this._opacity.value)},s.appendChild(this._opacity)}set colorSpace(t){this._color_space=t,this.setting.task.configElement.querySelector("[name=space]").value=t,this.setting.task.configElement.querySelector("[name=threshold]").style.display="binary"===this._color_space?null:"none",this.render()}get trainInput(){const t=this.datas.x[0];return this.datas._applySpace(this.datas._reduce(t,this._step,this._reduce_algorithm),this._color_space,this._normalize,this._binary_threshold)}set trainResult(t){this._pred=t,this._displayResult(this.trainInput,t,this._step)}testInput(t=8){const e=this.datas.x[0],s=this.datas._reduce(e,t,this._reduce_algorithm);if("DN"===this.task)for(let t=0;t<s.length;t++)for(let e=0;e<s[t].length;e++)for(let a=0;a<s[t][e].length;a++)s[t][e][a]=Math.max(0,Math.min(255,s[t][e][a]+Math.floor(50*Math.random()-25)));const a=this.datas._applySpace(s,this._color_space,this._normalize,this._binary_threshold);return this.__pred=a,this.__pred_x=s,this.__pred_step=t,a}testResult(t){if(!Array.isArray(t[0])){const e=[];for(let s=0;s<t.length;s+=this.__pred[0][0].length){const a=[];for(let e=0;e<this.__pred[0][0].length;e++)a.push(t[s+e]);e.push(a)}t=e}this._pred=t,this._displayResult(this.__pred_x,t,this.__pred_step)}init(){this._renderer.init(),this._overlay?.remove(),this.render()}render(){this._renderer.render()}_displayResult(t,e,s){this._overlay?.remove();const a=document.createElement("canvas");a.classList.add("overlay"),a.style.position="absolute",a.style.opacity=this._opacity.value,a.width=this.width,a.height=this.height;const r=a.getContext("2d"),i=r.createImageData(a.width,a.height);for(let r=0,o=0;r<t.length;r++)for(let n=0;n<t[r].length;n++,o++){const t=[0,0,0,0];if(Array.isArray(e[o]))t[0]=e[o][0],t[3]=255,1===e[o].length?(t[1]=e[o][0],t[2]=e[o][0]):(t[1]=e[o][1],t[2]=e[o][2]);else if(!0===e[o]||!1===e[o])if(e[o]){const e=getCategoryColor(specialCategory.error);t[0]=e.r,t[1]=e.g,t[2]=e.b,t[3]=255*e.opacity}else t[0]=255,t[1]=255,t[2]=255,t[3]=255;else{const s=getCategoryColor(e[o]);t[0]=s.r,t[1]=s.g,t[2]=s.b,t[3]=255*s.opacity}for(let e=0;e<s;e++)for(let o=0;o<s;o++){const h=4*((r*s+e)*a.width+n*s+o);i.data[h]=t[0],i.data[h+1]=t[1],i.data[h+2]=t[2],i.data[h+3]=t[3]}}r.putImageData(i,0,0),this._renderer._root.appendChild(a),this._overlay=a}terminate(){this.setting.task.configElement.replaceChildren(),super.terminate()}}