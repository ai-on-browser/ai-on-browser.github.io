var m=Object.defineProperty;var d=(c,e)=>m(c,"name",{value:e,configurable:!0});import{BasePlatform as f}from"./base.js";import u from"../renderer/image.js";import a from"../data/loader/image.js";export default class g extends f{static{d(this,"ImagePlatform")}constructor(e){super(e),this._reduce_algorithm="mean",this._color_space="rgb",this._normalize=!1,this._step=10,this._binary_threshold=180,this._renderer.forEach(r=>r.terminate()),this._renderer=[new u(e)];const s=this.setting.task.configElement;s.append("Color space");const t=document.createElement("select");t.name="space",t.onchange=()=>{this._color_space=t.value,n.style.display=this._color_space==="binary"?null:"none",this.render()};for(const r of Object.values(a.colorSpaces)){const i=document.createElement("option");i.value=r,i.innerText=r,t.appendChild(i)}s.appendChild(t);const n=document.createElement("input");n.type="number",n.name="threshold",n.min=0,n.max=255,n.value=this._binary_threshold,n.style.display="none",n.onchange=()=>{this._binary_threshold=n.value,this.render()},s.appendChild(n)}set colorSpace(e){this._color_space=e,this.setting.task.configElement.querySelector("[name=space]").value=e,this.setting.task.configElement.querySelector("[name=threshold]").style.display=this._color_space==="binary"?null:"none",this.render()}get trainInput(){const e=this.datas.x[0];let s=a.applySpace(a.reduce(e,this._step,this._reduce_algorithm),this._color_space,this._normalize,this._binary_threshold);for(const t of this._manager.preprocesses)s=t.apply(s,{dofit:!0});return s}set trainResult(e){e=this._to2d(e,this.trainInput,this._step),this._renderer.forEach(s=>s.trainResult=e)}testInput(e=8){const s=this.datas.x[0];let t=a.reduce(s,e,this._reduce_algorithm);for(const r of this._manager.preprocesses)t=r.apply(t,{dofit:!1});if(this.task==="DN")for(let r=0;r<t.length;r++)for(let i=0;i<t[r].length;i++)for(let o=0;o<t[r][i].length;o++)t[r][i][o]=Math.max(0,Math.min(255,t[r][i][o]+Math.floor(Math.random()*50-25)));const n=a.applySpace(t,this._color_space,this._normalize,this._binary_threshold);return this.__pred=n,this.__pred_x=t,this.__pred_step=e,n}testResult(e){if(!Array.isArray(e[0])){const s=[];for(let t=0;t<e.length;t+=this.__pred[0][0].length)s.push(e.slice(t,t+this.__pred[0][0].length));e=s}e=this._to2d(e,this.__pred_x,this.__pred_step),this._renderer.forEach(s=>s.testResult(e))}_to2d(e,s,t){const n=Array.from({length:s.length*t},()=>[]);for(let r=0,i=0,o=0;r<s.length;r++,i+=t)for(let _=0,p=0;_<s[r].length;_++,o++,p+=t)for(let h=0;h<t;h++)for(let l=0;l<t;l++)n[i+h][p+l]=e[o];return n}init(){this._renderer.forEach(e=>e.init()),this.render()}terminate(){this.setting.task.configElement.replaceChildren(),super.terminate()}}
