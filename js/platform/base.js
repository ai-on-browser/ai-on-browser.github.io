import FittingMode from"../fitting.js";import DataRenderer from"../renderer/plot.js";export class BasePlatform{constructor(t,e){this._manager=e,this._task=t,this._renderer=new DataRenderer(e)}get task(){return this._task}get setting(){return this._manager.setting}get svg(){return this._manager.setting.svg}get width(){return this._width||(this._width=d3.select("#plot-area svg").node().getBoundingClientRect().width),this._width}set width(t){d3.select("#plot-area").style("width",t-2+"px"),this._width=null}get height(){return this._height||(this._height=d3.select("#plot-area svg").node().getBoundingClientRect().height),this._height}set height(t){d3.select("#plot-area").style("height",t-2+"px"),this._height=null}get datas(){return this._manager._datas}get params(){return{}}set params(t){}init(){}terminate(){this._renderer.terminate()}}export class DefaultPlatform extends BasePlatform{constructor(t,e){super(t,e);const s=this.setting.task.configElement;"DR"!==this._task&&"FS"!==this._task||(s.append("span").text("Target dimension"),s.append("input").attr("type","number").attr("min",1).attr("max",2).attr("value",2).attr("name","dimension"))}get dimension(){const t=this.setting.task.configElement.select("[name=dimension]");return t.node()?+t.property("value"):null}fit(t){return this._cur_dimension!==this.setting.dimension&&this.init(),FittingMode[this._task](this._r_task,this.datas,t)}predict(t,e=10){const[s,i]=this._renderer.predict(e);"CF"!==this._task&&"RG"!==this._task||s.push(...this.datas.x),t(s,(t=>{if("AD"===this._task&&(t=t.map((t=>t?specialCategory.error:specialCategory.errorRate(0)))),"CF"===this._task||"RG"===this._task){const e=t.slice(s.length-this.datas.length),i=this.datas.y;if(t=t.slice(0,s.length-this.datas.length),"CF"===this._task){let t=0;for(let s=0;s<i.length;s++)i[s]===e[s]&&t++;this.setting.footer.text("Accuracy:"+t/i.length)}else if("RG"===this._task){let t=0;for(let s=0;s<i.length;s++)t+=(i[s]-e[s])**2;this.setting.footer.text("RMSE:"+Math.sqrt(t/i.length))}}i(t,this._r_tile)}))}evaluate(t){"CF"!==this._task&&"RG"!==this._task||t(this.datas.x,(t=>{const e=this.datas.y;if("CF"===this._task){let s=0;for(let i=0;i<e.length;i++)e[i]===t[i]&&s++;this.setting.footer.text("Accuracy:"+s/e.length)}else if("RG"===this._task){let s=0;for(let i=0;i<e.length;i++)s+=(e[i]-t[i])**2;this.setting.footer.text("RMSE:"+Math.sqrt(s/e.length))}}))}init(){this._r&&this._r.remove(),this._cur_dimension=this.setting.dimension;const t=1===this.datas?.dimension&&("RG"===this._task||"IN"===this._task);this._r=t?this.svg.append("g"):this.svg.insert("g",":first-child"),this._r.classed("default-render",!0),this._r_task=this._r.append("g").classed("tasked-render",!0),this._r_tile=this._r.append("g").classed("tile-render",!0).attr("opacity",t?1:.5),this.setting.footer.text(""),this.svg.select("g.centroids").remove(),this._renderer.init(),this.render()}render(){this._renderer.render()}centroids(t,e,{line:s=!1,duration:i=0}={}){let r=this.svg.select("g.centroids");0===r.size()&&(r=this.svg.append("g").classed("centroids",!0),r.append("g").classed("c-line",!0),this._centroids_line=[],this._centroids=null);const n=[];this._centroids&&this._centroids.forEach((t=>{Array.isArray(e)&&e.indexOf(t.category)<0?t.remove():n.push(t)}));const a=this._renderer.points;for(let t=0;t<a.length;t++)this._centroids_line[t]?._from===a[t]&&s||(this._centroids_line[t]?.remove(),this._centroids_line[t]=null);this._centroids=t.map(((t,i)=>{let a=Array.isArray(e)?n.find((t=>t.category===e[i])):n[i];if(a||(a=new DataPoint(r,t.map((t=>t/this.datas.scale)),Array.isArray(e)?e[i]:e),a.plotter(DataPointStarPlotter)),s){const t=this._renderer.points,s=this.datas.y;for(let n=0;n<t.length;n++)s[n]===e[i]&&(this._centroids_line[n]?this._centroids_line[n].to=a:this._centroids_line[n]=new DataLine(r.select(".c-line"),t[n],a))}return a})),Promise.resolve().then((()=>{this._centroids.forEach(((e,s)=>{e.move(t[s].map((t=>t/this.datas.scale)),i)}))}))}terminate(){this._r&&this._r.remove(),this.svg.select("g.centroids").remove(),this.svg.selectAll("g").style("visibility",null);this.setting.task.configElement.selectAll("*").remove(),this.setting.footer.text(""),super.terminate()}}