import ScatterRenderer from"../renderer/scatter.js";import{DataPointStarPlotter,specialCategory,DataPoint,DataLine}from"../utils.js";import TableRenderer from"../renderer/table.js";export class BasePlatform{constructor(t,e){this._manager=e,this._task=t,this._renderer=new ScatterRenderer(e)}get task(){return this._task}get setting(){return this._manager.setting}get svg(){return this._renderer.svg}get width(){return this._renderer.width}set width(t){this._renderer.width=t}get height(){return this._renderer.height}set height(t){this._renderer.height=t}get datas(){return this._manager._datas}get params(){return{}}set params(t){}get trainInput(){return null}get trainOutput(){return null}testInput(){return null}init(){}terminate(){this._renderer.terminate()}}export class DefaultPlatform extends BasePlatform{constructor(t,e){super(t,e),this._tablerenderer=new TableRenderer(e);const s=this.setting.task.configElement;if("DR"===this._task||"FS"===this._task){s.appendChild(document.createTextNode("Target dimension"));const t=document.createElement("input");t.type="number",t.min=1,t.max=2,t.value=2,t.name="dimension",s.appendChild(t)}}get dimension(){const t=this.setting.task.configElement.querySelector("[name=dimension]");return t?+t.value:null}get trainInput(){return this.datas.dimension>0?this.datas.x:this.datas.index.map(((t,e)=>[isNaN(t)?e:t]))}get trainOutput(){return this.datas.y.map((t=>[t]))}set trainResult(t){if("CT"===this._task)t.forEach(((t,e)=>{this.datas.y[e]=t})),this.render();else if("AD"===this._task)this._renderer.trainResult=t,this._tablerenderer.trainResult=t;else{if("DR"!==this._task&&"FS"!==this._task&&"TF"!==this._task&&"GR"!==this._task)throw new Error(`Invalid task ${this._task}`);this._renderer.trainResult=t}}testInput(t=10){const e=this._renderer.testData(t);return"CF"!==this._task&&"RG"!==this._task||e.push(...this.datas.dimension>0?this.datas.x:this.datas.index.map(((t,e)=>[isNaN(t)?e:t]))),e}testResult(t){if("AD"===this._task&&(t=t.map((t=>t?specialCategory.error:specialCategory.errorRate(0)))),"CF"===this._task||"RG"===this._task){const e=t.slice(t.length-this.datas.length),s=this.datas.y;if(t=t.slice(0,t.length-this.datas.length),"CF"===this._task){let t=0;for(let i=0;i<s.length;i++)s[i]===e[i]&&t++;this._getEvaluateElm().innerText="Accuracy:"+t/s.length}else if("RG"===this._task){let t=0;for(let i=0;i<s.length;i++)t+=(s[i]-e[i])**2;this._getEvaluateElm().innerText="RMSE:"+Math.sqrt(t/s.length)}this._tablerenderer.trainResult=e}this._renderer.testResult(t)}evaluate(t){"CF"!==this._task&&"RG"!==this._task||t(this.datas.x,(t=>{const e=this.datas.y;if("CF"===this._task){let s=0;for(let i=0;i<e.length;i++)e[i]===t[i]&&s++;this._getEvaluateElm().innerText="Accuracy:"+s/e.length}else if("RG"===this._task){let s=0;for(let i=0;i<e.length;i++)s+=(e[i]-t[i])**2;this._getEvaluateElm().innerText="RMSE:"+Math.sqrt(s/e.length)}}))}init(){this._cur_dimension=this.setting.dimension,this.setting.footer.innerText="",this.svg.select("g.centroids").remove(),this._renderer.init(),this._tablerenderer.init(),this.render(),this._loss&&(this._loss.terminate(),this._loss=null,this.setting.footer.replaceChildren())}render(){this._renderer.render(),this._tablerenderer.render()}centroids(t,e,{line:s=!1,duration:i=0}={}){let r=this.svg.select("g.centroids");0===r.size()&&(r=this.svg.append("g").classed("centroids",!0),r.append("g").classed("c-line",!0),this._centroids_line=[],this._centroids=null);const n=[];this._centroids&&this._centroids.forEach((t=>{Array.isArray(e)&&e.indexOf(t.category)<0?t.remove():n.push(t)}));const a=this._renderer.points;for(let t=0;t<a.length;t++)this._centroids_line[t]?._from===a[t]&&s||(this._centroids_line[t]?.remove(),this._centroids_line[t]=null);this._centroids=t.map(((t,i)=>{let a=Array.isArray(e)?n.find((t=>t.category===e[i])):n[i];if(a||(a=new DataPoint(r,this._renderer.toPoint(t),Array.isArray(e)?e[i]:e),a.plotter(DataPointStarPlotter)),s){const t=this._renderer.points,s=this.datas.y;for(let n=0;n<t.length;n++)s[n]===e[i]&&(this._centroids_line[n]?this._centroids_line[n].to=a:this._centroids_line[n]=new DataLine(r.select(".c-line"),t[n],a))}return a})),Promise.resolve().then((()=>{this._centroids.forEach(((e,s)=>{e.move(this._renderer.toPoint(t[s]),i)}))}))}_getEvaluateElm(){if(this._loss){const t=this.setting.footer.querySelector("div.evaluate_result");if(!t){const t=document.createElement("div");return t.classList.add("evaluate_result"),this.setting.footer.insertBefore(t,this.setting.footer.firstChild),t}return t}return this.setting.footer}plotLoss(t){if(!this._loss){const t=this.setting.footer.innerText;this.setting.footer.innerText="",this._loss=new LossPlotter(this,this.setting.footer),this._getEvaluateElm().innerText=t}this._loss.add(t)}terminate(){this.setting.task.configElement.replaceChildren(),this.setting.footer.innerText="",super.terminate(),this._tablerenderer.terminate()}}export class LossPlotter{constructor(t,e){this._platform=t,this._r=e,this._item=null}add(t){if(!this._item)if("object"==typeof t){this._item={};for(const e of Object.keys(t))this._item[e]=new LossPlotterItem(this._platform,this._r),this._item[e].name=e}else this._item=new LossPlotterItem(this._platform,this._r);if("object"==typeof t)for(const e of Object.keys(t))this._item[e].add(t[e]);else this._item.add(t)}terminate(){if(this._item instanceof LossPlotterItem)this._item.terminate();else for(const t of Object.keys(this._item))this._item[t].terminate()}}class LossPlotterItem{constructor(t,e){this._platform=t,this._root=document.createElement("span"),e.appendChild(this._root),this._caption=document.createElement("div"),this._caption.innerText="loss",this._root.appendChild(this._caption);const s=document.createElement("span");s.style.display="inline-flex",s.style.alignItems="flex-start",this._root.appendChild(s);const i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("width",200),i.setAttribute("height",50),s.appendChild(i),s.appendChild(document.createTextNode("scale:")),this._scale=document.createElement("select");for(const t of["linear","log"]){const e=document.createElement("option");e.value=t,e.innerText=t,this._scale.appendChild(e)}this._scale.onchange=()=>this.plotRewards(),s.appendChild(this._scale),this._stats=document.createElement("span"),this._stats.style.display="inline-flex",this._stats.style.flexDirection="column",this._stats.style.fontSize="80%",s.appendChild(this._stats);for(const t of["max","ave","min"]){const e=document.createElement("span");e.classList.add(t+"txt"),this._stats.append(e)}this._plot_count=1e4,this._print_count=10,this._plot_smooth_window=20,this._history=[]}set name(t){this._caption.innerText=t}add(t){this._history.push(t),this.plotRewards()}terminate(){this._root.remove()}lastHistory(t=0){if(t<=0)return this._history;const e=this._history.length;return this._history.slice(Math.max(0,e-t),e)}plotRewards(){const t=this._root.querySelector("svg"),e=t.width.baseVal.value,s=t.height.baseVal.value;let i=null,r=null;const n=this._stats.querySelector(".mintxt"),a=this._stats.querySelector(".maxtxt"),o=this._stats.querySelector(".avetxt");0===t.childNodes.length?(i=document.createElementNS("http://www.w3.org/2000/svg","path"),i.setAttribute("name","value"),i.setAttribute("stroke","black"),i.setAttribute("fill-opacity",0),t.appendChild(i),r=document.createElementNS("http://www.w3.org/2000/svg","path"),r.setAttribute("name","smooth"),r.setAttribute("stroke","green"),r.setAttribute("fill-opacity",0),t.appendChild(r)):(i=t.querySelector("path[name=value]"),r=t.querySelector("path[name=smooth]"));const h=this.lastHistory(this._plot_count);if(0===h.length)return t.style.display="none",i.removeAttribute("d"),void r.removeAttribute("d");t.style.display=null;const l=Math.max(...h),d=Math.min(...h),_=t=>{if("number"!=typeof t)return t;const e=3-Math.floor(Math.log10(Math.abs(t)));return Math.round(t*10**e)/10**e};if(n.innerText=`Min: ${_(d)}`,a.innerText=`Max: ${_(l)}`,l===d)return;const c=(t,i)=>"log"===this._scale.value?[e*t/(h.length-1),(1-(Math.log(i)-Math.log(d))/(Math.log(l)-Math.log(d)))*s]:[e*t/(h.length-1),(1-(i-d)/(l-d))*s],m=h.map(((t,e)=>c(e,t))),u=t=>{let e="";for(let s=0;s<t.length;s++)e+=`${0===s?"M":"L"}${t[s][0]},${t[s][1]}`;return e};i.setAttribute("d",u(m));const p=[];for(let t=0;t<h.length-this._plot_smooth_window;t++){let e=0;for(let s=0;s<this._plot_smooth_window;s++)e+=h[t+s];p.push([t+this._plot_smooth_window,e/this._plot_smooth_window])}p.length>0&&(r.setAttribute("d",u(p.map((t=>c(...t))))),o.innerText=`Mean(${this._plot_smooth_window}): ${_(p[p.length-1]?.[1])}`)}}