import LineRenderer from"../renderer/line.js";import{BasePlatform}from"./base.js";import LinePlotter from"../renderer/util/lineplot.js";export default class SeriesPlatform extends BasePlatform{constructor(e){super(e),this._renderer.forEach((e=>e.terminate())),this._renderer=[new LineRenderer(e)]}get trainInput(){const e=this.datas.dimension>0?this.datas.x:this.datas.y.map((e=>[e]));return e.rolling||Object.defineProperty(e,"rolling",{value:t=>{const r=[];for(let s=0;s<e.length-t+1;s++)r.push([].concat(...e.slice(s,s+t)));return r}}),e}get trainOutput(){return this.datas.y}set trainResult(e){this._renderer.forEach((t=>t.testResult(e))),this.render()}set threshold(e){this._renderer.forEach((t=>t.updateThreshold(e)))}init(){this._loss&&(this._loss.terminate(),this._loss=null),this._renderer.forEach((e=>e.init())),this.datas&&(this.datas.clip=!1,this._renderer.forEach((e=>e._pred_count=0)),this.render())}render(){this.datas&&this._renderer.forEach((e=>e.render()))}resetPredicts(){this._renderer.forEach((e=>e.resetPredicts()))}plotLoss(e){this._loss||(this._loss=new LinePlotter(this.setting.footer)),this._loss.add(e)}terminate(){this.datas&&(this.datas.clip=!0),this._loss&&this._loss.terminate(),super.terminate()}}