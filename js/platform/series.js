var o=Object.defineProperty;var s=(i,e)=>o(i,"name",{value:e,configurable:!0});import n from"../renderer/line.js";import{BasePlatform as h}from"./base.js";import d from"../renderer/util/lineplot.js";export default class l extends h{static{s(this,"SeriesPlatform")}constructor(e){super(e),this._renderer.forEach(r=>r.terminate()),this._renderer=[new n(e)]}get trainInput(){let e=this.datas.dimension>0?this.datas.x:this.datas.y.map(r=>[r]);for(const r of this._manager.preprocesses)e=r.apply(e,{dofit:!0});return e.rolling||Object.defineProperty(e,"rolling",{value:s(r=>{const a=[];for(let t=0;t<e.length-r+1;t++)a.push([].concat(...e.slice(t,t+r)));return a},"value")}),e}get trainOutput(){return this.datas.y}set trainResult(e){this._renderer.forEach(r=>r.testResult(e)),this.render()}set threshold(e){this._renderer.forEach(r=>r.updateThreshold(e))}init(){this._loss&&(this._loss.terminate(),this._loss=null),this._renderer.forEach(e=>e.init()),this.datas&&(this.datas.clip=!1,this._renderer.forEach(e=>e._pred_count=0),this.render())}render(){this.datas&&this._renderer.forEach(e=>e.render())}invertScale(e){for(const r of this._manager.preprocesses)r.inverse&&(Array.isArray(e[0])?e=r.inverse(e):e=r.inverse([e])[0]);return e}resetPredicts(){this._renderer.forEach(e=>e.resetPredicts())}plotLoss(e){this._loss||(this._loss=new d(this.setting.footer)),this._loss.add(e)}terminate(){this.datas&&(this.datas.clip=!0),this._loss&&this._loss.terminate(),super.terminate()}}
