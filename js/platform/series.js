var o=Object.defineProperty;var a=(s,t)=>o(s,"name",{value:t,configurable:!0});import n from"../renderer/line.js";import{BasePlatform as h}from"./base.js";import d from"../renderer/util/lineplot.js";export default class l extends h{static{a(this,"SeriesPlatform")}constructor(t){super(t),this._renderer.forEach(e=>e.terminate()),this._renderer=[new n(t)]}get trainInput(){let t=this.datas.dimension>0?this.datas.x:this.datas.y.map(e=>[e]);for(const e of this._manager.preprocesses)t=e.apply(t,{dofit:!0});return t.rolling||Object.defineProperty(t,"rolling",{value:e=>{const i=[];for(let r=0;r<t.length-e+1;r++)i.push([].concat(...t.slice(r,r+e)));return i}}),t}get trainOutput(){return this.datas.y}set trainResult(t){this._renderer.forEach(e=>e.testResult(t)),this.render()}set threshold(t){this._renderer.forEach(e=>e.updateThreshold(t))}init(){this._loss&&(this._loss.terminate(),this._loss=null),this._renderer.forEach(t=>t.init()),this.datas&&(this.datas.clip=!1,this._renderer.forEach(t=>t._pred_count=0),this.render())}render(){this.datas&&this._renderer.forEach(t=>t.render())}resetPredicts(){this._renderer.forEach(t=>t.resetPredicts())}plotLoss(t){this._loss||(this._loss=new d(this.setting.footer)),this._loss.add(t)}terminate(){this.datas&&(this.datas.clip=!0),this._loss&&this._loss.terminate(),super.terminate()}}
