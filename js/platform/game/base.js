const Players=["manual","random","greedy","minmax","alphabeta"],loadedPlayer={};export default class GameManager{constructor(t){this._platform=t,this._env=t.env,this._game=null;const e=t.setting.task.configElement;this._r=e.append("div"),this._r.append("span").text("Play");const s=[];for(let t=0;t<2;t++){const t=this._r.append("select").on("change",(()=>{e.style("display",["minmax","alphabeta"].indexOf(t.property("value"))>=0?null:"none")}));t.selectAll("option").data(Players).enter().append("option").property("value",(t=>t)).text((t=>t)),t.property("value","greedy");const e=this._r.append("input").attr("type","number").attr("min",1).attr("max",10).attr("value",5).style("display","none");s.push({get name(){return t.property("value")},get params(){return[e.property("value")]}})}this._r.append("input").attr("type","button").attr("value","Play").on("click",(()=>{this._loadPlayer(s,(t=>{this.start(t)}))})),this._r.append("input").attr("type","button").attr("value","Reset").on("click",(()=>{this.reset()}))}_loadPlayer(t,e){Promise.all(t.map((t=>"manual"===t.name?null:loadedPlayer[t.name]?new loadedPlayer[t.name](...t.params):new Promise((e=>{import(`./${t.name}.js`).then((s=>{loadedPlayer[t.name]=s.default,e(new loadedPlayer[t.name](...t.params))}))}))))).then(e)}terminate(){this._r&&this._r.remove(),this._game&&this._game.close()}start(t){this._r.selectAll("input[type=button]").property("disabled",!0),this._game=this._env.game(...t),this._game.start().then((()=>{this._r.selectAll("input[type=button]").property("disabled",!1)}))}reset(){this._game&&(this._game.close(),this._game=null),this._platform.reset(),this._platform.render()}}export class Game{constructor(t){this._players=[],this._env=t,this._board=null,this._turn=null,this._active=!1,this._resultElm=null}get board(){return this._board}get active(){return this._active}set players(t){this._players=t}close(){this._players.forEach((t=>t.close())),this._resultElm&&(this._resultElm.remove(),this._resultElm=null)}_showResult(t){}async start(){for(this._resultElm&&(this._resultElm.remove(),this._resultElm=null),this._env._platform.render(),this._active=!0,this._turn=this.turns[0];!this._board.finish;){if(this._board.choices(this._turn).length>0){for(;;){const t=this.turns.indexOf(this._turn),e=await new Promise((e=>this._players[t].action(this._board,e)));if(this._board.set(e,this._turn))break}this._env._platform.render(),await new Promise((t=>setTimeout(t,0)))}this._turn=this._board.nextTurn(this._turn)}this._active=!1,this._resultElm=this._env._platform.svg.append("g");const t=this._env._platform.width,e=this._env._platform.height;this._resultElm.append("rect").attr("x",t/4).attr("y",e/4).attr("width",t/2).attr("height",e/2).attr("opacity",.8).attr("fill","white");const s=this._resultElm.append("g").style("transform","scale(1, -1) translate(0, -100%)").append("text").attr("transform",`translate(${t/3}, ${e/2})`);this._showResult(s),this._resultElm.on("click",(()=>{this._resultElm.remove(),this._resultElm=null}))}}