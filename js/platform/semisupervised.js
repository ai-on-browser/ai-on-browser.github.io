import{DefaultPlatform}from"./base.js";import LinePlotter from"../renderer/util/lineplot.js";export default class SemisupervisedPlatform extends DefaultPlatform{constructor(t,e){super(t,e);const s=this.setting.task.configElement,i=document.createElement("div");i.innerText="Unlabeled data category is '0' (black).",s.appendChild(i),s.appendChild(document.createTextNode("Unlabeled Rate"));const n=document.createElement("input");n.type="number",n.min=0,n.max=1,n.step=.1,n.value=.9,n.name="unlabeled-rate",n.onchange=()=>{if(this.datas&&this._original_classes)for(let t=0;t<this._original_classes.length;t++)this.datas.y[t]=this._original_classes[t];this._original_classes=null,this.init()},s.appendChild(n)}get trainInput(){return this.datas.x}get trainOutput(){return this.datas.y.map((t=>[t]))}set trainResult(t){this._renderer.forEach((e=>e.trainResult=t))}testInput(t=10){const e=this._renderer[0].testData(t);return e.push(...this.datas.x),e}testResult(t){const e=t.slice(t.length-this.datas.length),s=this.datas.y;t=t.slice(0,t.length-this.datas.length);let i=0;for(let t=0;t<s.length;t++)s[t]===e[t]&&i++;this._getEvaluateElm().innerText="Accuracy:"+i/s.length,this._renderer[0].testResult(t)}init(){this.setting.footer.innerText="";const t=+this.setting.task.configElement.querySelector("[name=unlabeled-rate]").value;if(t>0&&!this._original_classes){this._original_classes=this.datas.y.concat();const e={};for(let t=0;t<this.datas.length;t++)e[this._original_classes[t]]||(e[this._original_classes[t]]=[]),e[this._original_classes[t]].push(t);for(const s of Object.keys(e)){let i=Math.floor(e[s].length*t);for(;i>0;){const t=Math.floor(Math.random()*e[s].length);this.datas.y[e[s][t]]=null,e[s].splice(t,1),i--}}}this._renderer.forEach((t=>t.init())),this.render(),this._loss&&(this._loss.terminate(),this._loss=null,this.setting.footer.replaceChildren())}_getEvaluateElm(){if(this._loss){const t=this.setting.footer.querySelector("div.evaluate_result");if(!t){const t=document.createElement("div");return t.classList.add("evaluate_result"),this.setting.footer.insertBefore(t,this.setting.footer.firstChild),t}return t}return this.setting.footer}plotLoss(t){if(!this._loss){const t=this.setting.footer.innerText;this.setting.footer.innerText="",this._loss=new LinePlotter(this.setting.footer),this._getEvaluateElm().innerText=t}this._loss.add(t)}terminate(){if(this.datas&&this._original_classes)for(let t=0;t<this._original_classes.length;t++)this.datas.y[t]=this._original_classes[t];this.setting.task.configElement.replaceChildren(),this.setting.footer.innerText="",super.terminate()}}