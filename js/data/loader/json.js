var r=Object.defineProperty;var c=(l,s)=>r(l,"name",{value:s,configurable:!0});export default class h{static{c(this,"JSONLoader")}constructor(s,{columnInfos:f}={}){this._json=s,this._columnInfos=f;const o=[];if(this._columnInfos)for(let t=0;t<this._columnInfos.length;t++)o[t]=this._columnInfos[t].name;this._data=[];const a=[];for(let t=0;t<this._json.length;t++){const e=[];for(const n of Object.keys(this._json[t])){let i=o.indexOf(n);i<0&&(o.push(n),i=o.length-1,a[i]=!1),e[i]=this._json[t][n],a[i]||=isNaN(e[i])}if(this._columnInfos)for(let n=0;n<this._columnInfos.length;n++)e[n]==null&&typeof this._columnInfos[n].nan=="number"&&(e[n]=this._columnInfos[n].nan);this._data[t]=e}this._info=o.map((t,e)=>({name:t,type:a[e]?"category":"numeric"})),this._info[this._info.length-1].out=!0}get json(){return this._json}get data(){return this._data}get info(){return this._info}static async load(s,f){if(s instanceof File)return new Promise(a=>{const t=new FileReader;t.onload=()=>{a(new h(JSON.parse(t.result),f))},t.readAsText(s)});const o=await fetch(s);return new h(await o.json(),f)}}
