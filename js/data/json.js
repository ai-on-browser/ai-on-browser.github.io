import{FixData}from"./base.js";class JSONLoader{constructor(t){this._data=t}get data(){return this._data}async load(t){if(t instanceof File)return void await new Promise((a=>{const e=new FileReader;e.onload=()=>{this._data=JSON.parse(e.result),a()},e.readAsText(t)}));const a=await fetch(t);this._data=await a.json()}}export default class JSONData extends FixData{constructor(t,a,e){super(t),a&&e&&this.setJSON(a,e)}readJSON(t,a){const e=new JSONLoader(null);e.load(t).then((()=>a(e.data)))}setJSON(t,a){if(!Array.isArray(t))return void this.readJSON(t,(t=>{this.setJSON(t,a)}));const e=[];if(a)for(let t=0;t<a.length;t++)e[t]=a[t].name;const s=[],r=[];for(let a=0;a<t.length;a++){const n=[];for(const s of Object.keys(t[a])){let o=e.indexOf(s);o<0&&(e.push(s),o=e.length-1,r[o]=!1),n[o]=t[a][s],r[o]||=isNaN(n[o])}s[a]=n}a||((a=e.map(((t,a)=>({name:t,type:r[a]?"category":"numeric"}))))[a.length-1].out=!0),this.setArray(s,a)}}