import{FixData}from"./base.js";class JSONLoader{constructor(t){this._data=t}get data(){return this._data}async load(t){if(t instanceof File)return void await new Promise((e=>{const a=new FileReader;a.onload=()=>{this._data=JSON.parse(a.result),e()},a.readAsText(t)}));const e=await fetch(t);this._data=await e.json()}}export default class JSONData extends FixData{constructor(t,e,a){super(t),e&&a&&this.setJSON(e,a)}async readJSON(t){return new Promise((e=>{const a=new JSONLoader(null);a.load(t).then((()=>e(a.data)))}))}setJSON(t,e){if(!Array.isArray(t))return void this.readJSON(t).then((t=>{this.setJSON(t,e)}));const a=[];if(e)for(let t=0;t<e.length;t++)a[t]=e[t].name;const n=[],s=[];for(let r=0;r<t.length;r++){const o=[];for(const e of Object.keys(t[r])){let n=a.indexOf(e);n<0&&(a.push(e),n=a.length-1,s[n]=!1),o[n]=t[r][e],s[n]||=isNaN(o[n])}if(e)for(let t=0;t<e.length;t++)null==o[t]&&"number"==typeof e[t].nan&&(o[t]=e[t].nan);n[r]=o}e||((e=a.map(((t,e)=>({name:t,type:s[e]?"category":"numeric"}))))[e.length-1].out=!0),this.setArray(n,e)}}