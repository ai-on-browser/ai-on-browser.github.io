var u=Object.defineProperty;var i=(c,t)=>u(c,"name",{value:t,configurable:!0});import"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.min.js";import"https://cdnjs.cloudflare.com/ajax/libs/encoding-japanese/2.0.0/encoding.min.js";import{BaseData as l}from"./base.js";pdfjsLib.GlobalWorkerOptions.workerSrc="https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.worker.min.js";export default class m extends l{static{i(this,"DocumentData")}constructor(t){super(t)}async readDocument(t){return new Promise(r=>{const e=new FileReader;e.readAsArrayBuffer(t),e.onload=()=>{if(t.type==="application/pdf")pdfjsLib.getDocument({data:e.result,cMapUrl:"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/cmaps/",cMapPacked:!0}).promise.then(async n=>{const s=n.numPages;let o="";for(let a=1;a<=s;a++){const p=await(await n.getPage(a)).getTextContent();o+=p.items.map(d=>d.str).join("")}r(o)});else{const n=new Uint8Array(e.result),s=Encoding.detect(n),o=Encoding.convert(n,{to:"unicode",from:s,type:"string"});r(o)}}})}segment(t){return t.split(/[ -@\[-`{-~\s]+/)}ordinal(t,{ignoreCase:r=!0}={}){const e=[],n=[];for(const s of t){const o=e.indexOf(r?s.toLowerCase():s);o<0?(e.push(r?s.toLowerCase():s),n.push(e.length-1)):n.push(o)}return[e,n]}}
