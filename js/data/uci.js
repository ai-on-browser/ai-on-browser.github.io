var f=Object.defineProperty;var h=(n,e)=>f(n,"name",{value:e,configurable:!0});import{FixData as p}from"./base.js";import l from"./loader/csv.js";const m={iris:{file:"/js/data/csv/iris.data.gz",info:[{name:"sepal length (cm)",type:"numeric"},{name:"sepal width (cm)",type:"numeric"},{name:"petal length (cm)",type:"numeric"},{name:"petal width (cm)",type:"numeric"},{name:"class",type:"category",out:!0}]},"wine quality":{file:"/js/data/csv/winequality-red.csv.gz",info:["fixed acidity","volatile acidity","citric acid","residual sugar","chlorides","free sulfur dioxide","total sulfur dioxide","density","pH","sulphates","alcohol","quality"].map((n,e)=>({name:n,type:"numeric",out:e===11}))},zoo:{file:"/js/data/csv/zoo.data.gz",info:["animal name","hair","feathers","eggs","milk","airborne","aquatic","predator","toothed","backbone","breathes","venomous","fins","legs","tail","domestic","catsize","type"].map((n,e)=>({name:n,type:"numeric",out:e===17,ignore:e===0}))}};export default class y extends p{static{h(this,"UCIData")}constructor(e){super(e),this._name="iris";const c=this.setting.data.configElement,t=document.createElement("div");t.style.display="flex",t.style.justifyContent="space-between",c.appendChild(t);const s=document.createElement("span");t.appendChild(s);const a=document.createElement("select");a.name="name",a.onchange=()=>{this._name=a.value;const i=m[this._name];l.load(i.file).then(r=>{u===this._name&&this.setArray(r.data,i.info)}),this.setting.pushHistory()};for(const i of Object.keys(m)){const r=document.createElement("option");r.value=r.innerText=i,a.appendChild(r)}s.append("Name",a);const o=document.createElement("a");t.appendChild(o),o.href="http://archive.ics.uci.edu/ml",o.setAttribute("ref","noreferrer noopener"),o.target="_blank",o.innerText="UCI Machine Learning Repository";const d=m[this._name],u=this._name;l.load(d.file).then(i=>{u===this._name&&this.setArray(i.data,d.info)})}get availTask(){return["CF","RG","AD","DR","FS"]}get params(){return{dataname:this._name}}set params(e){if(e.dataname&&Object.keys(m).includes(e.dataname)){const c=this.setting.data.configElement,t=this._name=e.dataname;c.querySelector("[name=name]").value=e.dataname;const s=m[this._name];l.load(s.file).then(a=>{t===this._name&&this.setArray(a.data,s.info)})}}}
