import{FixData}from"./base.js";class CSV{constructor(t){this._data=t}get data(){return this._data}static async load(t,e){let a;a=t instanceof File?await new Promise((e=>{const a=new FileReader;a.onload=()=>{e(a.result)},a.readAsText(t)})):await CSV._fetch(t,e);const s=await this.loadFromString(a,e);return new CSV(s)}static async loadFromString(t,e){const a=e?.delimiter||",",s=[];let n=[],r=!1,i="";for(let e=0;e<t.length;e++)r?'"'===t[e]&&'"'===t[e+1]?(i+='"',e++):'"'===t[e]?r=!1:i+=t[e]:'"'===t[e]?r=!0:t.startsWith(a,e)?(n.push(i),i=""):"\n"===t[e]||"\r"===t[e]?((i.length>0||n.length>0)&&(n.push(i),s.push(n),i="",n=[]),"\r"===t[e]&&"\n"===t[e+1]&&e++):i+=t[e];return(i.length>0||n.length>0)&&(n.push(i),s.push(n)),s}static async _fetch(t,e){const a=(await fetch(t)).body.getReader();let{value:s,done:n}=await a.read();if(s&&t.endsWith(".gz")){let t=s;for(;!n;)if(({value:s,done:n}=await a.read()),s){const e=new Uint8Array(t.length+s.length);e.set(t),e.set(s,t.length),t=e}s=pako.ungzip(t)}const r=new TextDecoder(e?.encoding||"utf-8");for(s=s?r.decode(s):"";!n;){const t=s;({value:s,done:n}=await a.read()),s=t+(s?r.decode(s):"")}return s}}export default class CSVData extends FixData{constructor(t,e,a){super(t),e&&a&&this.setCSV(e,a)}async readCSV(t,e){return(await CSV.load(t,e)).data}setCSV(t,e,a=!1){if(Array.isArray(t)){if(a){const a=t[0];t=t.slice(1),e||((e=a.map(((e,a)=>({name:e,type:t.some((t=>isNaN(t[a])))?"category":"numeric"}))))[e.length-1].out=!0)}this.setArray(t,e)}else this.readCSV(t).then((t=>{this.setCSV(t,e,a)}))}}