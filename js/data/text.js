var y=Object.defineProperty;var p=(h,e)=>y(h,"name",{value:e,configurable:!0});import x from"./db/base.js";import{BaseData as E}from"./base.js";import u from"./loader/document.js";export default class v extends E{static{p(this,"TextData")}constructor(e){super(e);const c=this.setting.data.configElement,s=document.createElement("div");s.style.width="100%",s.style.display="inline-flex",s.style.justifyContent="space-between",c.appendChild(s);const r=document.createElement("div");s.appendChild(r),r.append("Preset");const l=document.createElement("select");for(const g of["Wikipedia"]){const w=document.createElement("option");w.value=w.innerText=g,l.appendChild(w)}r.appendChild(l);const d=document.createElement("span");r.appendChild(d);const i=document.createElement("span");d.appendChild(i);const t=document.createElement("input");t.value="Artificial intelligence",t.onchange=async()=>{o.value=await n.getText(t.value),this._x=[u.segment(o.value)],this.setting.pushHistory()},i.append("Title",t);const a=document.createElement("input");a.type="button",a.value="Random",a.onclick=async()=>{a.disabled=!0,t.value=await n.getRandom(),o.value=await n.getText(t.value),this._x=[u.segment(o.value)],a.disabled=!1},i.appendChild(a);const m=document.createElement("a");s.appendChild(m),m.href="https://en.wikipedia.org/",m.setAttribute("ref","noreferrer noopener"),m.target="_blank",m.innerText="Wikipedia";const o=document.createElement("textarea");o.cols=70,o.rows=15,o.classList.add("data-upload"),o.value="",o.onchange=()=>{this._x=[u.segment(o.value)],this._y=[0]},c.appendChild(o),this._x=[u.segment(o.value)],this._y=[0],n.getText(t.value).then(g=>{o.value=g,this._x=[u.segment(o.value)]})}get availTask(){return["WE"]}}class n{static{p(this,"WikipediaPreset")}static BASE_URL="https://en.wikipedia.org/w/api.php";static ExpiredTime=1e3*60*60*24*30;static RandomDataExpiredTime=1e3*60*60*24;static lockKeys={};static async getRandom(){const e=new f,c=await e.list("random");for(;c.length>0;){const a=c.shift();if(await e.delete("random",a.id),new Date-a.fetchDate<n.RandomDataExpiredTime)return a.title}const s={origin:"*",format:"json",action:"query",list:"random",rnlimit:"10",rnnamespace:"0"},r=`${n.BASE_URL}?${new URLSearchParams(s)}`;console.debug(`Fetch to ${r}`),await new Promise(a=>setTimeout(a,100));const d=await(await fetch(r)).json(),i=d.query.random[0].title,t=d.query.random.slice(1);for(let a=0;a<t.length;a++)t[a].fetchDate=new Date;return await e.save("random",t),i}static async getData(e){const c={origin:"*",format:"json",action:"query",titles:e,prop:"extracts",explaintext:!0,exsectionformat:"plain"},s=new f,r=await s.get("data",e);if(!r||new Date-r.fetchDate>n.ExpiredTime){if(n.lockKeys[e])return new Promise(t=>{n.lockKeys[e]?n.lockKeys[e].push(t):t(s.get("data",e))});const l=`${n.BASE_URL}?${new URLSearchParams(c)}`;console.debug(`Fetch to ${l}`),n.lockKeys[e]=[],await new Promise(t=>setTimeout(t,200));const i=await(await fetch(l)).json();i.title=e,i.fetchDate=new Date,await s.save("data",i);for(const t of n.lockKeys[e])t(i);return n.lockKeys[e]=void 0,i}return r}static async getText(e){const s=(await n.getData(e)).query.pages;return s[Object.keys(s)[0]].extract}}class f extends x{static{p(this,"WikipediaDB")}constructor(){super("en.wikipedia.org",1)}onupgradeneeded(e){const c=e.target.result;c.createObjectStore("data",{keyPath:"title"}),c.createObjectStore("random",{keyPath:"id"})}}
