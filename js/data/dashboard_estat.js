import JSONData from"./json.js";const BASE_URL="https://dashboard.e-stat.go.jp/api/1.0",ExpiredTime=2592e6,datasetInfos={"Nikkei Indexes":{indicatorCode:["0702020501000010010"],caption:"Nikkei Indexes",columnKeys:["Indicator"],indexKeys:["Time axis"],availTask:["SM","TP","CP"]}},lockKeys={};export default class EStatData extends JSONData{constructor(t){super(t),this._name="Nikkei Indexes",this._columns=[],this._availTask=[];const e=this.setting.data.configElement,a=e.append("div").style("display","flex").style("justify-content","space-between");a.append("span").text("Name").append("select").attr("name","name").on("change",(()=>{this._name=e.select("[name=name]").property("value"),this._readyData(),this.setting.vue.pushHistory()})).selectAll("option").data(Object.keys(datasetInfos)).enter().append("option").attr("value",(t=>t)).text((t=>datasetInfos[t].caption||t)),a.append("span").append("a").attr("href","https://dashboard.e-stat.go.jp/en/").attr("ref","noreferrer noopener").attr("target","_blank").text("Statistics Dashboard"),e.append("span").text("This service uses the API feature of Statistics Dashboard, but the contents of this service are not guaranteed by the Statistics Bureau of Japan.").style("font-size","80%"),this._outSelector=e.append("div"),this._readyData()}get availTask(){return this._availTask}get columnNames(){if(this._target>=0){const t=this._columns.concat();return t.splice(this._target,1),t}return this._columns}get x(){return this._target>=0?this._x.map((t=>{const e=t.concat();return e.splice(this._target,1),e})):this._x}get y(){return this._target>=0?this._x.map((t=>t[this._target])):Array(this._x.length).fill(0)}get params(){return{dataname:this._name}}set params(t){if(t.dataname&&Object.keys(datasetInfos).indexOf(t.dataname)>=0){const e=this.setting.data.configElement;this._name=t.dataname,e.select("[name=name]").property("value",t.dataname),this._readyData()}}async _getData(t){const e={Lang:"EN",IndicatorCode:t,IsSeasonalAdjustment:1,MetaGetFlg:"Y"},a=new EStatDB,s=await a.get("data",t);if(!s||new Date-s.fetchDate>2592e6){const s=t.join(",");if(lockKeys[s])return new Promise((t=>lockKeys[s].push(t)));const n=`${BASE_URL}/Json/getData?${new URLSearchParams(e)}`;console.debug(`Fetch to ${n}`),lockKeys[s]=[];const o=await fetch(n),r=await o.json();r.fetchDate=new Date,await a.save("data",r);for(const t of lockKeys[s])t(r);return lockKeys[s]=void 0,r}return s}async _readyData(){const t=datasetInfos[this._name];this._availTask=t.availTask,this._outSelector.selectAll("*").remove();const e=await this._getData(t.indicatorCode),a=e.GET_STATS.STATISTICAL_DATA.DATA_INF.DATA_OBJ,s=e.GET_STATS.STATISTICAL_DATA.CLASS_INF.CLASS_OBJ,n=t.columnKeys.map((t=>s.find((e=>e["@name"]===t)))),o=t.indexKeys.map((t=>s.find((e=>e["@name"]===t)))),r={},i=[];for(let t=0;t<a.length;t++){const e=a[t].VALUE,s=o.map((t=>e[`@${t["@id"]}`])).join("_"),c=n.map((t=>{const a=e[`@${t["@id"]}`];for(const e of t.CLASS)if(e["@code"]===a)return e.$||e["@name"]})).join("_");r[s]||(r[s]={}),r[s][c]=e.$,i.indexOf(c)<0&&i.push(c)}this._columns=i,this._target=1===i.length?-1:this._columns.length-1;const c=Object.keys(r);if(c.sort(),this.setJSON(c.map((t=>r[t])),i.map((t=>({name:t})))),i.length>1){const t=this._outSelector.append("span").text("Output").append("select").attr("name","target").on("change",(()=>{const t=this._outSelector.select("[name=target]").property("value");this._target=this._columns.indexOf(t),this._domain=null,this._manager.onReady((()=>{this._manager.platform.init()}))}));t.selectAll("option").data(["",...this._columns]).enter().append("option").attr("value",(t=>t)).text((t=>t)),t.property("value",this._columns[this._target])}this.setting.ml.refresh(),this.setting.vue.$forceUpdate()}}const DB_NAME="dashboard.e-stat.go.jp";class EStatDB{constructor(){this.db=null}async _ready(){if(this.db)return;const t=indexedDB.open(DB_NAME,1);return new Promise(((e,a)=>{t.onerror=a,t.onsuccess=()=>{this.db=t.result,e()},t.onupgradeneeded=t=>{t.target.result.createObjectStore("data",{keyPath:"GET_STATS.PARAMETER.indicatorCode"})}}))}async save(t,e){return await this._ready(),new Promise(((a,s)=>{const n=this.db.transaction([t],"readwrite"),o=n.objectStore(t);Array.isArray(e)||(e=[e]);for(const t of e)o.put(t);n.oncomplete=a,n.onerror=s}))}async get(t,e){return await this._ready(),new Promise(((a,s)=>{const n=this.db.transaction(t).objectStore(t).get(e);n.onsuccess=t=>{a(t.target.result)},n.onerror=s}))}async list(t){return await this._ready(),new Promise(((e,a)=>{const s=this.db.transaction(t).objectStore(t).getAll();s.onsuccess=t=>{e(t.target.result)},s.onerror=a}))}async deleteDatabase(){return new Promise(((t,e)=>{const a=indexedDB.deleteDatabase(DB_NAME);a.onerror=e,a.onsuccess=()=>{this.db=null,t()}}))}}