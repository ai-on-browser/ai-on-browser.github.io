import fs from 'fs'
import path from 'path'
import url from 'url'

import onnx from '../../../../../lib/model/nns/onnx/onnx_pb'
import ONNXImporter from '../../../../../lib/model/nns/onnx/onnx_importer'
import { loadTensor } from '../../../../../lib/model/nns/onnx/utils'
import Tensor from '../../../../../lib/util/tensor.js'
import ComputationalGraph from '../../../../../lib/model/nns/graph'

const filepath = path.dirname(url.fileURLToPath(import.meta.url))
const onnxBackendTestPath = filepath + '/../../../../../onnx_tmp/onnx/onnx/backend/test'

const testTargets = {
	node: [
		'test_abs',
		'test_acos',
		'test_acos_example',
		'test_acosh',
		'test_acosh_example',
		'test_add',
		'test_add_bcast',
		'test_add_uint8',
		'test_and_bcast3v1d',
		'test_and_bcast3v2d',
		'test_and_bcast4v2d',
		'test_and_bcast4v3d',
		'test_and_bcast4v4d',
		'test_and2d',
		'test_and3d',
		'test_and4d',
		'test_argmax_default_axis_example',
		'test_argmax_default_axis_random',
		'test_argmax_keepdims_example',
		'test_argmax_keepdims_random',
		'test_argmax_negative_axis_keepdims_example',
		'test_argmax_negative_axis_keepdims_random',
		'test_argmax_no_keepdims_example',
		'test_argmax_no_keepdims_random',
		'test_argmin_default_axis_example',
		'test_argmin_default_axis_random',
		'test_argmin_keepdims_example',
		'test_argmin_keepdims_random',
		'test_argmin_negative_axis_keepdims_example',
		'test_argmin_negative_axis_keepdims_random',
		'test_argmin_no_keepdims_example',
		'test_argmin_no_keepdims_random',
		'test_asin',
		'test_asin_example',
		'test_asinh',
		'test_asinh_example',
		'test_atan',
		'test_atan_example',
		'test_atanh',
		'test_atanh_example',
		'test_averagepool_1d_default',
		'test_averagepool_2d_ceil',
		'test_averagepool_2d_default',
		'test_averagepool_2d_pads',
		'test_averagepool_2d_precomputed_pads',
		'test_averagepool_2d_strides',
		'test_averagepool_3d_default',
		'test_basic_conv_with_padding',
		'test_basic_conv_without_padding',
		'test_batchnorm_epsilon',
		'test_batchnorm_example',
		'test_bitshift_left_uint8',
		'test_bitshift_left_uint16',
		'test_bitshift_left_uint32',
		'test_bitshift_left_uint64',
		'test_bitshift_right_uint8',
		'test_bitshift_right_uint16',
		'test_bitshift_right_uint32',
		'test_bitshift_right_uint64',
		'test_bitwise_and_i16_3d',
		'test_bitwise_and_i32_2d',
		'test_bitwise_and_ui8_bcast_4v3d',
		'test_bitwise_not_2d',
		'test_bitwise_or_i16_4d',
		'test_bitwise_or_i32_2d',
		'test_bitwise_or_ui8_bcast_4v3d',
		'test_bitwise_xor_i16_3d',
		'test_bitwise_xor_i32_2d',
		'test_bitwise_xor_ui8_bcast_4v3d',
		'test_ceil',
		'test_ceil_example',
		'test_celu',
		'test_clip',
		'test_clip_default_inbounds',
		'test_clip_default_int8_inbounds',
		'test_clip_default_int8_max',
		'test_clip_default_int8_min',
		'test_clip_default_max',
		'test_clip_default_min',
		'test_clip_example',
		'test_clip_inbounds',
		'test_clip_outbounds',
		'test_clip_splitbounds',
		'test_concat_1d_axis_0',
		'test_concat_2d_axis_0',
		'test_concat_2d_axis_1',
		'test_concat_3d_axis_0',
		'test_concat_3d_axis_1',
		'test_concat_3d_axis_2',
		'test_constant',
		'test_conv_with_autopad_same',
		'test_conv_with_strides_and_asymmetric_padding',
		'test_conv_with_strides_no_padding',
		'test_conv_with_strides_padding',
		'test_cos',
		'test_cos_example',
		'test_cosh',
		'test_cosh_example',
		'test_div',
		'test_div_bcast',
		'test_div_example',
		'test_elu',
		'test_elu_default',
		'test_elu_example',
		'test_equal',
		'test_equal_bcast',
		'test_erf',
		'test_exp',
		'test_exp_example',
		'test_flatten_axis1',
		'test_floor',
		'test_floor_example',
		'test_gemm_all_attributes',
		'test_gemm_alpha',
		'test_gemm_beta',
		'test_gemm_default_matrix_bias',
		'test_gemm_default_no_bias',
		'test_gemm_default_scalar_bias',
		'test_gemm_default_single_elem_vector_bias',
		'test_gemm_default_vector_bias',
		'test_gemm_default_zero_bias',
		'test_gemm_transposeA',
		'test_gemm_transposeB',
		'test_globalaveragepool',
		'test_globalaveragepool_precomputed',
		'test_globalmaxpool',
		'test_globalmaxpool_precomputed',
		'test_greater',
		'test_greater_bcast',
		'test_greater_equal',
		'test_greater_equal_bcast',
		'test_hardsigmoid',
		'test_hardsigmoid_default',
		'test_hardsigmoid_example',
		'test_hardswish',
		'test_identity',
		'test_isinf',
		'test_isnan',
		'test_layer_normalization_2d_axis_negative_1',
		'test_layer_normalization_2d_axis_negative_2',
		'test_layer_normalization_2d_axis0',
		'test_layer_normalization_2d_axis1',
		'test_layer_normalization_3d_axis_negative_1_epsilon',
		'test_layer_normalization_3d_axis_negative_2_epsilon',
		'test_layer_normalization_3d_axis_negative_3_epsilon',
		'test_layer_normalization_3d_axis0_epsilon',
		'test_layer_normalization_3d_axis1_epsilon',
		'test_layer_normalization_3d_axis2_epsilon',
		'test_layer_normalization_4d_axis_negative_1',
		'test_layer_normalization_4d_axis_negative_2',
		'test_layer_normalization_4d_axis_negative_3',
		'test_layer_normalization_4d_axis_negative_4',
		'test_layer_normalization_4d_axis0',
		'test_layer_normalization_4d_axis1',
		'test_layer_normalization_4d_axis2',
		'test_layer_normalization_4d_axis3',
		'test_layer_normalization_default_axis',
		'test_leakyrelu',
		'test_leakyrelu_default',
		'test_leakyrelu_example',
		'test_less',
		'test_less_bcast',
		'test_less_equal',
		'test_less_equal_bcast',
		'test_log',
		'test_log_example',
		'test_logsoftmax_axis_0',
		'test_logsoftmax_axis_1',
		'test_logsoftmax_axis_2',
		'test_logsoftmax_default_axis',
		'test_logsoftmax_example_1',
		'test_logsoftmax_large_number',
		'test_logsoftmax_negative_axis',
		'test_lppool_1d_default',
		'test_lppool_2d_default',
		'test_lppool_2d_pads',
		'test_lppool_2d_strides',
		'test_lppool_3d_default',
		'test_lrn',
		'test_lrn_default',
		'test_matmul_2d',
		'test_max_example',
		'test_max_float16',
		'test_max_float32',
		'test_max_float64',
		'test_max_int8',
		'test_max_int16',
		'test_max_int32',
		'test_max_int64',
		'test_max_one_input',
		'test_max_two_inputs',
		'test_max_uint8',
		'test_max_uint16',
		'test_max_uint32',
		'test_max_uint64',
		'test_maxpool_1d_default',
		'test_maxpool_2d_ceil',
		'test_maxpool_2d_default',
		'test_maxpool_2d_pads',
		'test_maxpool_2d_precomputed_pads',
		'test_maxpool_2d_strides',
		'test_maxpool_3d_default',
		'test_mean_example',
		'test_mean_one_input',
		'test_mean_two_inputs',
		'test_min_example',
		'test_min_float16',
		'test_min_float32',
		'test_min_float64',
		'test_min_int8',
		'test_min_int16',
		'test_min_int32',
		'test_min_int64',
		'test_min_one_input',
		'test_min_two_inputs',
		'test_min_uint8',
		'test_min_uint16',
		'test_min_uint32',
		'test_min_uint64',
		'test_mish',
		'test_mod_broadcast',
		'test_mod_uint8',
		'test_mod_uint16',
		'test_mod_uint32',
		'test_mod_uint64',
		'test_mul',
		'test_mul_bcast',
		'test_mul_example',
		'test_mul_uint8',
		'test_neg',
		'test_neg_example',
		'test_not_2d',
		'test_not_3d',
		'test_not_4d',
		'test_or_bcast3v1d',
		'test_or_bcast3v2d',
		'test_or_bcast4v2d',
		'test_or_bcast4v3d',
		'test_or_bcast4v4d',
		'test_or2d',
		'test_or3d',
		'test_or4d',
		'test_pow',
		'test_pow_bcast_array',
		'test_pow_bcast_scalar',
		'test_pow_example',
		'test_pow_types_float32_int32',
		'test_pow_types_float32_int64',
		'test_pow_types_float32_uint32',
		'test_pow_types_float32_uint64',
		'test_pow_types_int32_float32',
		'test_pow_types_int32_int32',
		'test_pow_types_int64_float32',
		'test_pow_types_int64_int64',
		'test_prelu_broadcast',
		'test_prelu_example',
		'test_reciprocal',
		'test_reduce_l1_do_not_keepdims_example',
		'test_reduce_l1_do_not_keepdims_random',
		'test_reduce_l1_keep_dims_example',
		'test_reduce_l1_keep_dims_random',
		'test_reduce_l2_do_not_keepdims_example',
		'test_reduce_l2_do_not_keepdims_random',
		'test_reduce_l2_keep_dims_example',
		'test_reduce_l2_keep_dims_random',
		'test_reduce_log_sum_exp_do_not_keepdims_example',
		'test_reduce_log_sum_exp_do_not_keepdims_random',
		'test_reduce_log_sum_exp_keepdims_example',
		'test_reduce_log_sum_exp_keepdims_random',
		'test_reduce_log_sum_asc_axes',
		'test_reduce_log_sum_desc_axes',
		'test_reduce_max_do_not_keepdims_example',
		'test_reduce_max_do_not_keepdims_random',
		'test_reduce_max_keepdims_example',
		'test_reduce_max_keepdims_random',
		'test_reduce_mean_do_not_keepdims_example',
		'test_reduce_mean_do_not_keepdims_random',
		'test_reduce_mean_keepdims_example',
		'test_reduce_mean_keepdims_random',
		'test_reduce_min_do_not_keepdims_example',
		'test_reduce_min_do_not_keepdims_random',
		'test_reduce_min_keepdims_example',
		'test_reduce_min_keepdims_random',
		'test_reduce_prod_do_not_keepdims_example',
		'test_reduce_prod_do_not_keepdims_random',
		'test_reduce_prod_keepdims_example',
		'test_reduce_prod_keepdims_random',
		'test_reduce_sum_do_not_keepdims_example',
		'test_reduce_sum_do_not_keepdims_random',
		'test_reduce_sum_keepdims_example',
		'test_reduce_sum_keepdims_random',
		'test_reduce_sum_square_do_not_keepdims_example',
		'test_reduce_sum_square_do_not_keepdims_random',
		'test_reduce_sum_square_keepdims_example',
		'test_reduce_sum_square_keepdims_random',
		'test_relu',
		'test_selu',
		'test_selu_default',
		'test_selu_example',
		'test_shrink_hard',
		'test_shrink_soft',
		'test_sigmoid',
		'test_sigmoid_example',
		'test_sign',
		'test_sin',
		'test_sin_example',
		'test_sinh',
		'test_sinh_example',
		'test_softmax_axis_0',
		'test_softmax_axis_1',
		'test_softmax_axis_2',
		'test_softmax_default_axis',
		'test_softmax_example',
		'test_softmax_large_number',
		'test_softmax_negative_axis',
		'test_softplus',
		'test_softplus_example',
		'test_softsign',
		'test_softsign_example',
		'test_sqrt',
		'test_sqrt_example',
		'test_sub',
		'test_sub_bcast',
		'test_sub_example',
		'test_sub_uint8',
		'test_sum_example',
		'test_sum_one_input',
		'test_sum_two_inputs',
		'test_tan',
		'test_tan_example',
		'test_tanh',
		'test_tanh_example',
		'test_thresholdedrelu',
		'test_thresholdedrelu_default',
		'test_thresholdedrelu_example',
		'test_transpose_all_permutations_0',
		'test_transpose_all_permutations_1',
		'test_transpose_all_permutations_2',
		'test_transpose_all_permutations_3',
		'test_transpose_all_permutations_4',
		'test_transpose_all_permutations_5',
		'test_where_example',
		'test_where_long_example',
		'test_xor_bcast3v1d',
		'test_xor_bcast3v2d',
		'test_xor_bcast4v2d',
		'test_xor_bcast4v3d',
		'test_xor_bcast4v4d',
		'test_xor2d',
		'test_xor3d',
		'test_xor4d',
	],
	'pytorch-converted': [
		'test_AvgPool2d',
		'test_AvgPool2d_stride',
		'test_AvgPool3d',
		'test_AvgPool3d_stride1_pad0_gpu_input',
		'test_ELU',
		'test_LeakyReLU',
		'test_LeakyReLU_with_negval',
		'test_MaxPool1d',
		'test_MaxPool1d_stride',
		'test_MaxPool2d',
		'test_ReLU',
		'test_SELU',
		'test_Sigmoid',
		'test_Softplus',
		'test_Softsign',
		'test_Tanh',
	],
	'pytorch-operator': [
		'test_operator_add_broadcast',
		'test_operator_add_size1_broadcast',
		'test_operator_add_size1_right_broadcast',
		'test_operator_add_size1_singleton_broadcast',
		'test_operator_addconstant',
		'test_operator_basic',
		'test_operator_concat2',
		'test_operator_exp',
		'test_operator_flatten',
		'test_operator_max',
		'test_operator_min',
		'test_operator_pow',
		'test_operator_selu',
		'test_operator_sqrt',
		'test_operator_view',
	],
	simple: ['test_shrink', 'test_sign_model', 'test_single_relu_model'],
}

describe('onnx backend test', () => {
	describe.each(Object.keys(testTargets))('%s', key => {
		test.each(testTargets[key])('%s', async testname => {
			const pathToTestDir = `${onnxBackendTestPath}/data/${key}/${testname}`
			const buf = await fs.promises.readFile(`${pathToTestDir}/model.onnx`)
			const net = ComputationalGraph.fromObject(await ONNXImporter.load(buf))

			const inputs = {}
			for (const node of net.inputNodes) {
				const inputBuf = await fs.promises.readFile(
					`${pathToTestDir}/test_data_set_0/input_${Object.keys(inputs).length}.pb`
				)
				inputs[node.name] = Tensor.fromArray(loadTensor(onnx.TensorProto.deserializeBinary(inputBuf)))
				if (inputs[node.name].dimension === 2) {
					inputs[node.name] = inputs[node.name].toMatrix()
				}
			}

			net.bind({ input: inputs })
			net.calc()

			let outputCounter = 0
			for (const node of net.outputNodes) {
				const outputBuf = await fs.promises.readFile(
					`${pathToTestDir}/test_data_set_0/output_${outputCounter++}.pb`
				)
				const t = Tensor.fromArray(loadTensor(onnx.TensorProto.deserializeBinary(outputBuf)))
				const y = node.outputValue
				expect(y.sizes).toEqual(t.sizes)
				for (let i = 0; i < t.length; i++) {
					if (isNaN(y.value[i]) && isNaN(t.value[i])) {
						continue
					}
					expect(y.value[i])[typeof t.value[i] === 'number' ? 'toBeCloseTo' : 'toBe'](t.value[i])
				}
			}
		})
	})
})
