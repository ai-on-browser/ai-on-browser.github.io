var c=Object.defineProperty;var o=(a,s)=>c(a,"name",{value:s,configurable:!0});export default class g{static{o(this,"DENCLUE")}constructor(s,h=1,t="gaussian"){this._version=h,this._h=s,this._delta=.01,this._ignore_p=.2,this._xi=1e-12,typeof t=="function"?this._kernel=t:(t==="gaussian"||t.name==="gaussian")&&(this._kernel=i=>{const e=i.length;return Math.exp(-i.reduce((_,r)=>_+r**2,0)/2)/(2*Math.PI)**(e/2)})}get size(){return new Set(this.predict()).size}init(s){if(this._datas=s,this._x=s.map(h=>h.concat()),this._version===2){const h=this._x.length;if(this._ignore_p>0){this._k=[];for(let t=0;t<h;this._k[t++]=[]);for(let t=0;t<h;t++){this._k[t][t]={k:1/0,idx:t};for(let i=t+1;i<h;i++){const e=this._kernel(this._x[t].map((_,r)=>(_-this._x[i][r])/this._h));this._k[t][i]={k:e,idx:i},this._k[i][t]={k:e,idx:t}}this._k[t].sort((i,e)=>i.k-e.k),this._k[t].forEach((i,e)=>{e<this._ignore_p*h&&(i.low=!0)}),this._k[t].sort((i,e)=>i.idx-e.idx)}}this._radius=Array(this._x.length);for(let t=0;t<h;t++)this._radius[t]=[]}this._xi>0&&(this._probs=this._x.map(h=>this._p(h)))}_p(s){let h=0;for(let t=0;t<this._datas.length;t++)h+=this._kernel(this._datas[t].map((i,e)=>(s[e]-i)/this._h));return h/(this._datas.length*this._h**s.length)}_dp(s){let h=Array(s.length).fill(0);for(let t=0;t<this._datas.length;t++){const i=this._kernel(this._datas[t].map((e,_)=>(s[_]-e)/this._h));for(let e=0;e<h.length;e++)h[e]+=i*(this._datas[t][e]-s[e])}return h.map(t=>t/(this._datas.length*h.length**(s.length+2)))}fit(){if(this._version===1)for(let s=0;s<this._x.length;s++){const h=this._dp(this._x[s]),t=Math.sqrt(h.reduce((i,e)=>i+e**2,0));for(let i=0;i<this._x[s].length;i++)this._x[s][i]+=this._delta*h[i]/t}else for(let s=0;s<this._x.length;s++){const h=this._x[s];let t=0;const i=Array(h.length).fill(0);for(let _=0;_<this._datas.length;_++){let r;this._k&&this._k[s][_].low?r=this._k[s][_].k:r=this._kernel(this._datas[_].map((n,l)=>(h[l]-n)/this._h));for(let n=0;n<h.length;n++)i[n]+=r*this._datas[_][n];t+=r}for(let _=0;_<i.length;_++)i[_]/=t;const e=Math.sqrt(h.reduce((_,r,n)=>_+(r-i[n])**2,0));this._x[s]=i,e>1e-8&&this._radius[s].push(e)}}predict(){const s=[];let h=-1;for(let t=0;t<this._x.length;t++){if(this._probs&&this._probs[t]<this._xi){s[t]=-1;continue}const i=this._version===1?this._delta:this._radius[t].reduce((r,n)=>r+n,0);let e=-1,_=1/0;for(let r=0;r<t;r++){const n=Math.sqrt(this._x[r].reduce((l,d,f)=>l+(d-this._x[t][f])**2,0));n<2*i&&n<_&&(e=r,_=n)}e<0?s[t]=++h:s[t]=s[e]}return s}}
