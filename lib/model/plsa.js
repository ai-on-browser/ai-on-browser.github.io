import{Matrix}from"../util/math.js";export default class PLSA{constructor(t=2){this._k=t,this._beta=1}init(t){const s=new Set;for(let i=0;i<t.length;i++)for(let h=0;h<t[i].length;h++)s.add(t[i][h]);this._w=[...s],this._d=t.map((t=>t.map((t=>this._w.indexOf(t))))),this._n=Matrix.zeros(this._d.length,this._w.length);for(let t=0;t<this._d.length;t++)for(let s=0;s<this._d[t].length;s++)this._n.addAt(t,this._d[t][s],1);this._pz=Array(this._k).fill(1/this._k),this._pwz=new Matrix(this._w.length,this._k,1/this._w.length),this._pdz=Matrix.random(this._d.length,this._k,0,1),this._pdz.div(this._pdz.sum(0)),this._pzdw=[];for(let t=0;t<this._k;t++)this._pzdw[t]=new Matrix(this._d.length,this._w.length,1/this._k)}fit(){for(let t=0;t<this._d.length;t++)for(let s=0;s<this._w.length;s++){const i=[];for(let h=0;h<this._k;h++)i[h]=this._pz[h]*this._pdz.at(t,h)*this._pwz.at(s,h);const h=i.reduce(((t,s)=>t+s),0);for(let _=0;_<this._k;_++)this._pzdw[_].set(t,s,i[_]/(h+1e-12))}for(let t=0;t<this._k;t++){const s=this._n.copyMult(this._pzdw[t]),i=s.sum(0);i.div(i.sum()+1e-12),this._pwz.set(0,t,i.t);const h=s.sum(1);h.div(h.sum()+1e-12),this._pdz.set(0,t,h),this._pz[t]=s.sum()/this._n.sum()}}predict(){return this._pdz.argmax(1).value}}