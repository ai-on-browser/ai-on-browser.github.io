import Tree from"../util/tree.js";export default class STING{constructor(){this._cells=null}fit(l){const e=l,t=e.length,r=e[0].length,a=e.reduce(((l,e)=>l.map(((l,t)=>Math.min(l,e[t])))),Array(r).fill(1/0)),n=e.reduce(((l,e)=>l.map(((l,t)=>Math.max(l,e[t])))),Array(r).fill(-1/0)),s=a.map(((l,e)=>[l,n[e]]));this._cells=new Tree({ranges:s});let o=[this._cells];const f=2**r,h=Math.log(t/20)/Math.log(f),i=[o];for(let l=0;l<h;l++){const l=[];for(const e of o){const t=e.value.ranges;for(let a=0;a<f;a++){let n=a;const s=[];for(let l=0;l<r;l++){const e=(t[l][1]+t[l][0])/2;n%2==0?s.push([t[l][0],e]):s.push([e,t[l][1]]),n=Math.floor(n/2)}const o=new Tree({ranges:s});l.push(o),e.push(o)}}o=l,i.push(o)}for(let l=0;l<o.length;l++){const t=o[l],a=e.filter((l=>t.value.ranges.every(((e,t)=>e[0]<=l[t]&&(e[1]===n[t]?l[t]<=e[1]:l[t]<e[1]))))),s=t.value.n=a.length,f=Array(r).fill(0),h=t.value.min=Array(r).fill(1/0),i=t.value.max=Array(r).fill(-1/0);for(let l=0;l<s;l++)for(let e=0;e<r;e++)f[e]+=a[l][e],h[e]=Math.min(h[e],a[l][e]),i[e]=Math.max(i[e],a[l][e]);t.value.m=f.map((l=>s>0?l/s:0));const m=Array(r).fill(0);for(let l=0;l<s;l++)for(let e=0;e<r;e++)m[e]+=(a[l][e]-f[e])**2;t.value.s=m.map((l=>s>0?Math.sqrt(l/s):0))}for(let l=i.length-2;l>=0;l--)for(let e=0;e<i[l].length;e++){let t=0;const a=Array(r).fill(0),n=i[l][e].value.min=Array(r).fill(1/0),s=i[l][e].value.max=Array(r).fill(-1/0),o=Array(r).fill(0);for(const h of i[l+1].slice(e*f,(e+1)*f)){const l=h.value;t+=l.n;for(let e=0;e<r;e++)a[e]+=l.m[e]*l.n,n[e]=Math.min(n[e],l.min[e]),s[e]=Math.max(s[e],l.max[e]),o[e]+=(l.s[e]**2+l.m[e]**2)*l.n}i[l][e].value.n=t,i[l][e].value.m=a.map((l=>t>0?l/t:0)),i[l][e].value.s=o.map(((l,e)=>t>0?Math.sqrt(l/t-a[e]**2):0))}}predict(l){}}