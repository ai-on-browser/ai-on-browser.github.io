var c=Object.defineProperty;var o=(_,s)=>c(_,"name",{value:s,configurable:!0});export default class l{static{o(this,"KernelizedPerceptron")}constructor(s=1,i="gaussian"){if(this._r=s,typeof i=="function")this._kernel=i;else switch(typeof i=="string"&&(i={name:i}),i.name){case"gaussian":this._s=i.s??1,this._kernel=(t,h)=>Math.exp(-(t.reduce((n,e,r)=>n+(e-h[r])**2,0)**2)/this._s**2);break;case"polynomial":this._d=i.d??2,this._kernel=(t,h)=>(1+t.reduce((n,e,r)=>n+e*h[r]))**this._d;break}this._i=[]}fit(s,i){for(let t=0;t<s.length;t++){if(this._i.length===0){this._i.push({x:s[t],y:i[t]});continue}let h=0;for(let e=0;e<this._i.length;e++){const r=this._i[e];h+=this._r*r.y*this._kernel(s[t],r.x)}(h<0?-1:1)!==i[t]&&this._i.push({x:s[t],y:i[t]})}}predict(s){const i=[];for(let t=0;t<s.length;t++){let h=0;for(let n=0;n<this._i.length;n++){const e=this._i[n];h+=this._r*e.y*this._kernel(s[t],e.x)}i[t]=h<0?-1:1}return i}}
