export default class KernelizedPerceptron{constructor(t=1,i="gaussian"){switch(this._r=t,i){case"gaussian":this._s=1,this._kernel=(t,i)=>Math.exp(-(t.reduce(((t,s,h)=>t+(s-i[h])**2),1)**2)/this._s**2);break;case"polynomial":this._d=2,this._kernel=(t,i)=>(1+t.reduce(((t,s,h)=>t+s*i[h])))**this._d}}init(t,i){this._x=t,this._y=i,this._epoch=0,this._i=[]}fit(){for(let t=0;t<this._x.length;t++){if(0===this._i.length){this._i.push(t);continue}let i=0;for(let s=0;s<this._i.length;s++){const h=this._i[s];i+=this._r*this._y[h]*this._kernel(this._x[t],this._x[h])}(i<0?-1:1)!==this._y[t]&&this._i.push(t)}}predict(t){const i=[];for(let s=0;s<t.length;s++){let h=0;for(let i=0;i<this._i.length;i++){const e=this._i[i];h+=this._r*this._y[e]*this._kernel(t[s],this._x[e])}i[s]=h<0?-1:1}return i}}