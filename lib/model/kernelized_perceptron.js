export default class KernelizedPerceptron{constructor(t=1,e="gaussian"){if(this._r=t,"function"==typeof e)this._kernel=e;else switch(e){case"gaussian":this._s=1,this._kernel=(t,e)=>Math.exp(-(t.reduce(((t,i,s)=>t+(i-e[s])**2),0)**2)/this._s**2);break;case"polynomial":this._d=2,this._kernel=(t,e)=>(1+t.reduce(((t,i,s)=>t+i*e[s])))**this._d}this._i=[]}fit(t,e){for(let i=0;i<t.length;i++){if(0===this._i.length){this._i.push({x:t[i],y:e[i]});continue}let s=0;for(let e=0;e<this._i.length;e++){const h=this._i[e];s+=this._r*h.y*this._kernel(t[i],h.x)}(s<0?-1:1)!==e[i]&&this._i.push({x:t[i],y:e[i]})}}predict(t){const e=[];for(let i=0;i<t.length;i++){let s=0;for(let e=0;e<this._i.length;e++){const h=this._i[e];s+=this._r*h.y*this._kernel(t[i],h.x)}e[i]=s<0?-1:1}return e}}