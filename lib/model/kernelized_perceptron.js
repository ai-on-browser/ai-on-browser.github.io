var _=Object.defineProperty;var r=(n,s)=>_(n,"name",{value:s,configurable:!0});const c={gaussian:r(({s:n=1})=>(s,t)=>Math.exp(-(s.reduce((i,e,h)=>i+(e-t[h])**2,0)**2)/n**2),"gaussian"),polynomial:r(({d:n=2})=>(s,t)=>(1+s.reduce((i,e,h)=>i+e*t[h]))**n,"polynomial")};export default class f{static{r(this,"KernelizedPerceptron")}constructor(s=1,t="gaussian"){this._r=s,typeof t=="function"?this._kernel=t:(typeof t=="string"&&(t={name:t}),this._kernel=c[t.name](t)),this._i=[]}fit(s,t){for(let i=0;i<s.length;i++){if(this._i.length===0){this._i.push({x:s[i],y:t[i]});continue}let e=0;for(let o=0;o<this._i.length;o++){const l=this._i[o];e+=this._r*l.y*this._kernel(s[i],l.x)}(e<0?-1:1)!==t[i]&&this._i.push({x:s[i],y:t[i]})}}predict(s){const t=[];for(let i=0;i<s.length;i++){let e=0;for(let h=0;h<this._i.length;h++){const o=this._i[h];e+=this._r*o.y*this._kernel(s[i],o.x)}t[i]=e<0?-1:1}return t}}
