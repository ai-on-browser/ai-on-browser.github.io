var o=Object.defineProperty;var _=(l,i)=>o(l,"name",{value:i,configurable:!0});export default class c{static{_(this,"KernelizedPerceptron")}constructor(i=1,s="gaussian"){if(this._r=i,typeof s=="function")this._kernel=s;else switch(s){case"gaussian":this._s=1,this._kernel=(t,h)=>Math.exp(-(t.reduce((r,e,n)=>r+(e-h[n])**2,0)**2)/this._s**2);break;case"polynomial":this._d=2,this._kernel=(t,h)=>(1+t.reduce((r,e,n)=>r+e*h[n]))**this._d;break}this._i=[]}fit(i,s){for(let t=0;t<i.length;t++){if(this._i.length===0){this._i.push({x:i[t],y:s[t]});continue}let h=0;for(let e=0;e<this._i.length;e++){const n=this._i[e];h+=this._r*n.y*this._kernel(i[t],n.x)}(h<0?-1:1)!==s[t]&&this._i.push({x:i[t],y:s[t]})}}predict(i){const s=[];for(let t=0;t<i.length;t++){let h=0;for(let r=0;r<this._i.length;r++){const e=this._i[r];h+=this._r*e.y*this._kernel(i[t],e.x)}s[t]=h<0?-1:1}return s}}
