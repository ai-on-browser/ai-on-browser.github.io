var f=Object.defineProperty;var r=(o,_)=>f(o,"name",{value:_,configurable:!0});export default class l{static{r(this,"CubicHermiteSpline")}constructor(_,i){this._t=_,this._b=i}fit(_,i){const h=_.map((t,s)=>[t,i[s]]);h.sort((t,s)=>t[0]-s[0]),this._x=h.map(t=>t[0]),this._y=h.map(t=>t[1])}predict(_){const i=this._x.length;return _.map(h=>{if(h<=this._x[0])return this._y[0];if(h>=this._x[i-1])return this._y[i-1];for(let t=1;t<i;t++)if(h<=this._x[t]){const s=(h-this._x[t-1])/(this._x[t]-this._x[t-1]),y=t>1?this._y[t-2]:2*this._y[t-1]-this._y[t],n=this._y[t-1],c=this._y[t],e=t<i-1?this._y[t+1]:2*this._y[t]+this._y[t-1],a=((n-y)*(1+this._b)+(c-n)*(1-this._b))*(1-this._t)/2,x=((c-n)*(1+this._b)+(e-c)*(1-this._b))*(1-this._t)/2,p=2*s**3-3*s**2+1,u=s**3-2*s**2+s,m=s**3-s**2,b=-2*s**3+3*s**2;return p*n+u*a+m*x+b*c}return this._y[i-1]})}}
