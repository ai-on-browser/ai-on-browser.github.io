export default class FuzzyKNN{constructor(s=5,t=2){this._p=[],this._c=[],this._classes=[],this._u=[],this._k=s,this._m=t,this._d=(s,t)=>Math.sqrt(s.reduce(((s,h,i)=>s+(h-t[i])**2),0))}get categories(){return this._classes}_near_points(s){const t=[];return this._p.forEach(((h,i)=>{const e=this._d(s,h);if(t.length<this._k||e<t[this._k-1].d){t.length>=this._k&&t.pop(),t.push({d:e,category:this._c[i],idx:i});for(let s=t.length-1;s>0;s--)t[s-1].d>t[s].d&&([t[s],t[s-1]]=[t[s-1],t[s]])}})),t}add(s,t){if(this._p.push(s),this._c.push(t),this._classes.indexOf(t)<0){this._classes.push(t);for(let s=0;s<this._u.length;s++)this._u[s].push(0)}const h=Array(this._classes.length).fill(0);h[this._classes.indexOf(t)]=1,this._u.push(h)}fit(s,t){for(let h=0;h<s.length;h++)this.add(s[h],t[h])}predict(s){return s.map((s=>{const t=this._near_points(s),h=[];for(let s=0;s<this._classes.length;s++){let i=0,e=0;for(let h=0;h<t.length;h++){const _=t[h].d**(2/(this._m-1));i+=this._u[t[h].idx][s]*_,e+=_}h[s]=0===e?0:i/e}return h}))}}