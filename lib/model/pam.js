export default class PAM{constructor(t){this._k=t}_distance(t,s){return Math.sqrt(t.reduce(((t,i,e)=>t+(i-s[e])**2),0))}_argmin(t){let s=1/0,i=-1;for(let e=0;e<t.length;e++)t[e]<s&&(s=t[e],i=e);return i}_cost(t){const s=t.map((t=>this._x[t])),i=this._x.length;let e=0;for(let t=0;t<i;t++){const i=this._argmin(s.map((s=>this._distance(this._x[t],s))));e+=this._distance(this._x[t],s[i])}return e}init(t){this._x=t;const s=[];for(let t=0;t<this._k;t++)s.push(Math.floor(Math.random()*(this._x.length-t)));for(let t=this._k-1;t>=0;t--)for(let i=this._k-1;i>t;i--)s[t]<=s[i]&&s[i]++;this._centroids=s}fit(){const t=this._x.length;let s=this._cost(this._centroids),i=!1;for(let e=0;e<this._k;e++){let h=1/0,n=-1;for(let s=0;s<t;s++){if(this._centroids.some((t=>t===s)))continue;const t=this._centroids.concat();t[e]=s;const i=this._cost(t);i<h&&(h=i,n=s)}h<s&&(this._centroids[e]=n,s=h,i=!0)}return i}predict(){const t=this._centroids.map((t=>this._x[t]));return this._x.map((s=>this._argmin(t.map((t=>this._distance(s,t))))))}}