var f=Object.defineProperty;var l=(_,n)=>f(_,"name",{value:n,configurable:!0});export default class d{static{l(this,"PAM")}constructor(n){this._k=n}_distance(n,t){return Math.sqrt(n.reduce((i,s,e)=>i+(s-t[e])**2,0))}_argmin(n){let t=1/0,i=-1;for(let s=0;s<n.length;s++)n[s]<t&&(t=n[s],i=s);return i}_cost(n){const t=n.map(e=>this._x[e]),i=this._x.length;let s=0;for(let e=0;e<i;e++){const o=this._argmin(t.map(c=>this._distance(this._x[e],c)));s+=this._distance(this._x[e],t[o])}return s}init(n){this._x=n;const t=[];for(let i=0;i<this._k;i++)t.push(Math.floor(Math.random()*(this._x.length-i)));for(let i=this._k-1;i>=0;i--)for(let s=this._k-1;s>i;s--)t[i]<=t[s]&&t[s]++;this._centroids=t}fit(){const n=this._x.length;let t=this._cost(this._centroids),i=!1;for(let s=0;s<this._k;s++){let e=1/0,o=-1;for(let c=0;c<n;c++){if(this._centroids.some(a=>a===c))continue;const h=this._centroids.concat();h[s]=c;const r=this._cost(h);r<e&&(e=r,o=c)}e<t&&(this._centroids[s]=o,t=e,i=!0)}return i}predict(){const n=this._centroids.map(t=>this._x[t]);return this._x.map(t=>this._argmin(n.map(i=>this._distance(t,i))))}}
