export default class MONA{constructor(){}get size(){return this._tree.leafs.length}init(t){this._x=t,this._tree={idx:Array.from({length:this._x.length},((t,e)=>e)),children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((t,e)=>t.concat(e.leafs)),[])}}}fit(){const t=this._tree.leafs,e=this._x[0].length;for(const i of t){let t=-1/0,h=-1;for(let s=0;s<e;s++){if(i.idx.every((t=>this._x[t][s]===this._x[i.idx[0]][s])))continue;let r=0;for(let t=0;t<e;t++){if(s===t)continue;let e=0,h=0,n=0,l=0;for(const r of i.idx)1===this._x[r][s]&&1===this._x[r][t]?e++:1===this._x[r][s]&&0===this._x[r][t]?h++:0===this._x[r][s]&&1===this._x[r][t]?n++:0===this._x[r][s]&&0===this._x[r][t]&&l++;r+=e*l-h*n}t<r&&(t=r,h=s)}if(h<0)continue;const s=i.idx.filter((t=>0===this._x[t][h])),r=i.idx.filter((t=>1===this._x[t][h]));0!==s.length&&0!==r.length&&(i.feature=h,i.children.push({idx:s,children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((t,e)=>t.concat(e.leafs)),[])}},{idx:r,children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((t,e)=>t.concat(e.leafs)),[])}}))}}predict(){const t=[],e=this._tree.leafs;for(let i=0;i<e.length;i++)for(const h of e[i].idx)t[h]=i;return t}}