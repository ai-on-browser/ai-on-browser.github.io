var m=Object.defineProperty;var s=(r,e)=>m(r,"name",{value:e,configurable:!0});import d from"./neuralnetwork.js";export default class l{static{s(this,"VAE")}constructor(e,t,n,o,p,a,c){this._type=c,this._reconstruct_rate=10,this._epoch=0;let i=[{type:"input",name:"dec_in"}];c==="conditional"&&i.push({type:"input",name:"cond",input:[]},{type:"onehot",name:"cond_oh",input:["cond"],class_size:a},{type:"concat",input:["dec_in","cond_oh"]}),i.push(...o,{type:"full",out_size:e});let u=[{type:"input",name:"enc_in"}];c==="conditional"&&u.push({type:"input",name:"cond",input:[]},{type:"onehot",name:"cond_oh",input:["cond"],class_size:a},{type:"concat",input:["enc_in","cond_oh"]}),u.push(...n,{type:"full",out_size:t*2},{type:"split",size:[t,t],name:"param"},{type:"abs",input:["param[0]"],name:"var"},{type:"identity",input:["param[1]"],name:"mean"},{type:"random",size:t,input:[],name:"random"},{type:"mult",input:["random","var"],name:"mult"},{type:"add",input:["mult","mean"]}),this._decodeNet=d.fromObject(i,null,p),u.push({type:"include",net:this._decodeNet,input_to:"dec_in",train:!0},{type:"output",name:"output"},{type:"log",input:"var",name:"log_var"},{type:"square",input:"mean",name:"mean^2"},{type:"add",input:[1,"log_var"],name:"add"},{type:"sub",input:["add","mean^2","var"]},{type:"sum",axis:1},{type:"mean",name:"kl_0"},{type:"mult",input:["kl_0",-.5/this._reconstruct_rate]},{type:"sum",name:"kl"},{type:"sub",input:["enc_in","output"]},{type:"square"},{type:"mean",name:"recon"},{type:"add",input:["kl","recon"]}),this._aeNet=d.fromObject(u,null,p)}get epoch(){return this._epoch}fit(e,t,n,o,p){const a=this._aeNet.fit({enc_in:e,cond:t},e,n,o,p);return this._epoch+=n,a[0]}predict(e,t){return this._aeNet.calc({enc_in:e,cond:t}).toArray()}reduce(e,t){return this._aeNet.calc({enc_in:e,cond:t},null,["mean"]).mean.toArray()}}
