export default class LoOP{constructor(t){this._k=t,this._lambda=1}_distance(t,s){return Math.sqrt(t.reduce(((t,e,r)=>t+(e-s[r])**2),0))}_erf(t){const s=t<0?-1:1,e=1/(1+.3275911*Math.abs(t));return s*(1-((((1.061405429*e-1.453152027)*e+1.421413741)*e-.284496736)*e+.254829592)*e*Math.exp(-t*t))}predict(t){const s=t.length,e=[];for(let r=0;r<s;r++){e[r]=[],e[r][r]=0;for(let s=0;s<r;s++){const c=this._distance(t[r],t[s]);e[r][s]=e[s][r]=c}}const r=[],c=[];for(let t=0;t<s;t++){const s=e[t].map(((t,s)=>[t,s]));s.sort(((t,s)=>t[0]-s[0]));const a=s.slice(1,this._k+1).map((t=>t[1]));c[t]=a.concat();const o=c[t].reduce(((s,r)=>s+e[t][r]**2),0);r[t]=this._lambda*Math.sqrt(o/c[t].length)}const a=[];for(let t=0;t<s;t++){const s=c[t].reduce(((t,s)=>t+r[s]),0)/c[t].length;a[t]=r[t]/s-1}const o=(this._lambda+Math.sqrt(a.reduce(((t,s)=>t+s**2),0)/s))*Math.sqrt(2),n=[];for(let t=0;t<s;t++)n[t]=Math.max(0,this._erf(a[t]/o));return n}}