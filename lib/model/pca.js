var f=Object.defineProperty;var u=(h,t)=>f(h,"name",{value:t,configurable:!0});import r from"../util/matrix.js";const l={gaussian:(h=1)=>(t,s)=>{const e=r.sub(t,s).reduce((o,i)=>o+i*i,0);return Math.exp(-e/h**2)},polynomial:(h=2)=>(t,s)=>t.dot(s.t).toScaler()**h};export class PCA{static{u(this,"PCA")}fit(t){t=r.fromArray(t);const s=t.cov();[this._e,this._w]=s.eigen();const e=this._e.reduce((o,i)=>o+i,0);this._e=this._e.map(o=>o/e)}predict(t,s=0){t=r.fromArray(t);const e=this._w;return s>0&&s<e.cols&&e.resize(e.rows,s),t.dot(e).toArray()}}export class DualPCA{static{u(this,"DualPCA")}fit(t){this._x=r.fromArray(t),this._x.sub(this._x.mean(0));const s=this._x.dot(this._x.t);[this._e,this._w]=s.eigen(),this._w.div(r.map(new r(1,this._e.length,this._e),Math.sqrt));const e=this._e.reduce((o,i)=>o+i,0);this._e=this._e.map(o=>o/e)}predict(t,s=0){t=r.fromArray(t);const e=this._w;return s>0&&s<e.cols&&e.resize(e.rows,s),t.dot(this._x.tDot(e)).toArray()}}export class KernelPCA{static{u(this,"KernelPCA")}constructor(t){typeof t=="function"?this._kernel=(s,e)=>t(s.value,e.value):(typeof t=="string"&&(t={name:t}),t.name==="gaussian"?this._kernel=l.gaussian(t.sigma):this._kernel=l.polynomial(t.n))}fit(t){this._x=r.fromArray(t);const s=this._x.rows,e=new r(s,s),o=[];for(let n=0;n<s;n++)o.push(this._x.row(n));for(let n=0;n<s;n++)for(let _=n;_<s;_++){const m=this._kernel(o[n],o[_]);e.set(n,_,m),e.set(_,n,m)}const c=r.sub(r.eye(s,s),1/s).dot(e).cov();[this._e,this._w]=c.eigen();const a=this._e.reduce((n,_)=>n+_,0);this._e=this._e.map(n=>n/a)}_gram(t){t=r.fromArray(t);const s=t.rows,e=this._x.rows,o=new r(s,e);for(let i=0;i<s;i++)for(let c=0;c<e;c++){const a=this._kernel(t.row(i),this._x.row(c));o.set(i,c,a)}return o}predict(t,s=0){const e=this._w;return s>0&&s<e.cols&&e.resize(e.rows,s),t=this._gram(t),t.dot(e).toArray()}}export class AnomalyPCA extends PCA{static{u(this,"AnomalyPCA")}constructor(){super()}fit(t){t=r.fromArray(t),this._m=t.mean(0),t.sub(this._m),super.fit(t)}predict(t){t=r.fromArray(t),t.sub(this._m);const s=this._w.rows;let e=.99,o=0;for(;o<this._e.length-1&&e>=0;o++)e-=this._e[o];o=Math.max(1,o);const i=this._w.slice(0,o,1),c=r.eye(s,s);c.sub(i.dot(i.t));const a=t.dot(c);return a.mult(t),a.sum(1).value}}
