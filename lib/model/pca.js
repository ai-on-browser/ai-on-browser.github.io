import{Matrix}from"../util/math.js";export class PCA{constructor(t=null){this._kernel=t}fit(t){this._x=t=Matrix.fromArray(t);let r=null;if(this._kernel){const r=t.rows,s=new Matrix(r,r),e=[];for(let s=0;s<r;s++)e.push(t.row(s));for(let t=0;t<r;t++)for(let o=t;o<r;o++){const r=this._kernel(e[t],e[o]);s.set(t,o,r),s.set(o,t,r)}t=Matrix.eye(r,r).copySub(1/r).dot(s)}r=t.cov(),[this._e,this._w]=r.eigen();const s=this._e.reduce(((t,r)=>t+r),0);this._e=this._e.map((t=>t/s))}_gram(t){const r=(t=Matrix.fromArray(t)).rows,s=this._x.rows;if(this._kernel){const e=new Matrix(r,s);for(let o=0;o<r;o++)for(let r=0;r<s;r++){const s=this._kernel(t.row(o),this._x.row(r));e.set(o,r,s)}return e}return t}predict(t,r=0){let s=this._w;return r>0&&r<s.cols&&(s=s.resize(s.rows,r)),(t=this._gram(t)).dot(s).toArray()}}export class AnomalyPCA extends PCA{constructor(){super()}fit(t){t=Matrix.fromArray(t),this._m=t.mean(0),t.sub(this._m),super.fit(t)}predict(t){(t=Matrix.fromArray(t)).sub(this._m),t=this._gram(t);const r=this._w.rows;let s=.99,e=0;for(;e<this._e.length-1&&s>=0;e++)s-=this._e[e];e=Math.max(1,e);const o=this._w.sliceCol(0,e),i=Matrix.eye(r,r);i.sub(o.dot(o.t));const n=t.dot(i);return n.mult(t),n.sum(1).value}}