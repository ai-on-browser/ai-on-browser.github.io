import{Matrix}from"../util/math.js";const Kernel={gaussian:(t=1)=>(r,e)=>{const s=r.copySub(e).reduce(((t,r)=>t+r*r),0);return Math.exp(-s/t**2)},polynomial:(t=2)=>(r,e)=>r.tDot(e).value[0]**t};export class PCA{constructor(t=null,r){this._kernel=Kernel[t]?.(...r)}fit(t){this._x=t=Matrix.fromArray(t);let r=null;if(this._kernel){const r=t.rows,e=new Matrix(r,r),s=[];for(let e=0;e<r;e++)s.push(t.row(e));for(let t=0;t<r;t++)for(let o=t;o<r;o++){const r=this._kernel(s[t],s[o]);e.set(t,o,r),e.set(o,t,r)}t=Matrix.eye(r,r).copySub(1/r).dot(e)}r=t.cov(),[this._e,this._w]=r.eigen();const e=this._e.reduce(((t,r)=>t+r),0);this._e=this._e.map((t=>t/e))}_gram(t){const r=(t=Matrix.fromArray(t)).rows,e=this._x.rows;if(this._kernel){const s=new Matrix(r,e);for(let o=0;o<r;o++)for(let r=0;r<e;r++){const e=this._kernel(t.row(o),this._x.row(r));s.set(o,r,e)}return s}return t}predict(t,r=0){let e=this._w;return r>0&&r<e.cols&&(e=e.resize(e.rows,r)),(t=this._gram(t)).dot(e).toArray()}}export class AnomalyPCA extends PCA{constructor(){super()}fit(t){t=Matrix.fromArray(t),this._m=t.mean(0),t.sub(this._m),super.fit(t)}predict(t){(t=Matrix.fromArray(t)).sub(this._m),t=this._gram(t);const r=this._w.rows;let e=.99,s=0;for(;s<this._e.length-1&&e>=0;s++)e-=this._e[s];s=Math.max(1,s);const o=this._w.slice(0,s,1),i=Matrix.eye(r,r);i.sub(o.dot(o.t));const n=t.dot(i);return n.mult(t),n.sum(1).value}}