var m=Object.defineProperty;var u=(h,t)=>m(h,"name",{value:t,configurable:!0});import o from"../util/matrix.js";const f={gaussian:(h=1)=>(t,s)=>{const e=o.sub(t,s).reduce((r,i)=>r+i*i,0);return Math.exp(-e/h**2)},polynomial:(h=2)=>(t,s)=>t.dot(s.t).toScaler()**h};export class PCA{static{u(this,"PCA")}fit(t){t=o.fromArray(t);const s=t.cov();[this._e,this._w]=s.eigen();const e=this._e.reduce((r,i)=>r+i,0);this._e=this._e.map(r=>r/e)}predict(t,s=0){t=o.fromArray(t);const e=this._w;return s>0&&s<e.cols&&e.resize(e.rows,s),t.dot(e).toArray()}}export class DualPCA{static{u(this,"DualPCA")}fit(t){this._x=o.fromArray(t),this._x.sub(this._x.mean(0));const s=this._x.dot(this._x.t);[this._e,this._w]=s.eigen(),this._w.div(o.map(new o(1,this._e.length,this._e),Math.sqrt));const e=this._e.reduce((r,i)=>r+i,0);this._e=this._e.map(r=>r/e)}predict(t,s=0){t=o.fromArray(t);const e=this._w;return s>0&&s<e.cols&&e.resize(e.rows,s),t.dot(this._x.tDot(e)).toArray()}}export class KernelPCA{static{u(this,"KernelPCA")}constructor(t,s=[]){typeof t=="function"?this._kernel=(e,r)=>t(e.value,r.value):this._kernel=f[t](...s)}fit(t){this._x=o.fromArray(t);const s=this._x.rows,e=new o(s,s),r=[];for(let n=0;n<s;n++)r.push(this._x.row(n));for(let n=0;n<s;n++)for(let _=n;_<s;_++){const l=this._kernel(r[n],r[_]);e.set(n,_,l),e.set(_,n,l)}const c=o.sub(o.eye(s,s),1/s).dot(e).cov();[this._e,this._w]=c.eigen();const a=this._e.reduce((n,_)=>n+_,0);this._e=this._e.map(n=>n/a)}_gram(t){t=o.fromArray(t);const s=t.rows,e=this._x.rows,r=new o(s,e);for(let i=0;i<s;i++)for(let c=0;c<e;c++){const a=this._kernel(t.row(i),this._x.row(c));r.set(i,c,a)}return r}predict(t,s=0){const e=this._w;return s>0&&s<e.cols&&e.resize(e.rows,s),t=this._gram(t),t.dot(e).toArray()}}export class AnomalyPCA extends PCA{static{u(this,"AnomalyPCA")}constructor(){super()}fit(t){t=o.fromArray(t),this._m=t.mean(0),t.sub(this._m),super.fit(t)}predict(t){t=o.fromArray(t),t.sub(this._m);const s=this._w.rows;let e=.99,r=0;for(;r<this._e.length-1&&e>=0;r++)e-=this._e[r];r=Math.max(1,r);const i=this._w.slice(0,r,1),c=o.eye(s,s);c.sub(i.dot(i.t));const a=t.dot(c);return a.mult(t),a.sum(1).value}}
