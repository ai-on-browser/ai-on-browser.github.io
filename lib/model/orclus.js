var y=Object.defineProperty;var u=(k,s)=>y(k,"name",{value:s,configurable:!0});import M from"../util/matrix.js";export default class A{static{u(this,"ORCLUS")}constructor(s,c,r){this._k=s,this._k0=c,this._l=r,this._alpha=.5,this._beta=null}_pdist(s,c,r){return Math.sqrt(r.reduce((e,h)=>e+(h.reduce((t,i,a)=>t+i*s[a],0)-h.reduce((t,i,a)=>t+i*c[a],0))**2,0))}fit(s){this._x=s;const c=this._x[0].length,r=[];for(let t=0;t<this._k0;t++)r.push(Math.floor(Math.random()*(this._x.length-t)));for(let t=r.length-1;t>=0;t--)for(let i=r.length-1;i>t;i--)r[t]<=r[i]&&r[i]++;this._s=r.map(t=>this._x[t]);let e=c,h=this._k0;this._e=[];for(let t=0;t<h;t++){this._e[t]=[];for(let i=0;i<e;i++)this._e[t][i]=Array(c).fill(0),this._e[t][i][i]=1}for(this._beta=Math.exp(-Math.log(c/this._l)*Math.log(1/this._alpha)/Math.log(this._k0/this._k));h>this._k;){const[t,i]=this._assign();this._s=t;for(let f=0;f<h;f++)this._e[f]=this._findVectors(i[f],e);const a=Math.max(this._k,h*this._alpha),m=Math.max(this._l,e*this._beta),[l,,n]=this._merge(i,a,m);this._s=l,this._e=n,e=m,h=this._s.length}}_assign(){const s=this._x[0].length,c=Array.from(this._s,()=>[]);for(let e=0;e<this._x.length;e++){let h=1/0,t=-1;for(let i=0;i<this._s.length;i++){const a=this._pdist(this._x[e],this._s[i],this._e[i]);a<h&&(h=a,t=i)}c[t].push(e)}const r=[];for(let e=0;e<c.length;e++){r[e]=Array(s).fill(0);for(let h=0;h<c[e].length;h++)for(let t=0;t<s;t++)r[e][t]+=this._x[c[e][h]][t];r[e]=r[e].map(h=>h/c[e].length)}return[r,c]}_findVectors(s,c){if(s.length===0)return[];const r=this._x[0].length;return M.fromArray(s.map(t=>this._x[t])).cov().eigenVectors().slice(r-Math.ceil(c),r,1).t.toArray()}_merge(s,c,r){const e=this._x[0].length,h=Array.from(s,()=>[]),t=Array.from(s,()=>[]),i=Array.from(s,()=>[]);for(let l=0;l<s.length;l++)for(let n=l+1;n<s.length;n++){const f=s[l].concat(s[n]);h[l][n]=this._findVectors(f,r),t[l][n]=Array(e).fill(0);for(let o=0;o<f.length;o++)for(let _=0;_<e;_++)t[l][n][_]+=this._x[f[o]][_];t[l][n]=t[l][n].map(o=>o/f.length),i[l][n]=0;for(let o=0;o<f.length;o++)i[l][n]+=this._pdist(this._x[f[o]],t[l][n],h[l][n])**2;i[l][n]/=f.length}s=s.concat();const a=this._s.concat(),m=this._e.concat();for(;a.length>c;){let l=-1,n=-1,f=1/0;for(let o=0;o<i.length;o++)for(let _=o+1;_<i.length;_++)i[o][_]<f&&(f=i[o][_],l=o,n=_);a[l]=t[l][n],s[l]=s[l].concat(s[n]),m[l]=h[l][n],a.splice(n,1),s.splice(n,1),m.splice(n,1),t.splice(n,1),h.splice(n,1),i.splice(n,1);for(let o=0;o<a.length;o++)if(t[o].splice(n,1),h[o].splice(n,1),i[o].splice(n,1),o!==l){const _=o<l?o:l,g=o<l?l:o,p=s[_].concat(s[g]);h[_][g]=this._findVectors(p,r),t[_][g]=Array(e).fill(0);for(let d=0;d<p.length;d++)for(let x=0;x<e;x++)t[_][g][x]+=this._x[p[d]][x];t[_][g]=t[_][g].map(d=>d/p.length),i[_][g]=0;for(let d=0;d<p.length;d++)i[_][g]+=this._pdist(this._x[p[d]],t[_][g],h[_][g])**2;i[_][g]/=p.length}}return[a,s,m]}predict(s){const c=[];for(let r=0;r<s.length;r++){let e=1/0,h=-1;for(let t=0;t<this._s.length;t++){const i=this._pdist(s[r],this._s[t],this._e[t]);i<e&&(e=i,h=t)}c[r]=h}return c}}
