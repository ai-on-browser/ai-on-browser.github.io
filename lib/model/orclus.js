import Matrix from"../util/matrix.js";export default class ORCLUS{constructor(t,s,e){this._k=t,this._k0=s,this._l=e,this._alpha=.5,this._beta=null,this._d=(t,s)=>Math.sqrt(t.reduce(((t,e,h)=>t+(e-s[h])**2),0))}_pdist(t,s,e){return Math.sqrt(e.reduce(((e,h)=>e+(h.reduce(((s,e,h)=>s+e*t[h]),0)-h.reduce(((t,e,h)=>t+e*s[h]),0))**2),0))}fit(t){this._x=t;const s=this._x[0].length,e=[];for(let t=0;t<this._k0;t++)e.push(Math.floor(Math.random()*(this._x.length-t)));for(let t=e.length-1;t>=0;t--)for(let s=e.length-1;s>t;s--)e[t]<=e[s]&&e[s]++;this._s=e.map((t=>this._x[t]));let h=s,i=this._k0;this._e=[];for(let t=0;t<i;t++){this._e[t]=[];for(let e=0;e<h;e++)this._e[t][e]=Array(s).fill(0),this._e[t][e][e]=1}for(this._beta=Math.exp(-Math.log(s/this._l)*Math.log(1/this._alpha)/Math.log(this._k0/this._k));i>this._k;){const[t,s]=this._assign();this._s=t;for(let t=0;t<i;t++)this._e[t]=this._findVectors(s[t],h);const e=Math.max(this._k,i*this._alpha),l=Math.max(this._l,h*this._beta),[r,,o]=this._merge(s,e,l);this._s=r,this._e=o,h=l,i=this._s.length}}_assign(){const t=this._x[0].length,s=Array.from(this._s,(()=>[]));for(let t=0;t<this._x.length;t++){let e=1/0,h=-1;for(let s=0;s<this._s.length;s++){const i=this._pdist(this._x[t],this._s[s],this._e[s]);i<e&&(e=i,h=s)}s[h].push(t)}const e=[];for(let h=0;h<s.length;h++){e[h]=Array(t).fill(0);for(let i=0;i<s[h].length;i++)for(let l=0;l<t;l++)e[h][l]+=this._x[s[h][i]][l];e[h]=e[h].map((t=>t/s[h].length))}return[e,s]}_findVectors(t,s){const e=this._x[0].length;return Matrix.fromArray(t.map((t=>this._x[t]))).cov().eigenVectors().slice(e-Math.ceil(s),e,1).t.toArray()}_merge(t,s,e){const h=this._x[0].length,i=Array.from(t,(()=>[])),l=Array.from(t,(()=>[])),r=Array.from(t,(()=>[]));for(let s=0;s<t.length;s++)for(let o=s+1;o<t.length;o++){const _=t[s].concat(t[o]);i[s][o]=this._findVectors(_,e),l[s][o]=Array(h).fill(0);for(let t=0;t<_.length;t++)for(let e=0;e<h;e++)l[s][o][e]+=this._x[_[t]][e];l[s][o]=l[s][o].map((t=>t/_.length)),r[s][o]=0;for(let t=0;t<_.length;t++)r[s][o]+=this._pdist(this._x[_[t]],l[s][o],i[s][o])**2;r[s][o]/=_.length}t=t.concat();const o=this._s.concat(),_=this._e.concat();for(;o.length>s;){let s=-1,n=-1,a=1/0;for(let t=0;t<r.length;t++)for(let e=t+1;e<r.length;e++)r[t][e]<a&&(a=r[t][e],s=t,n=e);o[s]=l[s][n],t[s]=t[s].concat(t[n]),_[s]=i[s][n],o.splice(n,1),t.splice(n,1),_.splice(n,1),l.splice(n,1),i.splice(n,1),r.splice(n,1);for(let _=0;_<o.length;_++)if(l[_].splice(n,1),i[_].splice(n,1),r[_].splice(n,1),_!==s){const o=_<s?_:s,n=_<s?s:_,a=t[o].concat(t[n]);i[o][n]=this._findVectors(a,e),l[o][n]=Array(h).fill(0);for(let t=0;t<a.length;t++)for(let s=0;s<h;s++)l[o][n][s]+=this._x[a[t]][s];l[o][n]=l[o][n].map((t=>t/a.length)),r[o][n]=0;for(let t=0;t<a.length;t++)r[o][n]+=this._pdist(this._x[a[t]],l[o][n],i[o][n])**2;r[o][n]/=a.length}}return[o,t,_]}predict(t){const s=[];for(let e=0;e<t.length;e++){let h=1/0,i=-1;for(let s=0;s<this._s.length;s++){const l=this._pdist(t[e],this._s[s],this._e[s]);l<h&&(h=l,i=s)}s[e]=i}return s}}