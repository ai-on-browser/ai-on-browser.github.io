var w=Object.defineProperty;var a=(_,i)=>w(_,"name",{value:i,configurable:!0});class b{static{a(this,"Link")}constructor(){this._link=[]}at(i,e){return i<e?this._link[i]?.[e]||0:this._link[e]?.[i]||0}set(i,e,h){i<e?(this._link[i]||=[],this._link[i][e]=h):(this._link[e]||=[],this._link[e][i]=h)}}export default class C{static{a(this,"ROCK")}constructor(i,e){this._th=i,this._k=e}_f(){return(1-this._th)/(1+this._th)}_g(i,e,h){const s=i.leafs,t=e.leafs;let o=0;for(let r=0;r<s.length;r++)for(let c=0;c<t.length;c++)o+=h.at(s[r].index,t[c].index);const n=1+2*this._f();return o/((s.length+t.length)**n-s.length**n-t.length**n)}_sim(i,e){return 1/(1+Math.sqrt(i.reduce((h,s,t)=>h+(s-e[t])**2,0)))}_link(i){const e=i.length,h=[];for(let t=0;t<e;h[t++]=[]);for(let t=0;t<e;t++)for(let o=t+1;o<e;o++)this._sim(i[t],i[o])>=this._th&&(h[t].push(o),h[o].push(t));const s=new b;for(let t=0;t<e;t++){const o=h[t];for(let n=0;n<o.length;n++)for(let r=n+1;r<o.length-1;r++)s.set(o[n],o[r],s.at(o[n],o[r])+1)}return s}fit(i){const e=this._link(i),h=i.length,s=[];for(let n=0;n<h;n++)s.push({point:i[n],index:n,distance:0,get leafs(){return[this]}});const t=[];for(let n=0;n<h;n++){t[n]=[];for(let r=0;r<h;r++)e.at(n,r)>0&&t[n].push({index:r,g:this._g(s[n],s[r],e)});t[n].sort((r,c)=>c.g-r.g),s[n].g=t[n][0]?.g||0}s.sort((n,r)=>r.g-n.g);let o=h;for(;s.length>2;){const n=s.shift();if(n.g===0){s.push(n);break}const r=n.index,c=t[r][0].index;let k=null;for(let l=0;l<s.length;l++)if(s[l].index===c){k=s.splice(l,1)[0];break}const f=o++,x={index:f,children:[n,k],get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}},g=[...new Set([...t[r].map(l=>l.index),...t[c].map(l=>l.index)])];t[f]=[];for(let l=0;l<g.length;l++){if(g[l]===r||g[l]===c)continue;e.set(f,g[l],e.at(r,g[l])+e.at(c,g[l]));const d=s.find(u=>u.index===g[l]),p=this._g(x,d,e);t[f].push({index:g[l],g:p}),t[g[l]]=t[g[l]].filter(u=>u.index!==r&&u.index!==c),t[g[l]].push({index:f,g:p}),t[g[l]].sort((u,m)=>m.g-u.g),d.g=t[g[l]][0].g}t[r]=[],t[c]=[],t[f].sort((l,d)=>d.g-l.g),x.g=t[f][0]?.g||0,s.push(x),s.sort((l,d)=>d.g-l.g)}this._root={g:0,children:s,get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}}}getClusters(i){const e=this._root.children;for(;e.length<i;){let h=1/0,s=-1;for(let o=0;o<e.length;o++){const n=e[o];n.children&&n.g<h&&(s=o,h=n.g)}if(s===-1)break;const t=e[s];e.splice(s,1,t.children[0],t.children[1])}return e}predict(){const i=[],e=this.getClusters(this._k);for(let h=0;h<e.length;h++){const s=e[h].leafs;for(let t=0;t<s.length;t++)i[s[t].index]=h}return i}}
