var w=Object.defineProperty;var a=(_,i)=>w(_,"name",{value:i,configurable:!0});class b{static{a(this,"Link")}constructor(){this._link=[]}at(i,s){return i<s?this._link[i]?.[s]||0:this._link[s]?.[i]||0}set(i,s,o){i<s?(this._link[i]||=[],this._link[i][s]=o):(this._link[s]||=[],this._link[s][i]=o)}}export default class C{static{a(this,"ROCK")}constructor(i){this._th=i}_f(){return(1-this._th)/(1+this._th)}_g(i,s,o){const e=i.leafs,t=s.leafs;let r=0;for(let h=0;h<e.length;h++)for(let c=0;c<t.length;c++)r+=o.at(e[h].index,t[c].index);const n=1+2*this._f();return r/((e.length+t.length)**n-e.length**n-t.length**n)}_sim(i,s){return 1/(1+Math.sqrt(i.reduce((o,e,t)=>o+(e-s[t])**2,0)))}_link(i){const s=i.length,o=[];for(let t=0;t<s;o[t++]=[]);for(let t=0;t<s;t++)for(let r=t+1;r<s;r++)this._sim(i[t],i[r])>=this._th&&(o[t].push(r),o[r].push(t));const e=new b;for(let t=0;t<s;t++){const r=o[t];for(let n=0;n<r.length;n++)for(let h=n+1;h<r.length-1;h++)e.set(r[n],r[h],e.at(r[n],r[h])+1)}return e}fit(i){const s=this._link(i),o=i.length,e=[];for(let n=0;n<o;n++)e.push({point:i[n],index:n,distance:0,get leafs(){return[this]}});const t=[];for(let n=0;n<o;n++){t[n]=[];for(let h=0;h<o;h++)s.at(n,h)>0&&t[n].push({index:h,g:this._g(e[n],e[h],s)});t[n].sort((h,c)=>c.g-h.g),e[n].g=t[n][0]?.g||0}e.sort((n,h)=>h.g-n.g);let r=o;for(;e.length>2;){const n=e.shift();if(n.g===0){e.push(n);break}const h=n.index,c=t[h][0].index;let p=null;for(let l=0;l<e.length;l++)if(e[l].index===c){p=e.splice(l,1)[0];break}const f=r++,x={index:f,children:[n,p],get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}},g=[...new Set([...t[h].map(l=>l.index),...t[c].map(l=>l.index)])];t[f]=[];for(let l=0;l<g.length;l++){if(g[l]===h||g[l]===c)continue;s.set(f,g[l],s.at(h,g[l])+s.at(c,g[l]));const d=e.find(u=>u.index===g[l]),k=this._g(x,d,s);t[f].push({index:g[l],g:k}),t[g[l]]=t[g[l]].filter(u=>u.index!==h&&u.index!==c),t[g[l]].push({index:f,g:k}),t[g[l]].sort((u,m)=>m.g-u.g),d.g=t[g[l]][0].g}t[h]=[],t[c]=[],t[f].sort((l,d)=>d.g-l.g),x.g=t[f][0]?.g||0,e.push(x),e.sort((l,d)=>d.g-l.g)}this._root={g:0,children:e,get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}}}getClusters(i){const s=this._root.children;for(;s.length<i;){let o=1/0,e=-1;for(let r=0;r<s.length;r++){const n=s[r];n.children&&n.g<o&&(e=r,o=n.g)}if(e===-1)break;const t=s[e];s.splice(e,1,t.children[0],t.children[1])}return s}predict(i){const s=[],o=this.getClusters(i);for(let e=0;e<o.length;e++){const t=o[e].leafs;for(let r=0;r<t.length;r++)s[t[r].index]=e}return s}}
