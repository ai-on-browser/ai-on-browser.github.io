class Link{constructor(){this._link=[]}at(t,e){return t<e?this._link[t]?.[e]||0:this._link[e]?.[t]||0}set(t,e,n){t<e?(this._link[t]||=[],this._link[t][e]=n):(this._link[e]||=[],this._link[e][t]=n)}}export default class ROCK{constructor(t){this._th=t}_f(){return(1-this._th)/(1+this._th)}_g(t,e,n){const s=t.leafs,i=e.leafs;let l=0;for(let t=0;t<s.length;t++)for(let e=0;e<i.length;e++)l+=n.at(s[t].index,i[e].index);const r=1+2*this._f();return l/((s.length+i.length)**r-s.length**r-i.length**r)}_sim(t,e){return 1/(1+Math.sqrt(t.reduce(((t,n,s)=>t+(n-e[s])**2),0)))}_link(t){const e=t.length,n=[];for(let t=0;t<e;n[t++]=[]);for(let s=0;s<e;s++)for(let i=s+1;i<e;i++)this._sim(t[s],t[i])>=this._th&&(n[s].push(i),n[i].push(s));const s=new Link;for(let t=0;t<e;t++){const e=n[t];for(let t=0;t<e.length;t++)for(let n=t+1;n<e.length-1;n++)s.set(e[t],e[n],s.at(e[t],e[n])+1)}return s}fit(t){const e=this._link(t),n=t.length,s=[];for(let e=0;e<n;e++)s.push({point:t[e],index:e,distance:0,get leafs(){return[this]}});const i=[];for(let t=0;t<n;t++){i[t]=[];for(let l=0;l<n;l++)e.at(t,l)>0&&i[t].push({index:l,g:this._g(s[t],s[l],e)});i[t].sort(((t,e)=>e.g-t.g)),s[t].g=i[t][0]?.g||0}s.sort(((t,e)=>e.g-t.g));let l=n;for(;s.length>2;){const t=s.shift();if(0===t.g){s.push(t);break}const n=t.index,r=i[n][0].index;let h=null;for(let t=0;t<s.length;t++)if(s[t].index===r){h=s.splice(t,1)[0];break}const o=l++,g={index:o,children:[t,h],get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}},f=[...new Set([...i[n].map((t=>t.index)),...i[r].map((t=>t.index))])];i[o]=[];for(let t=0;t<f.length;t++){if(f[t]===n||f[t]===r)continue;e.set(o,f[t],e.at(n,f[t])+e.at(r,f[t]));const l=s.find((e=>e.index===f[t])),h=this._g(g,l,e);i[o].push({index:f[t],g:h}),i[f[t]]=i[f[t]].filter((t=>t.index!==n&&t.index!==r)),i[f[t]].push({index:o,g:h}),i[f[t]].sort(((t,e)=>e.g-t.g)),l.g=i[f[t]][0].g}i[n]=[],i[r]=[],i[o].sort(((t,e)=>e.g-t.g)),g.g=i[o][0]?.g||0,s.push(g),s.sort(((t,e)=>e.g-t.g))}this._root={g:0,children:s,get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}}}getClusters(t){const e=this._root.children;for(;e.length<t;){let t=1/0,n=-1;for(let s=0;s<e.length;s++){const i=e[s];i.children&&i.g<t&&(n=s,t=i.g)}if(-1===n)break;const s=e[n];e.splice(n,1,s.children[0],s.children[1])}return e}predict(t){const e=[],n=this.getClusters(t);for(let t=0;t<n.length;t++){const s=n[t].leafs;for(let n=0;n<s.length;n++)e[s[n].index]=t}return e}}