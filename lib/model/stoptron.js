var f=Object.defineProperty;var r=(h,s)=>f(h,"name",{value:s,configurable:!0});const _={gaussian:r(({s:h=1})=>(s,t)=>Math.exp(-(s.reduce((i,e,n)=>i+(e-t[n])**2,0)**2)/h**2),"gaussian"),polynomial:r(({d:h=2})=>(s,t)=>(1+s.reduce((i,e,n)=>i+e*t[n]))**h,"polynomial")};export default class c{static{r(this,"Stoptron")}constructor(s=10,t="gaussian"){this._n=s,typeof t=="function"?this._kernel=t:(typeof t=="string"&&(t={name:t}),this._kernel=_[t.name](t)),this._i=[]}fit(s,t){for(let i=0;i<s.length;i++){if(this._i.length>this._n)return;let e=0;for(let o=0;o<this._i.length;o++){const l=this._i[o];e+=l.y*this._kernel(s[i],l.x)}(e<0?-1:1)!==t[i]&&this._i.push({x:s[i],y:t[i]})}}predict(s){const t=[];for(let i=0;i<s.length;i++){let e=0;for(let n=0;n<this._i.length;n++){const o=this._i[n];e+=o.y*this._kernel(s[i],o.x)}t[i]=e<0?-1:1}return t}}
