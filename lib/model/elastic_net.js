import Matrix from"../util/matrix.js";export default class ElasticNet{constructor(t=.1,s=.5,i="CD"){this._w=null,this._method=i,this._lambda=t,this._alpha=s}_soft_thresholding(t,s){t.map((t=>t<-s?t+s:t>s?t-s:0))}_calc_b0(t,s){let i=this._w.copy();for(let t=0;t<i.cols;t++)i.set(i.rows-1,t,0);let o=t.dot(i);o.isub(s);let a=o.sum(0);a.div(t.rows),this._w.set(this._w.rows-1,0,a)}fit(t,s){t=Matrix.fromArray(t),s=Matrix.fromArray(s),this._w||(this._w=Matrix.randn(t.cols,s.cols));const i=this._lambda*this._alpha,o=this._lambda*(1-this._alpha),a=t.cols;t.concat(Matrix.eye(a,a,Math.sqrt(o)),0),t.div(Math.sqrt(1+o)),s.concat(Matrix.zeros(a,s.cols),0),this._w.mult(Math.sqrt(1+o));const h=i/Math.sqrt(1+o);if("ISTA"===this._method){let i=t.tDot(t);i.map((t=>Math.abs(t)));const o=Math.max.apply(null,i.sum(0).value)/h;let a=t.dot(this._w);a.isub(s),a=t.t.dot(a),a.div(h*o),a.add(this._w),this._soft_thresholding(a,1/o),this._w=a}else if("CD"===this._method)for(let i=0;i<this._w.rows;i++){let o=t.col(i),a=this._w.copy();for(let t=0;t<this._w.cols;t++)a.set(i,t,0);a=t.dot(a),a.isub(s);let r=o.tDot(a);this._soft_thresholding(r,h),r.div(o.tDot(o)),this._w.set(i,0,r)}this._w.div(Math.sqrt(1+o))}predict(t){return(t=Matrix.fromArray(t)).dot(this._w).toArray()}importance(){return this._w.value}}