var n=Object.defineProperty;var m=(w,t)=>n(w,"name",{value:t,configurable:!0});import _ from"../util/matrix.js";export default class f{static{m(this,"ElasticNet")}constructor(t=.1,s=.5,i="CD"){this._w=null,this._method=i,this._lambda=t,this._alpha=s}_soft_thresholding(t,s){t.map(i=>i<-s?i+s:i>s?i-s:0)}_calc_b0(t,s){let i=this._w.copy();for(let r=0;r<i.cols;r++)i.set(i.rows-1,r,0);let h=t.dot(i);h.isub(s);let e=h.sum(0);e.div(t.rows),this._w.set(this._w.rows-1,0,e)}fit(t,s){t=_.fromArray(t),s=_.fromArray(s),this._w||(this._w=_.randn(t.cols,s.cols));const i=this._lambda*this._alpha,h=this._lambda*(1-this._alpha),e=t.cols;t.concat(_.eye(e,e,Math.sqrt(h)),0),t.div(Math.sqrt(1+h)),s.concat(_.zeros(e,s.cols),0),this._w.mult(Math.sqrt(1+h));const r=i/Math.sqrt(1+h);if(this._method==="ISTA"){let a=t.tDot(t);a.map(c=>Math.abs(c));const l=Math.max.apply(null,a.sum(0).value)/r;let o=t.dot(this._w);o.isub(s),o=t.t.dot(o),o.div(r*l),o.add(this._w),this._soft_thresholding(o,1/l),this._w=o}else if(this._method==="CD")for(let a=0;a<this._w.rows;a++){let d=t.col(a),l=this._w.copy();for(let c=0;c<this._w.cols;c++)l.set(a,c,0);l=t.dot(l),l.isub(s);let o=d.tDot(l);this._soft_thresholding(o,r),o.div(d.tDot(d)),this._w.set(a,0,o)}this._w.div(Math.sqrt(1+h))}predict(t){return t=_.fromArray(t),t.dot(this._w).toArray()}importance(){return this._w.value}}
