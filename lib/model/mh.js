const normal_random=function(t=0,s=1){const a=Math.sqrt(s),o=Math.random(),n=Math.random();return Math.sqrt(-2*Math.log(o))*Math.cos(2*Math.PI*n)*a+t};export default class MetropolisHastings{constructor(t,s,a="gaussian"){this._f=t,this._d=s,"gaussian"===a&&(this._q=(t,s)=>Math.exp(-t.reduce(((t,a,o)=>t+(a-s[o])**2),0)/2))}sample(t,s=100){let a=Array(this._d).fill(1);const o=[];for(;o.length<t;){for(let t=0;t<s;t++){const t=a.concat();for(let s=0;s<t.length;s++)t[s]+=normal_random(0,1);const s=this._f(t)/this._f(a)*(this._q(a,t)/this._q(t,a));Math.random()<s&&(a=t)}o.push(a)}return o}}