import{Matrix}from"../util/math.js";export default class QuadraticDiscriminant{constructor(){this._m=[],this._s=[],this._sinv=[],this._c=[],this._categories=[]}fit(t,s){this._m=[],this._s=[],this._sinv=[],this._c=[],this._categories=[];const i=t.length,h=new Set(s);for(const o of h){const h=[];for(let i=0;i<s.length;i++)s[i]===o&&h.push(t[i]);if(0===h.length)break;const e=Matrix.fromArray(h);this._m.push(e.mean(0));const r=e.cov();this._s.push(r),this._sinv.push(r.inv()),this._c.push(Math.log(e.rows/i)-Math.log(r.det())/2),this._categories.push(o)}}predict(t){return t.map((t=>{const s=this._m.length,i=new Matrix(1,t.length,t);let h=-1,o=-1/0;for(let t=0;t<s;t++){const s=i.copySub(this._m[t]),e=this._c[t]-s.dot(this._sinv[t]).dot(s.t).toScaler()/2;o<e&&(o=e,h=t)}return this._categories[h]}))}}