var _=Object.defineProperty;var n=(c,t)=>_(c,"name",{value:t,configurable:!0});import d from"./neuralnetwork.js";export default class u{static{n(this,"RNN")}constructor(t="lstm",o=10,s=10,e=1,h="adam"){this._window=o,this._method=t,this._layers=[{type:"input"}],this._layers.push({type:t,size:s}),this._layers.push({type:"full",out_size:e}),this._model=d.fromObject(this._layers,"mse",h),this._epoch=0}get method(){return this._method}get epoch(){return this._epoch}fit(t,o,s,e,h){const i=[];for(let l=0;l<t.length-this._window;l++)i.push(t.slice(l,l+this._window));const r=o.slice(this._window),p=this._model.fit(i,r,s,e,h);return this._epoch+=s,p[0]}predict(t,o){const s=[],e=t.slice(t.length-this._window);for(let h=0;h<o;h++){const i=[e],r=this._model.calc(i).toArray()[0];s.push(r),e.push(r),e.shift()}return s}}
