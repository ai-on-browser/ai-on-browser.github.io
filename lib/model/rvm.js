var f=Object.defineProperty;var l=(_,s)=>f(_,"name",{value:s,configurable:!0});import i from"../util/matrix.js";export default class p{static{l(this,"RVM")}constructor(){this._alpha=1,this._beta=1}_kernel(s,n){const o=i.sub(s,n);return Math.exp(-10*o.norm()**2)}fit(s,n){this._x=s=i.fromArray(s),n=i.fromArray(n);const o=s.rows,a=new i(o,o);for(let t=0;t<o;t++)for(let e=t;e<o;e++){const c=this._kernel(s.row(t),s.row(e));a.set(t,e,c),a.set(e,t,c)}const m=Array(o).fill(this._alpha);let h=1;for(;h-- >0;){const t=a.tDot(a);t.mult(this._beta),t.add(i.diag(m)),this._cov=t.inv(),this._mean=this._cov.dot(a.tDot(n)),this._mean.mult(this._beta);const e=[];for(let r=0;r<o;r++)e.push(1-m[r]*this._cov.at(r,r)),m[r]=e[r]/Math.sqrt(this._mean.at(r,0));const c=i.sub(n,a.dot(this._mean));c.map(r=>r**2),this._beta=(o-e.reduce((r,u)=>r+u,0))/c.sum()}}predict(s){const n=this._x.rows;s=i.fromArray(s);const o=s.rows,a=new i(o,n);for(let h=0;h<o;h++)for(let t=0;t<n;t++){const e=this._kernel(s.row(h),this._x.row(t));a.set(h,t,e)}return a.dot(this._mean).value}}
