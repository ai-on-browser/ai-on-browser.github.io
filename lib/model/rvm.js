import Matrix from"../util/matrix.js";export default class RVM{constructor(){this._alpha=1,this._beta=1}_kernel(t,r){const s=Matrix.sub(t,r);return Math.exp(-10*s.norm()**2)}fit(t,r){this._x=t=Matrix.fromArray(t),r=Matrix.fromArray(r);const s=t.rows,o=new Matrix(s,s);for(let r=0;r<s;r++)for(let a=r;a<s;a++){const s=this._kernel(t.row(r),t.row(a));o.set(r,a,s),o.set(a,r,s)}const a=Array(s).fill(this._alpha);let i=1;for(;i-- >0;){const t=o.tDot(o);t.mult(this._beta),t.add(Matrix.diag(a)),this._cov=t.inv(),this._mean=this._cov.dot(o.tDot(r)),this._mean.mult(this._beta);const i=[];for(let t=0;t<s;t++)i.push(1-a[t]*this._cov.at(t,t)),a[t]=i[t]/Math.sqrt(this._mean.at(t,0));const e=Matrix.sub(r,o.dot(this._mean));e.map((t=>t**2)),this._beta=(s-i.reduce(((t,r)=>t+r),0))/e.sum()}}predict(t){const r=this._x.rows,s=(t=Matrix.fromArray(t)).rows,o=new Matrix(s,r);for(let a=0;a<s;a++)for(let s=0;s<r;s++){const r=this._kernel(t.row(a),this._x.row(s));o.set(a,s,r)}return o.dot(this._mean).value}}