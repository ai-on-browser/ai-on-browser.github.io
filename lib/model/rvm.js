import{Matrix}from"../util/math.js";export default class RVM{constructor(){this._alpha=1,this._beta=1}_kernel(t,r){const o=t.copySub(r);return Math.exp(-10*o.norm()**2)}fit(t,r){this._x=t=Matrix.fromArray(t),r=Matrix.fromArray(r);const o=t.rows,s=new Matrix(o,o);for(let r=0;r<o;r++)for(let a=r;a<o;a++){const o=this._kernel(t.row(r),t.row(a));s.set(r,a,o),s.set(a,r,o)}const a=Array(o).fill(this._alpha);let e=1;for(;e-- >0;){const t=s.tDot(s);t.mult(this._beta),t.add(Matrix.diag(a)),this._cov=t.inv(),this._mean=this._cov.dot(s.tDot(r)),this._mean.mult(this._beta);const e=[];for(let t=0;t<o;t++)e.push(1-a[t]*this._cov.at(t,t)),a[t]=e[t]/Math.sqrt(this._mean.at(t,0));const i=r.copySub(s.dot(this._mean));i.map((t=>t**2)),this._beta=(o-e.reduce(((t,r)=>t+r),0))/i.sum()}}predict(t){const r=this._x.rows,o=(t=Matrix.fromArray(t)).rows,s=new Matrix(o,r);for(let a=0;a<o;a++)for(let o=0;o<r;o++){const r=this._kernel(t.row(a),this._x.row(o));s.set(a,o,r)}return s.dot(this._mean).value}}