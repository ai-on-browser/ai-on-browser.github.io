var z=Object.defineProperty;var w=(m,l)=>z(m,"name",{value:l,configurable:!0});class S{static{w(this,"PriorityQueue")}constructor(l){this._value=l||[]}get length(){return this._value.length}[Symbol.iterator](){return this._value[Symbol.iterator]()}_sort(){this._value.sort((l,h)=>l[1]-h[1])}push(l,h){this._value.push([l,h]),this._sort()}move(l,h){for(let c=0;c<this.length;c++)if(this._value[c][0]===l){this._value[c][1]=h,this._sort();return}this.push(l,h)}shift(){const[l]=this._value.shift();return l}}export default class y{static{w(this,"DiSH")}constructor(l,h){this._mu=l,this._e=h}predict(l){const h=l.length,c=l[0].length,a=[];for(let t=0;t<h;t++){const e=[];for(let o=0;o<c;o++){e[o]=new Set;for(let u=0;u<h;u++)Math.abs(l[t][o]-l[u][o])<=this._e&&e[o].add(u)}const n=new Set;let r=-1,s=-1;for(let o=0;o<c;o++)e[o].size>=this._mu&&(r<0?(r=e[o].size,s=o):e[o].size<r?(n.add(s),r=e[o].size,s=o):n.add(o));if(a[t]=Array(c).fill(0),s<0)continue;a[t][s]=1;let f=e[s];for(;n.length>0;){let o=-1,u=-1;for(const p of n){const v=new Set;for(const b of f)e[p].has(b)&&v.add(b);e[p]=v,e[p].size>=o&&(o=e[p].size,u=p)}if(o<this._mu)break;a[t][u]=1,n.delete(u),f=e[u]}}const g=new S;for(let t=0;t<h;t++)g.push(t,1/0);const _=[];for(let t=0;t<h;t++){_[t]=[],_[t][t]=[t,0];for(let e=0;e<t;e++){let n=0,r=0;for(let f=0;f<c;f++)(a[t][f]===0||a[e][f]===0)&&n++,a[t][f]===1&&a[e][f]===1&&(r+=(l[t][f]-l[e][f])**2);const s=n+(Math.sqrt(r)>2*this._e?1:0);_[t][e]=[e,s],_[e][t]=[t,s]}}const d=[];for(;g.length>0;){const t=g.shift(),e=_[t].concat();e.sort((r,s)=>r[1]-s[1]);const[n]=e[this._mu];for(const[r]of[...g]){const s=Math.max(_[t][n][1],_[t][r][1]);g.move(r,s)}d.push(t)}const i=[];for(let t=0;t<h;t++){let e=null;for(let n=0;n<i.length;n++){if(i[n].w.some((s,f)=>s!==a[d[t]][f]*a[d[t-1]][f]))continue;let r=0;for(let s=0;s<c;s++)i[n].w[s]===1&&(r+=(i[n].center[s]-l[d[t]][s])**2);if(!(Math.sqrt(r)>2*this._e)){e=n;break}}e==null&&(e=i.length,i.push({i:[],center:Array(c).fill(0),w:a[d[t]].concat(),l:a[d[t]].reduce((n,r)=>n+(r===0?1:0),0),parents:[]})),i[e].center=i[e].center.map((n,r)=>(n*i[e].i.length+l[d[t]][r])/(i[e].i.length+1)),i[e].i.push(t)}for(let t=0;t<i.length;t++)for(let e=0;e<i.length;e++){if(i[e].l<=i[t].l)continue;if(i[e].l===c){i[t].parents.push(e);continue}let n=0;for(let s=0;s<c;s++)i[t].w[s]===1&&i[e].w[s]===1&&(n+=(i[t].center[s]-i[e].center[s])**2);if(Math.sqrt(n)>2*this._e)continue;let r=!0;for(let s=0;s<i[t].parents.length;s++)if(i[i[t].parents[s]].l<i[e].l){r=!1;break}r&&i[t].parents.push(e)}this._clusters=i;const k=[];for(let t=0;t<i.length;t++)for(let e=0;e<i[t].i.length;e++)k[i[t].i[e]]=t;return k}}
