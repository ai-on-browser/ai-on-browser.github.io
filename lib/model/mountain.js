import Matrix from"../util/matrix.js";export default class Mountain{constructor(t,i,s){this._resolution=t,this._alpha=i,this._beta=s,this._centroids=[]}_distance(t,i){return Math.sqrt(t.reduce(((t,s,h)=>t+(s-i[h])**2),0))}_max(t){let i=-1/0,s=-1;for(let h=0;h<t.length;h++)t[h]>i&&(i=t[h],s=h);return[i,s]}init(t){this._x=t;const i=t.length,s=t[0].length,h=Matrix.fromArray(t),r=h.min(0),e=h.max(0),_=Matrix.sub(e,r);_.div(2*this._resolution),r.sub(_),e.add(_),this._grid=[];const n=Array(s).fill(0);do{this._grid.push(n.map(((t,i)=>t/(this._resolution-1)*(e.at(0,i)-r.at(0,i))+r.at(0,i))));for(let t=0;t<s&&(n[t]++,!(n[t]<this._resolution));t++)n[t]=0}while(n.reduce(((t,i)=>t+i),0)>0);this._m=[];for(let t=0;t<this._grid.length;t++){let s=0;for(let h=0;h<i;h++)s+=Math.exp(-this._alpha*this._distance(this._x[h],this._grid[t]));this._m[t]=s}this._centroids=[],this._mh=0}fit(){if(this._centroids.length>0){const t=this._centroids[this._centroids.length-1];for(let i=0;i<this._m.length;i++)this._m[i]-=this._mh*Math.exp(-this._beta*this._distance(t,this._grid[i])),this._m[i]=Math.max(0,this._m[i])}const[t,i]=this._max(this._m);this._mh=t,this._centroids.push(this._grid[i])}predict(t){return t.map((t=>{let i=1/0,s=-1;for(let h=0;h<this._centroids.length;h++){const r=this._distance(t,this._centroids[h]);r<i&&(i=r,s=h)}return s}))}}