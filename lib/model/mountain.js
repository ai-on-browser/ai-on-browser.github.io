var f=Object.defineProperty;var m=(d,i)=>f(d,"name",{value:i,configurable:!0});import a from"../util/matrix.js";export default class u{static{m(this,"Mountain")}constructor(i,e,s){this._resolution=i,this._alpha=e,this._beta=s,this._centroids=[]}_distance(i,e){return Math.sqrt(i.reduce((s,t,n)=>s+(t-e[n])**2,0))}_max(i){let e=-1/0,s=-1;for(let t=0;t<i.length;t++)i[t]>e&&(e=i[t],s=t);return[e,s]}init(i){this._x=i;const e=i.length,s=i[0].length,t=a.fromArray(i),n=t.min(0),_=t.max(0),l=a.sub(_,n);l.div(this._resolution*2),n.sub(l),_.add(l),this._grid=[];const o=Array(s).fill(0);do{this._grid.push(o.map((h,r)=>h/(this._resolution-1)*(_.at(0,r)-n.at(0,r))+n.at(0,r)));for(let h=0;h<s&&(o[h]++,!(o[h]<this._resolution));h++)o[h]=0}while(o.reduce((h,r)=>h+r,0)>0);this._m=[];for(let h=0;h<this._grid.length;h++){let r=0;for(let c=0;c<e;c++)r+=Math.exp(-this._alpha*this._distance(this._x[c],this._grid[h]));this._m[h]=r}this._centroids=[],this._mh=0}fit(){if(this._centroids.length>0){const s=this._centroids[this._centroids.length-1];for(let t=0;t<this._m.length;t++)this._m[t]-=this._mh*Math.exp(-this._beta*this._distance(s,this._grid[t])),this._m[t]=Math.max(0,this._m[t])}const[i,e]=this._max(this._m);this._mh=i,this._centroids.push(this._grid[e])}predict(i){return i.map(e=>{let s=1/0,t=-1;for(let n=0;n<this._centroids.length;n++){const _=this._distance(e,this._centroids[n]);_<s&&(s=_,t=n)}return t})}}
