export default class KModes{constructor(){this._modes=[],this._categories=null}get size(){return this._modes.length}add(t){if(!this._categories){this._categories=[];for(let e=0;e<t[0].length;e++)this._categories[e]=[...new Set(t.map((t=>t[e])))]}const e=[];for(let t=0;t<this._categories.length;t++){const s=Array(this._categories[t].length);let h=0;for(let t=0;t<s.length;t++)s[t]=Math.random(),h+=s[t];e[t]=s.map((t=>t/h))}this._modes.push(e)}clear(){this._modes=[]}predict(t){if(0!==this._modes.length)return t.map((t=>{let e=1/0,s=-1;for(let h=0;h<this._modes.length;h++){let i=0;for(let e=0;e<t.length;e++)for(let s=0;s<this._modes[h][e].length;s++)this._categories[e][s]===t[e]?i+=(this._modes[h][e][s]-1)**2:i+=this._modes[h][e][s]**2;i<e&&(e=i,s=h)}return s}))}fit(t){if(0===this._modes.length||0===t.length)return 0;const e=this.predict(t);let s=0;for(let h=0;h<this._modes.length;h++){const i=[];for(let o=0;o<this._modes[h].length;o++){i[o]=Array(this._modes[h][o].length).fill(0);let r=0;for(let s=0;s<e.length;s++)e[s]===h&&(i[o][this._categories[o].indexOf(t[s][o])]++,r++);i[o]=i[o].map((t=>0===t?0:t/r)),s+=Math.sqrt(this._modes[h][o].reduce(((t,e,s)=>t+(e-i[o][s])**2),0))}this._modes[h]=i}return Math.sqrt(s)}}