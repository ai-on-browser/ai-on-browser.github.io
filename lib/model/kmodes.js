var g=Object.defineProperty;var d=(n,o)=>g(n,"name",{value:o,configurable:!0});export default class m{static{d(this,"KModes")}constructor(){this._modes=[],this._categories=null}get size(){return this._modes.length}add(o){if(!this._categories){this._categories=[];for(let i=0;i<o[0].length;i++)this._categories[i]=[...new Set(o.map(t=>t[i]))]}const l=[];for(let i=0;i<this._categories.length;i++){const t=Array(this._categories[i].length);let s=0;for(let e=0;e<t.length;e++)t[e]=Math.random(),s+=t[e];l[i]=t.map(e=>e/s)}this._modes.push(l)}clear(){this._modes=[]}predict(o){if(this._modes.length===0)throw new Error("Call fit before predict.");return o.map(l=>{let i=1/0,t=-1;for(let s=0;s<this._modes.length;s++){let e=0;for(let h=0;h<l.length;h++)for(let r=0;r<this._modes[s][h].length;r++)this._categories[h][r]===l[h]?e+=(this._modes[s][h][r]-1)**2:e+=this._modes[s][h][r]**2;e<i&&(i=e,t=s)}return t})}fit(o){if(this._modes.length===0||o.length===0)return 0;const l=this.predict(o);let i=0;for(let t=0;t<this._modes.length;t++){const s=[];for(let e=0;e<this._modes[t].length;e++){s[e]=Array(this._modes[t][e].length).fill(0);let h=0;for(let r=0;r<l.length;r++)l[r]===t&&(s[e][this._categories[e].indexOf(o[r][e])]++,h++);s[e]=s[e].map(r=>r===0?0:r/h),i+=Math.sqrt(this._modes[t][e].reduce((r,_,f)=>r+(_-s[e][f])**2,0))}this._modes[t]=s}return Math.sqrt(i)}}
