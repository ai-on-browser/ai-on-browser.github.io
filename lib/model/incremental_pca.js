var b=Object.defineProperty;var e=(c,t)=>b(c,"name",{value:t,configurable:!0});import _ from"../util/matrix.js";export default class d{static{e(this,"IncrementalPCA")}constructor(t=.95){this._f=t,this._batch_size=0,this._u=null,this._s=null,this._m=null,this._n=0}update(t){if(!this._u){this._m=t.mean(1),t.sub(this._m);const[n,f]=t.svd();this._u=n,this._s=f,this._n=t.cols;return}const s=t.cols,i=t.mean(1),h=_.sub(t,i),r=_.sub(i,this._m);r.mult(Math.sqrt(s*this._n/(s+this._n))),h.concat(r,1);const o=this._u.dot(this._u.tDot(h));o.isub(h);const[u]=o.qr(),a=_.diag([...this._s.map(n=>n*this._f),u.dot(o)]);a.set(0,this._s.length,this._u.tDot(h));const[l,m]=a.svd();this._s=m,this._u=_.concat(this._u,u,1).dot(l),this._m.mult(this._n*this._f),this._m.add(_.mult(i,s)),this._m.div(this._n=this._n*this._f+s)}fit(t){t=_.fromArray(t),this._batch_size<=0&&(this._batch_size=5*t.cols);for(let s=0;s<t.rows;s+=this._batch_size){const i=[];for(let h=0;h<this._batch_size&&s+h<t.rows;h++)i[h]=s+h;this.update(t.row(i).t)}}predict(t,s){t=_.fromArray(t);const i=this._u;return s>0&&s<i.cols&&i.resize(i.rows,s),t.dot(i).toArray()}}
