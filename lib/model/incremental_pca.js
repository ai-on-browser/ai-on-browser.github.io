var b=Object.defineProperty;var e=(n,t)=>b(n,"name",{value:t,configurable:!0});import h from"../util/matrix.js";export default class f{static{e(this,"IncrementalPCA")}constructor(t=.95,s=null){this._f=t,this._rd=s??0,this._batch_size=0,this._u=null,this._s=null,this._m=null,this._n=0}update(t){if(!this._u){this._m=t.mean(1),t.sub(this._m);const[r,d]=t.svd();this._u=r,this._s=d,this._n=t.cols;return}const s=t.cols,_=t.mean(1),i=h.sub(t,_),c=h.sub(_,this._m);c.mult(Math.sqrt(s*this._n/(s+this._n))),i.concat(c,1);const o=this._u.dot(this._u.tDot(i));o.isub(i);const[u]=o.qr(),a=h.diag([...this._s.map(r=>r*this._f),u.dot(o)]);a.set(0,this._s.length,this._u.tDot(i));const[l,m]=a.svd();this._s=m,this._u=h.concat(this._u,u,1).dot(l),this._m.mult(this._n*this._f),this._m.add(h.mult(_,s)),this._m.div(this._n=this._n*this._f+s)}fit(t){t=h.fromArray(t),this._batch_size<=0&&(this._batch_size=5*t.cols);for(let s=0;s<t.rows;s+=this._batch_size){const _=[];for(let i=0;i<this._batch_size&&s+i<t.rows;i++)_[i]=s+i;this.update(t.row(_).t)}}predict(t){t=h.fromArray(t);const s=this._u;return s.resize(s.rows,this._rd>0?this._rd:t.cols),t.dot(s).toArray()}}
