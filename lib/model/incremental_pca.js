import{Matrix}from"../util/math.js";export default class IncrementalPCA{constructor(t=.95){this._f=t,this._batch_size=0,this._u=null,this._s=null,this._m=null,this._n=0}update(t){if(!this._u){this._m=t.mean(1),t.sub(this._m);const[s,i,h]=t.svd();return this._u=s,this._s=i,void(this._n=t.cols)}const s=t.cols,i=t.mean(1);let h=t.copySub(i);const _=i.copySub(this._m);_.mult(Math.sqrt(s*this._n/(s+this._n))),h=h.concat(_,1);const o=this._u.dot(this._u.tDot(h));o.isub(h);const[r,c]=o.qr(),n=Matrix.diag([...this._s.map((t=>t*this._f)),r.dot(o)]);n.set(0,this._s.length,this._u.tDot(h));const[a,u,e]=n.svd();this._s=u,this._u=this._u.concat(r,1).dot(a),this._m.mult(this._n*this._f),this._m.add(i.copyMult(s)),this._m.div(this._n=this._n*this._f+s)}fit(t){t=Matrix.fromArray(t),this._batch_size<=0&&(this._batch_size=5*t.cols);for(let s=0;s<t.rows;s+=this._batch_size){const i=[];for(let h=0;h<this._batch_size&&s+h<t.rows;h++)i[h]=s+h;this.update(t.row(i).t)}}predict(t,s){t=Matrix.fromArray(t);let i=this._u;return s>0&&s<i.cols&&(i=i.resize(i.rows,s)),t.dot(i).toArray()}}