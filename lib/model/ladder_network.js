var r=Object.defineProperty;var y=(l,a)=>r(l,"name",{value:a,configurable:!0});import o from"./neuralnetwork.js";export default class c{static{y(this,"LadderNetwork")}constructor(a,n,e,t){this._hidden_sizes=a,this._lambdas=n,this._activation=e,this._optimizer=t,this._noise_std=Array(this._hidden_sizes.length+2).fill(.001),this._model=null,this._classes=null,this._optimizer=t,this._epoch=0}get epoch(){return this._epoch}_build(){const a=[...this._hidden_sizes,this._classes.length];this._layers=[{type:"input",name:"x"},{type:"identity",name:"z_0"},{type:"random",size:"x",variance:this._noise_std[0]**2,name:"noize"},{type:"add",input:["x","noize"],name:"zt_0"},{type:"mean",input:"x",name:"mean_0"},{type:"std",input:"x",name:"std_0"},{type:"concat",input:["z_0","zt_0"],axis:0}];for(let e=0;e<a.length;e++){const t=e+1;this._layers.push({type:"full",out_size:a[e]},{type:"split",size:2,axis:0,name:`zpre_${t}`},{type:"batch_normalization",input:`zpre_${t}[1]`,name:`ztbn_${t}`},{type:"random",size:`ztbn_${t}`,variance:this._noise_std[t]**2,name:`noize_${t}`},{type:"add",input:[`ztbn_${t}`,`noize_${t}`],name:`zt_${t}`},{type:"mean",input:`zpre_${t}[0]`,name:`mean_${t}`},{type:"std",input:`zpre_${t}[0]`,name:`std_${t}`},{type:"batch_normalization",input:`zpre_${t}[0]`,name:`z_${t}`},{type:"concat",input:[`z_${t}`,`zt_${t}`],axis:0,name:`zcon_${t}`},{type:"variable",size:[1,a[e]],name:`b_${t}`},{type:"add",input:[`zcon_${t}`,`b_${t}`],name:`hadd_${t}`},{type:"variable",size:[1,a[e]],name:`g_${t}`},{type:"mult",input:[`hadd_${t}`,`g_${t}`]},{type:this._activation})}this._layers.push({type:"split",size:2,axis:0,name:"reduced"},{type:"softmax",input:"reduced[0]",name:"predict"},{type:"identity",input:"reduced[1]"});for(let e=a.length;e>=0;e--){const t=e===0?"x":a[e-1];e===a.length?this._layers.push({type:"batch_normalization",name:`u_${e}`}):this._layers.push({type:"full",out_size:t,input:`zh_${e+1}`},{type:"batch_normalization",name:`u_${e}`}),this._layers.push({type:"variable",size:`mean_${e}`,name:`a1_${e}`},{type:"variable",size:`mean_${e}`,name:`a2_${e}`},{type:"variable",size:`mean_${e}`,name:`a3_${e}`},{type:"variable",size:`mean_${e}`,name:`a4_${e}`},{type:"variable",size:`mean_${e}`,name:`a5_${e}`},{type:"variable",size:`mean_${e}`,name:`a6_${e}`},{type:"variable",size:`mean_${e}`,name:`a7_${e}`},{type:"variable",size:`mean_${e}`,name:`a8_${e}`},{type:"variable",size:`mean_${e}`,name:`a9_${e}`},{type:"variable",size:`mean_${e}`,name:`a0_${e}`},{type:"mult",input:[`a2_${e}`,`u_${e}`],name:`m1_${e}`},{type:"add",input:[`a3_${e}`,`m1_${e}`]},{type:"sigmoid",name:`m2_${e}`},{type:"mult",input:[`a1_${e}`,`m2_${e}`],name:`m3_${e}`},{type:"mult",input:[`a4_${e}`,`u_${e}`],name:`m4_${e}`},{type:"add",input:[`a5_${e}`,`m3_${e}`,`m4_${e}`],name:`m_${e}`},{type:"mult",input:[`a7_${e}`,`u_${e}`],name:`v1_${e}`},{type:"add",input:[`a8_${e}`,`v1_${e}`]},{type:"sigmoid",name:`v2_${e}`},{type:"mult",input:[`a6_${e}`,`v2_${e}`],name:`v3_${e}`},{type:"mult",input:[`a9_${e}`,`u_${e}`],name:`v4_${e}`},{type:"add",input:[`a0_${e}`,`v3_${e}`,`v4_${e}`],name:`v_${e}`},{type:"sub",input:[`zt_${e}`,`m_${e}`],name:`zh1_${e}`},{type:"mult",input:[`zh1_${e}`,`v_${e}`],name:`zh2_${e}`},{type:"add",input:[`zh2_${e}`,`m_${e}`],name:`zh_${e}`},{type:"sub",input:[`zh_${e}`,`mean_${e}`],name:`zhbn1_${e}`},{type:"div",input:[`zhbn1_${e}`,`std_${e}`],name:`zhbn_${e}`})}this._layers.push({type:"output",name:"reconstruct"},{type:"supervisor",name:"t"},{type:"sub",input:["t","predict"]},{type:"square"},{type:"sum",axis:1},{type:"mean",name:"cc0"},{type:"input",name:"is_labeled"},{type:"mult",input:["cc0","is_labeled"],name:"cc"});const n=["cc"];for(let e=0;e<=a.length;e++)this._layers.push({type:"sub",input:[`z_${e}`,`zhbn_${e}`]},{type:"square"},{type:"sum",axis:1},{type:"mean",name:`cl_${e}`},{type:"mult",input:[this._lambdas[e],`cl_${e}`],name:`wcl_${e}`}),n.push(`wcl_${e}`);return this._layers.push({type:"add",input:n}),o.fromObject(this._layers,null,"adam")}fit(a,n,e,t,p){if(!this._classes){const s=new Set;for(let i=0;i<n.length;i++)n[i]!=null&&s.add(n[i]);this._classes=[...s]}this._model||(this._model=this._build());let m=null,u=null;const $=a.filter((s,i)=>n[i]!=null);if($.length>0){const i=n.filter(_=>_!=null).map(_=>{const h=Array(this._classes.length).fill(0);return h[this._classes.indexOf(_)]=1,h});m=this._model.fit({x:$,is_labeled:[[1]]},i,e,t,p)}const d=a.filter((s,i)=>n[i]==null);return d.length>0&&(u=this._model.fit({x:d,is_labeled:[[0]]},[[0]],e,t,p)),this._epoch+=e,{labeledLoss:m?.[0],unlabeledLoss:u?.[0]}}predict(a){return this._model.calc({x:a,is_labeled:null},null,["predict"]).predict.argmax(1).value.map(n=>this._classes[n])}}
