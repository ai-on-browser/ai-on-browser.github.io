import Matrix from"../util/matrix.js";export default class HuberRegression{constructor(t=1.35,s="rls",i=1){this._e=t,this._s=1,this._lr=i,this._w=null,this._method=s}fit(t,s){const i=(t=Matrix.fromArray(t)).resize(t.rows,t.cols+1,1);s=Matrix.fromArray(s),this._w||(this._w=i.tDot(i).solve(i.tDot(s))),"rls"===this._method?this._rls(i,s):"gd"===this._method&&this._gd(i,s)}_gd(t,s){const i=t.dot(this._w);i.sub(s);const o=i.copyMap((t=>Math.abs(t/this._s)<=this._e?t/this._s:t/this._s>this._e?this._e:-this._e)),r=t.tDot(o);r.mult(this._lr/t.rows),this._w.sub(r);const h=o.copyMap(((t,s)=>t*(-i.at(s)/this._s**2)));this._s-=h.sum()*this._lr/t.rows}_rls(t,s){const i=t.dot(this._w);i.sub(s);const o=i.copyMap((t=>Math.abs(t/this._s)<=this._e?1:this._e/Math.abs(t/this._s)));for(let i=0;i<this._w.cols;i++){const r=t.copyMult(o.col(i)),h=r.tDot(t).solve(r.tDot(s.col(i)));this._w.set(0,i,h)}}predict(t){return(t=Matrix.fromArray(t)).resize(t.rows,t.cols+1,1).dot(this._w).toArray()}}