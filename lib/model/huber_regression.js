var a=Object.defineProperty;var c=(l,s)=>a(l,"name",{value:s,configurable:!0});import o from"../util/matrix.js";export default class w{static{c(this,"HuberRegression")}constructor(s=1.35,r="rls",t=1){this._e=s,this._s=1,this._lr=t,this._w=null,this._method=r}fit(s,r){s=o.fromArray(s);const t=o.resize(s,s.rows,s.cols+1,1);r=o.fromArray(r),this._w||(this._w=t.tDot(t).solve(t.tDot(r))),this._method==="rls"?this._rls(t,r):this._method==="gd"&&this._gd(t,r)}_gd(s,r){const t=s.dot(this._w);t.sub(r);const e=o.map(t,h=>Math.abs(h/this._s)<=this._e?h/this._s:h/this._s>this._e?this._e:-this._e),i=s.tDot(e);i.mult(this._lr/s.rows),this._w.sub(i);const _=o.map(e,(h,n)=>h*(-t.at(n)/this._s**2));this._s-=_.sum()*this._lr/s.rows}_rls(s,r){const t=s.dot(this._w);t.sub(r);const e=o.map(t,i=>Math.abs(i/this._s)<=this._e?1:this._e/Math.abs(i/this._s));for(let i=0;i<this._w.cols;i++){const _=o.mult(s,e.col(i)),h=_.tDot(s).solve(_.tDot(r.col(i)));this._w.set(0,i,h)}}predict(s){return s=o.fromArray(s),o.resize(s,s.rows,s.cols+1,1).dot(this._w).toArray()}}
