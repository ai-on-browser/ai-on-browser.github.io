import{Matrix}from"../util/math.js";export default class HuberRegression{constructor(t=1.35,s="rls",o=1){this._e=t,this._s=1,this._lr=o,this._w=null,this._method=s}fit(t,s){const o=(t=Matrix.fromArray(t)).resize(t.rows,t.cols+1,1);s=Matrix.fromArray(s),this._w||(this._w=o.tDot(o).solve(o.tDot(s))),"rls"===this._method?this._rls(o,s):"gd"===this._method&&this._gd(o,s)}_gd(t,s){const o=t.dot(this._w);o.sub(s);const i=o.copyMap((t=>Math.abs(t/this._s)<=this._e?t/this._s:t/this._s>this._e?this._e:-this._e)),h=t.tDot(i);h.mult(this._lr/t.rows),this._w.sub(h);const r=i.copyMap(((t,s)=>t*(-o.at(s)/this._s**2)));this._s-=r.sum()*this._lr/t.rows}_rls(t,s){const o=t.dot(this._w);o.sub(s);const i=o.copyMap((t=>Math.abs(t/this._s)<=this._e?1:this._e/Math.abs(t/this._s)));for(let o=0;o<this._w.cols;o++){const h=t.copyMult(i.col(o)),r=h.tDot(t).solve(h.tDot(s.col(o)));this._w.set(0,o,r)}}predict(t){return(t=Matrix.fromArray(t)).resize(t.rows,t.cols+1,1).dot(this._w).toArray()}}