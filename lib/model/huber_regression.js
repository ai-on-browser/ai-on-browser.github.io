import Matrix from"../util/matrix.js";export default class HuberRegression{constructor(t=1.35,s="rls",i=1){this._e=t,this._s=1,this._lr=i,this._w=null,this._method=s}fit(t,s){t=Matrix.fromArray(t);const i=Matrix.resize(t,t.rows,t.cols+1,1);s=Matrix.fromArray(s),this._w||(this._w=i.tDot(i).solve(i.tDot(s))),"rls"===this._method?this._rls(i,s):"gd"===this._method&&this._gd(i,s)}_gd(t,s){const i=t.dot(this._w);i.sub(s);const r=Matrix.map(i,(t=>Math.abs(t/this._s)<=this._e?t/this._s:t/this._s>this._e?this._e:-this._e)),o=t.tDot(r);o.mult(this._lr/t.rows),this._w.sub(o);const h=Matrix.map(r,((t,s)=>t*(-i.at(s)/this._s**2)));this._s-=h.sum()*this._lr/t.rows}_rls(t,s){const i=t.dot(this._w);i.sub(s);const r=Matrix.map(i,(t=>Math.abs(t/this._s)<=this._e?1:this._e/Math.abs(t/this._s)));for(let i=0;i<this._w.cols;i++){const o=Matrix.mult(t,r.col(i)),h=o.tDot(t).solve(o.tDot(s.col(i)));this._w.set(0,i,h)}}predict(t){t=Matrix.fromArray(t);return Matrix.resize(t,t.rows,t.cols+1,1).dot(this._w).toArray()}}