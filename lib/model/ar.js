import{Matrix}from"../util/math.js";export default class AR{constructor(t){this._p=t}fit(t){this._lsm(t)}_lsm(t){const s=t.length,i=new Matrix(s-this._p,1,t.slice(this._p)),e=new Matrix(s-this._p,this._p);for(let i=0;i<s-this._p;i++)for(let s=0;s<this._p;s++)e.set(i,s,t[i+this._p-1-s]);const h=e.tDot(e);this._phi=h.solve(e.t).dot(i);const p=e.dot(this._phi);p.sub(i),this._e=p.mean()}_yuleWalker(t){const s=t.length,i=new Matrix(this._p,1),e=new Matrix(this._p,this._p),h=t.reduce(((t,s)=>t+s),0)/s;for(let p=0;p<=this._p;p++){let _=0;for(let i=0;i<s-p;i++)_+=(t[i]-h)*(t[i+p]-h);if(_/=s,p>0&&i.set(p-1,0,_),p<this._p)for(let t=0;t<this._p-p;t++)e.set(t,p+t,_),e.set(p+t,t,_)}this._phi=e.solve(i),this._e=e.at(0,0)-this._phi.tDot(i).value[0]}predict(t,s){const i=[],e=t.slice(t.length-this._p);e.reverse();for(let t=0;t<s;t++){const t=new Matrix(1,this._p,e).dot(this._phi).value[0]+this._e;i.push(t),e.unshift(t),e.pop()}return i}}