export class SelectiveSamplingPerceptron{constructor(t,h){this._b=t,this._r=h}init(t,h){this._x=t,this._y=h,this._epoch=0,this._w=Array(this._x[0].length).fill(0),this._c=0}fit(){this._epoch++;for(let t=0;t<this._x.length;t++){const h=this._x[t].reduce(((t,h,s)=>t+h*this._w[s]),this._c),s=h<=0?-1:1;if(Math.random()<this._b/(this._b+Math.abs(h))&&this._y[t]!==s){for(let h=0;h<this._x[t].length;h++)this._w[h]+=this._r*this._y[t]*this._x[t][h];this._c+=this._r*this._y[t]}}}predict(t){const h=[];for(let s=0;s<t.length;s++){const i=t[s].reduce(((t,h,s)=>t+h*this._w[s]),this._c);h.push(i<=0?-1:1)}return h}}export class SelectiveSamplingAdaptivePerceptron{constructor(t,h){this._beta=t,this._r=h}init(t,h){this._x=t,this._y=h,this._epoch=0,this._w=Array(this._x[0].length).fill(0),this._c=0,this._k=0,this._X=0}fit(){this._epoch++;for(let t=0;t<this._x.length;t++){const h=this._x[t].reduce(((t,h,s)=>t+h*this._w[s]),this._c),s=h<=0?-1:1,i=Math.max(this._X,Math.sqrt(this._x[t].reduce(((t,h)=>t+h**2),0))),_=this._beta*i**2*Math.sqrt(1+this._k);if(Math.random()<_/(_+Math.abs(h))&&this._y[t]!==s){for(let h=0;h<this._x[t].length;h++)this._w[h]+=this._r*this._y[t]*this._x[t][h];this._c+=this._r*this._y[t],this._k+=1,this._X=i}}}predict(t){const h=[];for(let s=0;s<t.length;s++){const i=t[s].reduce(((t,h,s)=>t+h*this._w[s]),this._c);h.push(i<=0?-1:1)}return h}}