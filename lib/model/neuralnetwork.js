import{Tensor,Matrix}from"../util/math.js";export function NeuralnetworkException(r,e){this.message=r,this.value=e,this.name=NeuralnetworkException}export default class NeuralNetwork{constructor(r,e,a="sgd"){this._request_layer=r,this._layers=[],0===r.filter((r=>"output"===r.type)).length&&r.push({type:"output"}),e&&r.push({type:e});const t=new Set;for(const e of r)if(e.input&&Array.isArray(e.input))for(let r=0;r<e.input.length;r++)"number"==typeof e.input[r]&&(t.add(e.input[r]),e.input[r]=`__const_number_${e.input[r]}`);t.size&&(r[0].input=[]),this._optimizer=a,this._opt="adam"===a?new AdamOptimizer:"momentum"===a?new MomentumOptimizer:"rmsprop"===a?new RMSPropOptimizer:new SGDOptimizer;for(const r of t){const e=new NeuralnetworkLayers.const({value:r,size:1,input:[]});e.network=this,e.name=`__const_number_${r}`,e.parent=[],this._layers.push(e)}for(const e of r){if(!NeuralnetworkLayers[e.type])throw`Invalid layer type ${e.type}.`;const r=new NeuralnetworkLayers[e.type]({...e,optimizer:this._opt.manager()});if(r.network=this,r.name=e.name,r.parent=[],r.input=e.input,e.input){"string"==typeof e.input&&(e.input=[e.input]);for(const a of e.input){const e=/\[([0-9]+)\]$/,t=a&&a.match(e),s=t?+t[1]:null,o=t?a.slice(0,-t[0].length):a,n=this._layers.filter((r=>o===r.name));r.parent.push({layer:n[0],index:this._layers.indexOf(n[0]),subscript:s})}}else{const e=this._layers.length-1;e>=0&&r.parent.push({layer:this._layers[e],index:e,subscript:null})}this._layers.push(r)}}copy(){const r=new NeuralNetwork(this._request_layer,null,this._optimizer);for(let e=0;e<this._layers.length;e++)r._layers[e].set_params(this._layers[e].get_params());return r}calc(r,e,a,t={}){let s=0;if(Array.isArray(r))2===(r=Tensor.fromArray(r)).dimension&&(r=r.toMatrix()),s=r.sizes[0];else if(r instanceof Matrix||r instanceof Tensor)s=r.sizes[0];else for(const e of Object.keys(r))r[e]=Tensor.fromArray(r[e]),2===r[e].dimension&&(r[e]=r[e].toMatrix()),s=r[e].sizes[0];for(const a of this._layers)a.bind({input:r,supervisor:e,n:s,...t});const o=[],n={};for(let r=0;r<this._layers.length;r++){const t=this._layers[r];if(o[r]=t.calc(...t.parent.map((r=>null!==r.subscript?o[r.index][r.subscript]:o[r.index]))),a&&a.indexOf(t.name)>=0&&(n[t.name]=o[r],Object.keys(n).length===a.length))return n;if(!e&&t instanceof NeuralnetworkLayers.output)return a?n:o[r]}return a?n:o[o.length-1]}grad(r){const e=[];let a=null;for(let r=0;r<this._layers.length;e[r++]=[]);e[e.length-1]=[new Matrix(1,1,1)];for(let t=this._layers.length-1;t>=0;t--){const s=this._layers[t];if(r){if(!(s instanceof NeuralnetworkLayers.output))continue;e[t]=[r],r=null}if(0===e[t].length)continue;for(let r=0;r<e[t].length;r++)void 0===e[t][r]&&(e[t][r]=null);let o=s.grad(...e[t]);Array.isArray(o)||(o=Array(s.parent.length).fill(o)),s.parent.forEach(((r,a)=>{if(!o[a])return;const t=r.subscript||0;e[r.index][t]?e[r.index][t].add(o[a]):e[r.index][t]=o[a].copy()})),s instanceof NeuralnetworkLayers.input&&(a=e[t][0])}return a}update(r){this._opt.learningRate=r;for(let r=0;r<this._layers.length;r++)this._layers[r].update()}fit(r,e,a=1,t=.1,s=null,o={}){if(Array.isArray(r))2===(r=Tensor.fromArray(r)).dimension&&(r=r.toMatrix());else if(!(r instanceof Matrix||r instanceof Tensor))for(const e of Object.keys(r))r[e]=Tensor.fromArray(r[e]),2===r[e].dimension&&(r[e]=r[e].toMatrix());let n;for(e=Matrix.fromArray(e);a-- >0;)if(s)for(let a=0;a<e.rows;a+=s){const l=Math.min(e.rows,a+s);let i;if(r instanceof Matrix||r instanceof Tensor)i=r instanceof Matrix?r.sliceRow(a,l):r.slice(a,l);else{i={};for(const e of Object.keys(r))i[e]=r[e]instanceof Matrix?r[e].sliceRow(a,l):r[e].slice(a,l)}n=this.calc(i,e.sliceRow(a,l),null,o),this.grad(),this.update(t)}else n=this.calc(r,e,null,o),this.grad(),this.update(t);return n.toArray().flat()}}class SGDOptimizer{constructor(r){this._learningrate=r}set learningRate(r){this._learningrate=r}manager(){const r=this;return{get lr(){return r._learningrate},delta(r,e){return e.copyMult(this.lr)}}}}class MomentumOptimizer{constructor(r,e=.9){this._learningrate=r,this._beta=e}set learningRate(r){this._learningrate=r}manager(){const r=this;return{get lr(){return r._learningrate},params:{},delta(e,a){if(!this.params[e])return this.params[e]=a,a.copyMult(this.lr);const t=this.params[e].copyMult(r._beta);return t.add(a.copyMult(1-r._beta)),this.params[e]=t,t.copyMult(this.lr)}}}}class RMSPropOptimizer{constructor(r,e=.999){this._learningrate=r,this._beta=e}set learningRate(r){this._learningrate=r}manager(){const r=this;return{get lr(){return r._learningrate},params:{},delta(e,a){if(!this.params[e])return this.params[e]=a.copyMult(a),a.copyMult(this.lr);const t=this.params[e].copyMult(r._beta);return t.add(a.copyMap((e=>(1-r._beta)*e*e))),this.params[e]=t,a.copyMult(t.copyMap((r=>this.lr/Math.sqrt(r+1e-12))))}}}}class AdamOptimizer{constructor(r=.001,e=.9,a=.999){this._learningrate=r,this._beta1=e,this._beta2=a}set learningRate(r){this._learningrate=r}manager(){const r=this;return{get lr(){return r._learningrate},params:{},delta(e,a){if(!this.params[e])return this.params[e]={v:a,s:a.copyMult(a)},a.copyMult(this.lr);const t=this.params[e].v.copyMult(r._beta1);t.add(a.copyMult(1-r._beta1));const s=this.params[e].s.copyMult(r._beta2);return s.add(a.copyMap((e=>(1-r._beta2)*e*e))),this.params[e]={v:t,s:s},t.copyMult(s.copyMap((r=>this.lr/Math.sqrt(r+1e-12))))}}}}export const NeuralnetworkLayers={};import InputLayer from"./layer/input.js";NeuralnetworkLayers.input=InputLayer;import OutputLayer from"./layer/output.js";NeuralnetworkLayers.output=OutputLayer;import SupervisorLayer from"./layer/supervisor.js";NeuralnetworkLayers.supervisor=SupervisorLayer;import IncludeLayer from"./layer/include.js";NeuralnetworkLayers.include=IncludeLayer;import ConstLayer from"./layer/const.js";NeuralnetworkLayers.const=ConstLayer;import RandomLayer from"./layer/random.js";NeuralnetworkLayers.random=RandomLayer;import VariableLayer from"./layer/variable.js";NeuralnetworkLayers.variable=VariableLayer;import FullyConnected from"./layer/full.js";NeuralnetworkLayers.full=FullyConnected;import LinearLayer from"./layer/linear.js";NeuralnetworkLayers.linear=LinearLayer;import NegativeLayer from"./layer/negative.js";NeuralnetworkLayers.negative=NegativeLayer;import SigmoidLayer from"./layer/sigmoid.js";NeuralnetworkLayers.sigmoid=SigmoidLayer;import TanhLayer from"./layer/tanh.js";NeuralnetworkLayers.tanh=TanhLayer;import SoftsignLayer from"./layer/softsign.js";NeuralnetworkLayers.softsign=SoftsignLayer;import SoftplusLayer from"./layer/softplus.js";NeuralnetworkLayers.softplus=SoftplusLayer;import AbsLayer from"./layer/abs.js";NeuralnetworkLayers.abs=AbsLayer;import ReluLayer from"./layer/relu.js";NeuralnetworkLayers.relu=ReluLayer;import LeakyReluLayer from"./layer/leaky_relu.js";NeuralnetworkLayers.leaky_relu=LeakyReluLayer;import ELULayer from"./layer/elu.js";NeuralnetworkLayers.elu=ELULayer;import PReLULayer from"./layer/prelu.js";NeuralnetworkLayers.prelu=PReLULayer;import RReluLayer from"./layer/rrelu.js";NeuralnetworkLayers.rrelu=RReluLayer;import SoftmaxLayer from"./layer/softmax.js";NeuralnetworkLayers.softmax=SoftmaxLayer;import SoftargmaxLayer from"./layer/softargmax.js";NeuralnetworkLayers.softargmax=SoftargmaxLayer;import LogLayer from"./layer/log.js";NeuralnetworkLayers.log=LogLayer;import ExpLayer from"./layer/exp.js";NeuralnetworkLayers.exp=ExpLayer;import SquareLayer from"./layer/square.js";NeuralnetworkLayers.square=SquareLayer;import SqrtLayer from"./layer/sqrt.js";NeuralnetworkLayers.sqrt=SqrtLayer;import PowerLayer from"./layer/power.js";NeuralnetworkLayers.power=PowerLayer;import GaussianLayer from"./layer/gaussian.js";NeuralnetworkLayers.gaussian=GaussianLayer;import SparseLayer from"./layer/sparse.js";NeuralnetworkLayers.sparsity=SparseLayer;import DropoutLayer from"./layer/dropout.js";NeuralnetworkLayers.dropout=DropoutLayer;import ClipLayer from"./layer/clip.js";NeuralnetworkLayers.clip=ClipLayer;import AddLayer from"./layer/add.js";NeuralnetworkLayers.add=AddLayer;import SubLayer from"./layer/sub.js";NeuralnetworkLayers.sub=SubLayer;import MultLayer from"./layer/mult.js";NeuralnetworkLayers.mult=MultLayer;import DivLayer from"./layer/div.js";NeuralnetworkLayers.div=DivLayer;import MatmulLayer from"./layer/matmul.js";NeuralnetworkLayers.matmul=MatmulLayer;import ConvLayer from"./layer/conv.js";NeuralnetworkLayers.conv=ConvLayer;import RNNLayer from"./layer/rnn.js";NeuralnetworkLayers.rnn=RNNLayer;import LSTMLayer from"./layer/lstm.js";NeuralnetworkLayers.lstm=LSTMLayer;import SumLayer from"./layer/sum.js";NeuralnetworkLayers.sum=SumLayer;import MeanLayer from"./layer/mean.js";NeuralnetworkLayers.mean=MeanLayer;import VarLayer from"./layer/variance.js";NeuralnetworkLayers.variance=VarLayer;import ReshapeLayer from"./layer/reshape.js";NeuralnetworkLayers.reshape=ReshapeLayer;import TransposeLayer from"./layer/transpose.js";NeuralnetworkLayers.transpose=TransposeLayer;import FlattenLayer from"./layer/flatten.js";NeuralnetworkLayers.flatten=FlattenLayer;import ConcatLayer from"./layer/concat.js";NeuralnetworkLayers.concat=ConcatLayer;import SplitLayer from"./layer/split.js";NeuralnetworkLayers.split=SplitLayer;import OnehotLayer from"./layer/onehot.js";NeuralnetworkLayers.onehot=OnehotLayer;import ArgmaxLayer from"./layer/argmax.js";NeuralnetworkLayers.argmax=ArgmaxLayer;import LessLayer from"./layer/less.js";NeuralnetworkLayers.less=LessLayer;import CondLayer from"./layer/cond.js";NeuralnetworkLayers.cond=CondLayer;import MSELayer from"./layer/mse.js";NeuralnetworkLayers.mse=MSELayer;import HuberLayer from"./layer/huber.js";NeuralnetworkLayers.huber=HuberLayer;