import{Matrix}from"../util/math.js";export default class FuzzyCMeans{constructor(t=2){this._m=t,this._c=[],this._u=[]}_distance(t,s){return Math.sqrt(t.reduce(((t,i,h)=>t+(i-s[h])**2),0))}init(t){this._x=t}add(){let t=null;for(;;){const s=Math.floor(Math.random()*this._x.length);if(t=this._x[s],this._c.every((s=>this._distance(t,s)>0)))break}this._c.push(t.concat());const s=[],i=this._c.length;for(let t=0;t<this._x.length;t++){const h=this._distance(this._c[i-1],this._x[t]);let e=0;for(let s=0;s<i;s++)e+=(h/this._distance(this._c[s],this._x[t]))**(1/(this._m-1));s[t]=isNaN(e)?0:1/e}this._u.push(s)}fit(){const t=this._x[0].length,s=this._u.map((s=>{const i=Array(t).fill(0);let h=0;for(let e=0;e<this._x.length;e++){h+=s[e]**this._m;for(let h=0;h<t;h++)i[h]+=this._x[e][h]*s[e]**this._m}return i.map((t=>t/h))}));for(let t=0;t<this._x.length;t++){const i=s.map((s=>this._distance(this._x[t],s)));for(let h=0;h<s.length;h++){let e=0;for(let t=0;t<s.length;t++)e+=(i[h]/i[t])**(2/(this._m-1));this._u[h][t]=1/e}}this._c=s}predict(){return Matrix.fromArray(this._u).argmax(0).value}}