import Matrix from"../util/matrix.js";export default class ParticleFilter{constructor(){this._n=2e3,this._l=20,this._noise=.2}fit(t){const r=t.length,i=t[0].length;t=Matrix.fromArray(t).t;const o=[Matrix.repeat(t.col(0),this._n,1)];for(let n=0;n<r;n++){const r=Matrix.add(o[n],Matrix.mult(Matrix.randn(i,this._n),this._noise)),e=Matrix.sub(t.col(n),r);e.map((t=>Math.exp(-(t**2))));const s=[e.col(0).mean()];for(let t=1;t<this._n;t++)s[t]=s[t-1]+e.col(t).mean();const a=s[this._n-1],l=Math.floor(Math.random()*a),h=[];for(let t=0;t<this._n;t++)h[t]=(t*a/this._n+l)%a;const c=[];for(let t=0;t<this._n;t++)for(let r=0;r<this._n;r++)if(s[r]>=h[t]){c[t]=r;break}for(let t=0;t<this._l;t++){let r=n-(this._l-t);r<0&&(r=0),o[r]=o[r].col(c)}o[n]=r.col(c),o[n+1]=o[n]}return o.map((t=>t.mean(1).value))}predict(t){return[]}}