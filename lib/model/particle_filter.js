var x=Object.defineProperty;var m=(h,n)=>x(h,"name",{value:n,configurable:!0});import e from"../util/matrix.js";export default class j{static{m(this,"ParticleFilter")}constructor(){this._n=2e3,this._l=20,this._noise=.2}fit(n){const _=n.length,d=n[0].length;n=e.fromArray(n).t;const r=[e.repeat(n.col(0),this._n,1)];for(let o=0;o<_;o++){const f=e.add(r[o],e.mult(e.randn(d,this._n),this._noise)),i=e.sub(n.col(o),f);i.map(t=>Math.exp(-(t**2)));const l=[i.col(0).mean()];for(let t=1;t<this._n;t++)l[t]=l[t-1]+i.col(t).mean();const c=l[this._n-1],u=Math.floor(Math.random()*c),p=[];for(let t=0;t<this._n;t++)p[t]=(t*c/this._n+u)%c;const a=[];for(let t=0;t<this._n;t++)for(let s=0;s<this._n;s++)if(l[s]>=p[t]){a[t]=s;break}for(let t=0;t<this._l;t++){let s=o-(this._l-t);s<0&&(s=0),r[s]=r[s].col(a)}r[o]=f.col(a),r[o+1]=r[o]}return r.map(o=>o.mean(1).value)}predict(n){return[]}}
