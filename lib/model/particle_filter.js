import Matrix from"../util/matrix.js";export default class ParticleFilter{constructor(){this._n=2e3,this._l=20,this._noise=.2}fit(t){const o=t.length,r=t[0].length,e=[(t=Matrix.fromArray(t).t).col(0).copyRepeat(this._n,1)];for(let i=0;i<o;i++){const o=e[i].copyAdd(Matrix.randn(r,this._n).copyMult(this._noise)),n=t.col(i).copySub(o);n.map((t=>Math.exp(-(t**2))));const l=[n.col(0).mean()];for(let t=1;t<this._n;t++)l[t]=l[t-1]+n.col(t).mean();const s=l[this._n-1],a=Math.floor(Math.random()*s),c=[];for(let t=0;t<this._n;t++)c[t]=(t*s/this._n+a)%s;const h=[];for(let t=0;t<this._n;t++)for(let o=0;o<this._n;o++)if(l[o]>=c[t]){h[t]=o;break}for(let t=0;t<this._l;t++){let o=i-(this._l-t);o<0&&(o=0),e[o]=e[o].col(h)}e[i]=o.col(h),e[i+1]=e[i]}return e.map((t=>t.mean(1).value))}predict(t){return[]}}