export default class CAST{constructor(t){this._t=t}get size(){return this._clusters.length}_similarity(t,e){return Math.exp(-t.reduce(((t,s,r)=>t+(s-e[r])**2),0))}_add(t,e,s,r){for(;;){let o=-1/0,l=-1;for(let s=0;s<t.length;s++)e[t[s]]>o&&(o=e[t[s]],l=s);if(o<this._t*s.length)return;for(const o of s)e[o]+=r[o][t[l]];for(const s of t)e[s]+=r[s][t[l]];s.push(t[l]),t.splice(l,1)}}_remove(t,e,s,r){for(;;){let o=1/0,l=-1;for(let t=0;t<s.length;t++)e[s[t]]<o&&(o=e[s[t]],l=t);if(o>=this._t*s.length)return;for(const o of s)e[o]+=r[o][t[l]];for(const s of t)e[s]+=r[s][t[l]];t.push(s[l]),s.splice(l,1)}}fit(t){const e=t.length,s=[],r=[];for(let t=0;t<e;t++)s[t]=[],r[t]=t;for(let r=0;r<e;r++)for(let o=r;o<e;o++)s[r][o]=s[o][r]=this._similarity(t[r],t[o]);for(this._clusters=[];r.length>0;){const t=Array(e).fill(0),o=[];let l;do{l=o.concat(),this._add(r,t,o,s),this._remove(r,t,o,s),o.sort()}while(l.length!==o.length||l.some(((t,e)=>t!==o[e])));this._clusters.push(o)}}predict(){const t=[];for(let e=0;e<this._clusters.length;e++)for(const s of this._clusters[e])t[s]=e;return t}}