export default class CAST{constructor(t){this._t=t}get size(){return this._clusters.length}_similarity(t,e){return Math.exp(-t.reduce(((t,r,s)=>t+(r-e[s])**2),0))}_add(t,e,r,s){for(;;){let o=-1/0,l=-1;for(let r=0;r<t.length;r++)e[t[r]]>o&&(o=e[t[r]],l=r);if(o<this._t*r.length)return;for(const o of r)e[o]+=s[o][t[l]];for(const r of t)e[r]+=s[r][t[l]];r.push(t[l]),t.splice(l,1)}}_remove(t,e,r,s){for(;;){let o=1/0,l=-1;for(let t=0;t<r.length;t++)e[r[t]]<o&&(o=e[r[t]],l=t);if(o>=this._t*r.length)return;for(const o of r)e[o]+=s[o][t[l]];for(const r of t)e[r]+=s[r][t[l]];t.push(r[l]),r.splice(l,1)}}fit(t){const e=t.length,r=[],s=Array.from({length:e},((t,e)=>e));for(let t=0;t<e;t++)r[t]=[];for(let s=0;s<e;s++)for(let o=s;o<e;o++)r[s][o]=r[o][s]=this._similarity(t[s],t[o]);for(this._clusters=[];s.length>0;){const t=Array(e).fill(0),o=[];let l;do{l=o.concat(),this._add(s,t,o,r),this._remove(s,t,o,r),o.sort()}while(l.length!==o.length||l.some(((t,e)=>t!==o[e])));this._clusters.push(o)}}predict(){const t=[];for(let e=0;e<this._clusters.length;e++)for(const r of this._clusters[e])t[r]=e;return t}}