var p=Object.defineProperty;var a=(_,i)=>p(_,"name",{value:i,configurable:!0});export default class u{static{a(this,"NeuralGas")}constructor(i=1,r=.99){this._l=i,this._eps=1,this._epoch=0,this._sample_rate=.8,this._m=r,this._centroids=[]}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(i,r){let t=0;for(let n=i.length-1;n>=0;n--)t+=(i[n]-r[n])**2;return Math.sqrt(t)}add(i){for(;;){const r=i[Math.floor(Math.random()*i.length)];if(Math.min.apply(null,this._centroids.map(t=>this._distance(r,t)))>1e-8){const t=r.concat();return this._centroids.push(t),t}}}clear(){this._centroids=[]}predict(i){if(this._centroids.length===0)throw new Error("Call fit before predict.");return i.map(r=>{let t=1/0,n=-1;for(let c=0;c<this._centroids.length;c++){const d=this._distance(r,this._centroids[c]);d<t&&(t=d,n=c)}return n})}fit(i){if(this._centroids.length===0||i.length===0)return 0;const r=this._centroids,t=i.filter(()=>Math.random()<this._sample_rate);this._epoch++;const n=this._centroids,c=t.map(l=>{let h=n.map((s,e)=>[e,this._distance(l,s)]);return h.sort((s,e)=>s[1]-e[1]),h=h.map((s,e)=>[s[0],s[1],e]),h.sort((s,e)=>s[0]-e[0]),h});return this._centroids=n.map((l,h)=>{const s=Array(t[0].length).fill(0);for(let e=0;e<t.length;e++)for(let o=0;o<t[e].length;o++)s[o]+=(t[e][o]-l[o])*this._eps*Math.exp(-c[e][h][2]/this._l);return s.map((e,o)=>l[o]+e/t.length)}),this._l*=this._m,r.reduce((l,h,s)=>l+this._distance(h,this._centroids[s]),0)}}
