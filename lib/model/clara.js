var r=Object.defineProperty;var o=(h,t)=>r(h,"name",{value:t,configurable:!0});import a from"./pam.js";export default class m{static{o(this,"CLARA")}constructor(t){this._k=t,this._sample_size=40+2*t}_distance(t,s){return Math.sqrt(t.reduce((e,i,n)=>e+(i-s[n])**2,0))}_argmin(t){let s=1/0,e=-1;for(let i=0;i<t.length;i++)t[i]<s&&(s=t[i],e=i);return e}_cost(t){const s=t.map(n=>this._x[n]),e=this._x.length;let i=0;for(let n=0;n<e;n++){const _=this._argmin(s.map(c=>this._distance(this._x[n],c)));i+=this._distance(this._x[n],s[_])}return i}_sample_idx(t,s){s=Math.min(t,s);const e=[];for(let i=0;i<s;i++)e.push(Math.floor(Math.random()*(t-i)));for(let i=s-1;i>=0;i--)for(let n=s-1;n>i;n--)e[i]<=e[n]&&e[n]++;return e}init(t){this._x=t,this._centroids=this._sample_idx(this._x.length,this._k)}fit(){const t=new a(this._k),s=this._sample_idx(this._x.length,this._sample_size);for(t.init(s.map(_=>this._x[_]));!t.fit(););const e=this._cost(this._centroids),i=t._centroids.map(_=>s[_]);this._cost(i)<e&&(this._centroids=i)}predict(){const t=this._centroids.map(s=>this._x[s]);return this._x.map(s=>this._argmin(t.map(e=>this._distance(s,e))))}}
