import PAM from"./pam.js";export default class CLARA{constructor(t){this._k=t,this._sample_size=40+2*t}_distance(t,s){return Math.sqrt(t.reduce(((t,i,e)=>t+(i-s[e])**2),0))}_argmin(t){let s=1/0,i=-1;for(let e=0;e<t.length;e++)t[e]<s&&(s=t[e],i=e);return i}_cost(t){const s=t.map((t=>this._x[t])),i=this._x.length;let e=0;for(let t=0;t<i;t++){const i=this._argmin(s.map((s=>this._distance(this._x[t],s))));e+=this._distance(this._x[t],s[i])}return e}_sample_idx(t,s){s=Math.min(t,s);const i=[];for(let e=0;e<s;e++)i.push(Math.floor(Math.random()*(t-e)));for(let t=s-1;t>=0;t--)for(let e=s-1;e>t;e--)i[t]<=i[e]&&i[e]++;return i}init(t){this._x=t,this._centroids=this._sample_idx(this._x.length,this._k)}fit(){const t=new PAM(this._k),s=this._sample_idx(this._x.length,this._sample_size);for(t.init(s.map((t=>this._x[t])));!t.fit(););const i=this._cost(this._centroids),e=t._centroids.map((t=>s[t]));this._cost(e)<i&&(this._centroids=e)}predict(){const t=this._centroids.map((t=>this._x[t]));return this._x.map((s=>this._argmin(t.map((t=>this._distance(s,t))))))}}