export default class HopfieldNetwork{constructor(){}_normalize(t){let e=-1/0,l=1/0;for(let r=0;r<t.length;r++)for(let h=0;h<t[r].length;h++)e=Math.max(e,t[r][h]),l=Math.min(l,t[r][h]);for(let r=0;r<t.length;r++)for(let h=0;h<t[r].length;h++)t[r][h]=t[r][h]<(e+l)/2?-1:1}fit(t){this._normalize(t),this._w=[];for(let e=0;e<t[0].length;this._w[e++]=[]);for(let e=0;e<t.length;e++)for(let l=0;l<t[e].length;l++){this._w[l][l]=0;for(let r=0;r<l;r++)this._w[l][r]=this._w[r][l]=t[e][l]*t[e][r]}}energy(t){this._normalize([t]);let e=0;for(let l=0;l<this._w.length;l++)for(let r=0;r<this._w[l].length;r++)e-=this._w[l][r]*t[l]*t[r]/2;return e}predict(t){this._normalize([t]);const e=[];for(let l=0;l<t.length;l++){e[l]=0;for(let r=0;r<t.length;r++)e[l]+=this._w[l][r]*t[r]}return e.map(((e,l)=>e<0?-1:e>0?1:t[l]))}}