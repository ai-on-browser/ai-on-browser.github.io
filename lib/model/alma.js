import{Matrix}from"../util/math.js";export default class ALMA{constructor(t=2,s=1,i=1,h=1){this._p=t,this._alpha=s,this._b=i,this._c=h,this._w=null,this._k=1}init(t,s){this._x=Matrix.fromArray(t),this._shift=this._x.mean(0),this._x.sub(this._shift),this._y=s,this._w=Matrix.zeros(this._x.cols,1),this._k=1}update(t,s){const i=this._b*Math.sqrt((this._p-1)/this._k);if(this._w.tDot(t).value[0]*s>(1-this._alpha)*i)return;const h=this._c/Math.sqrt((this._p-1)*this._k),_=t.copyMult(h*s);_.add(this._w);const r=_.value.reduce(((t,s)=>t+s**this._p),0)**(1/this._p);_.div(Math.max(1,r)),this._w=_}fit(){for(let t=0;t<this._x.rows;t++)this.update(this._x.row(t).t,this._y[t])}predict(t){const s=Matrix.fromArray(t);s.sub(this._shift);return s.dot(this._w).value.map((t=>t<=0?-1:1))}}