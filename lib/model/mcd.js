import Matrix from"../util/matrix.js";const shuffle=function(t){for(let s=t.length-1;s>0;s--){let i=Math.floor(Math.random()*(s+1));[t[s],t[i]]=[t[i],t[s]]}return t};export default class MCD{constructor(t,s){this._datas=t,this._h=this._datas.length*s,this._ext_idx=[];for(let t=0;t<this._datas.length;this._ext_idx.push(t++));shuffle(this._ext_idx),this._ext_idx=this._ext_idx.slice(0,this._h),this._Ri=null,this._mean=null,this._std=null}fit(){const t=this._datas.length,s=this._datas[0].length;let i=new Matrix(t,s,this._datas);i=i.row(this._ext_idx),this._mean=i.mean(0),i.sub(this._mean),this._std=i.std(0),i.div(this._std);const h=i.cov();this._Ri=h.inv();const e=this.predict(this._datas).map(((t,s)=>[s,t]));e.sort(((t,s)=>t[1]-s[1])),this._ext_idx=e.map((t=>t[0])).slice(0,this._h)}predict(t){const s=[];for(let i=0;i<t.length;i++){let h=0;const e=[];for(let s=0;s<t[i].length;s++)e[s]=(t[i][s]-this._mean.value[s])/this._std.value[s];for(let t=0;t<e.length;t++)for(let s=0;s<e.length;s++)h+=e[s]*this._Ri.at(s,t)*e[t];s.push(h/2)}return s}}