export default class BudgetPerceptron{constructor(t,s){this._beta=t,this._n=s}init(t,s){this._x=t,this._y=s,this._k=0,this._w=Array(this._x[0].length).fill(0),this._c=0,this._s=[]}fit(){for(let t=0;t<this._x.length;t++){if(this._x[t].reduce(((t,s,i)=>t+s*this._w[i]),this._c)*this._y[t]<=this._beta){for(let s=0;s<this._x[t].length;s++)this._w[s]+=this._y[t]*this._x[t][s];if(this._c+=this._y[t],this._n<=0)for(let t=this._s.length-1;t>=0;t--){const s=this._s[t];this._x[s].reduce(((t,i,h)=>t+i*(this._w[h]-this._y[s]*this._x[s][h])),this._c-this._y[s])*this._y[s]>this._beta||this._s.splice(t,1)}else if(this._s.length>=this._n){const t=this._s.map(((t,s)=>[s,this._x[t].reduce(((s,i,h)=>s+i*(this._w[h]-this._y[t]*this._x[t][h])),this._c-this._y[t])*this._y[t]]));t.sort(((t,s)=>s[1]-t[1])),this._s.splice(t[0][0],1)}this._s.push(t)}}}predict(t){const s=[];for(let i=0;i<t.length;i++){const h=t[i].reduce(((t,s,i)=>t+s*this._w[i]),this._c);s.push(h<=0?-1:1)}return s}}