var u=Object.defineProperty;var _=(d,g)=>u(d,"name",{value:g,configurable:!0});export default class v{static{_(this,"NCubicInterpolation")}fit(g,h){this._v=g,this._grids=h,this._offset_idx=[];for(let r=0;r<4**this._grids.length;r++)this._offset_idx.push(r.toString(4).padStart(this._grids.length,"0").split(""))}predict(g){return g.map(h=>{const r=[];for(let t=0;t<h.length;t++){if(h[t]<this._grids[t][1]||this._grids[t][this._grids[t].length-2]<h[t])return null;let i=-1;for(let n=0;n<this._grids[t].length&&h[t]>=this._grids[t][n];i=n++);r[t]=i===this._grids[t].length-2?i-1:i}const e=this._offset_idx.map(t=>t.reduce((i,n,s)=>i[r[s]-1+ +n],this._v));for(let t=0;t<this._grids.length;t++){const i=this._grids[t][r[t]],n=this._grids[t][r[t]+1],s=(h[t]-i)/(n-i),c=-(s**3)+2*s**2-s,f=3*s**3-5*s**2+2,a=-3*s**3+4*s**2+s,p=s**3-s**2,o=e.length/4;for(let l=0;l<o;l++)e[l]=(c*e[l]+f*e[l+o]+a*e[l+2*o]+p*e[l+3*o])/2;e.length=o}return e[0]})}}
