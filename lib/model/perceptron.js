import Matrix from"../util/matrix.js";export class Perceptron{constructor(t=!1,i){this._r=i,this._average=t}init(t,i){this._x=Matrix.fromArray(t),this._y=i,this._epoch=0,this._a=Matrix.randn(this._x.cols,1),this._atotal=Matrix.zeros(this._x.cols,1),this._b=0,this._btotal=0}fit(){const t=this._x.dot(this._a);t.map((t=>t+this._b<=0?-1:1)),this._epoch++;for(let i=0;i<this._x.rows;i++)if(t.at(i,0)!==this._y[i]){const s=(this._y[i]-t.at(i,0))*this._r,h=this._x.row(i);h.mult(s),this._average?(this._atotal.add(h.t),this._a.add(Matrix.div(this._atotal,this._epoch)),this._btotal+=s,this._b+=this._btotal/this._epoch):(this._a.add(h.t),this._b+=s)}}predict(t){return Matrix.fromArray(t).dot(this._a).value.map((t=>t+this._b<=0?-1:1))}}export class MulticlassPerceptron{constructor(t){this._r=t}init(t,i){this._x=Matrix.fromArray(t),this._c=[...new Set(i)],this._y=i.map((t=>this._c.indexOf(t))),this._epoch=0,this._a=Matrix.randn(this._x.cols,this._c.length),this._b=Matrix.zeros(1,this._c.length)}fit(){const t=this._x.dot(this._a);t.add(this._b);const i=t.argmax(1);this._epoch++;for(let t=0;t<this._x.rows;t++)if(i.at(t,0)!==this._y[t]){for(let s=0;s<this._a.rows;s++)this._a.addAt(s,this._y[t],this._x.at(t,s)*this._r),this._a.subAt(s,i.at(t,0),this._x.at(t,s)*this._r);this._b.addAt(0,this._y[t],this._r),this._b.subAt(0,i.at(t,0),this._r)}}predict(t){const i=Matrix.fromArray(t).dot(this._a);return i.add(this._b),i.argmax(1).value.map((t=>this._c[t]))}}