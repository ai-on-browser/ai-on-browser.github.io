var m=Object.defineProperty;var l=(n,e)=>m(n,"name",{value:e,configurable:!0});import o from"../util/matrix.js";export default class a{static{l(this,"MultivariateKernelDensityEstimator")}constructor(e="silverman"){this._method=e}_kernel(e,i,t){const r=t.cols,h=t.dot(e);h.mult(t);const s=h.sum(1);return s.map(_=>Math.exp(-_/2)/((2*Math.PI)**(r/2)*i)),s}fit(e){this._x=o.fromArray(e);const i=e.length,t=e[0].length;if(this._method==="pi")throw new Error("Not implemented");if(this._method==="scv")throw new Error("Not implemented");if(this._method==="silverman"){const r=this._x.std(0).value;this._h=o.zeros(t,t);const h=(4/(t+2))**(1/(t+4))/i**(1/(t+4));for(let s=0;s<t;s++)this._h.set(s,s,(r[s]*h)**2)}else if(this._method==="scott"){const r=this._x.std(0).value;this._h=o.zeros(t,t);const h=1/i**(1/(t+4));for(let s=0;s<t;s++)this._h.set(s,s,(r[s]*h)**2)}this._invh=this._h.inv(),this._hsqrtdet=Math.sqrt(this._h.det())}probability(e){return e.map(i=>{const t=new o(1,i.length,i);return t.isub(this._x),this._kernel(this._invh,this._hsqrtdet,t).mean()})}predict(e){return this.probability(e)}}
