var p=Object.defineProperty;var x=(a,h)=>p(a,"name",{value:h,configurable:!0});import r from"../util/matrix.js";export default class u{static{x(this,"LMNN")}constructor(h,i){this._classes=[],this._alpha=.1,this._gamma=h,this._h=i,this._m=null}init(h,i){this._classes=[...new Set(i)],this._x=r.fromArray(h),this._y=i,this._m=r.zeros(this._x.cols,this._x.cols),this._neighbors=[],this._impostors=[];for(let n=0;n<this._classes.length;n++){const t=this._y.map((s,o)=>[s,o]).filter(s=>s[0]===this._classes[n]).map(s=>s[1]),_=this._x.row(t);for(let s=0;s<t.length;s++){const o=r.sub(_,this._x.row(t[s]));o.remove(s,0),o.map(c=>c**2);const l=o.sum(1).sort(0);this._neighbors[t[s]]=l.slice(0,Math.min(this._gamma,l.length)).map(c=>t[c])}const e=this._y.map((s,o)=>[s,o]).filter(s=>s[0]!==this._classes[n]).map(s=>s[1]),m=this._x.row(e);for(let s=0;s<t.length;s++){const o=r.sub(m,this._x.row(t[s]));o.map(c=>c**2);const l=o.sum(1).sort(0);this._impostors[t[s]]=l.slice(0,Math.min(this._gamma,l.length)).map(c=>e[c])}}}fit(){const h=r.zeros(this._x.cols,this._x.cols);for(let i=0;i<this._neighbors.length;i++){const n=this._x.row(i);for(let t=0;t<this._neighbors[i].length;t++){const _=r.sub(n,this._x.row(this._neighbors[i][t])),e=_.tDot(_);h.add(e);for(let m=0;m<this._impostors[i].length;m++){const s=r.sub(n,this._x.row(this._impostors[i][m])),o=r.sub(e,s.tDot(s));o.mult(this._h),h.add(o)}}}h.mult(this._alpha),this._m.sub(h)}predict(h){return h.map(i=>{const n=r.fromArray(i),t=r.sub(this._x,n.t),_=t.dot(this._m);_.mult(t);const e=_.sum(1);return this._y[e.argmin(0).toScaler()]})}}
