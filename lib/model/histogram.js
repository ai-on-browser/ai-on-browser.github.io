import Matrix from"../util/matrix.js";export default class Histogram{constructor(t={}){this._config=t}fit(t){let s=this._config.range;if(!s){let e=this._config.domain;if(!e){e=t[0].map((t=>[t,t]));for(let s=0;s<t.length;s++)for(let r=0;r<t[s].length;r++)e[r][0]=Math.min(t[s][r],e[r][0]),e[r][1]=Math.max(t[s][r],e[r][1])}let r=this._config.size,a=this._config.count;if(!r&&!a){const s=this._config.binMethod||"scott",e=Matrix.fromArray(t),n=t.length;if("fd"===s){const t=e.quantile(.75,0),s=e.quantile(.25,0);t.sub(s),r=t.value.map((t=>2*t/Math.cbrt(n)))}else"scott"===s?r=e.std(0).value.map((t=>t*Math.cbrt(24*Math.sqrt(Math.PI)/n))):"rice"===s?a=2*Math.cbrt(n):"sturges"===s?a=Math.log2(n)+1:"doane"===s?(e.sub(e.mean(0)),e.div(e.std(0)),e.map((t=>t**3)),a=1+Math.log2(n)+Math.log2(1+Math.abs(e.mean())/Math.sqrt(6*(n-1)/((n+1)*(n+3))))):"sqrt"===s&&(a=Math.sqrt(n))}this._size=r,this._count=a,r?(Array.isArray(r)||(r=Array(e.length).fill(r)),s=e.map(((t,s)=>{const[e,a]=t,n=[e];let h=0;for(;e+ ++h*r[s]<a+r[s];)n.push(e+h*r[s]);return n}))):(a=a||10,Array.isArray(a)||(a=Array(e.length).fill(a)),s=e.map(((t,s)=>{const[e,r]=t,n=(r-e)/a[s],h=[e];for(let t=1;t<a[s];t++)h.push(e+t*n);return h.push(r),h})))}this._ranges=s;const e=[],r=[];let a=[[e,r]];for(let t=0;t<this._ranges.length;t++){const s=[],e=this._ranges[t].length;for(const[r,n]of a)for(let a=0;a<e-1;a++)t===this._ranges.length-1?(r.push(0),n.push([])):s.push([r[a]=[],n[a]=[]]);a=s}for(const s of t){let t=e,a=r;for(let e=0;e<s.length;e++){let r=0;for(;r<this._ranges[e].length-1&&!(s[e]<=this._ranges[e][r+1]);r++);e===s.length-1?(t[r]++,a[r].push(s)):(t=t[r],a=a[r])}}return this._separate_datas=r,this._dense=e,e}predict(t){return t.map((t=>{let s=this._dense;for(let e=0;e<t.length;e++){if(t[e]<this._ranges[e][0]||this._ranges[e][this._ranges[e].length-1]<t[e])return 0;let r=0;for(;r<this._ranges[e].length-1&&!(t[e]<=this._ranges[e][r+1]);r++);s=s[r]}return s}))}}