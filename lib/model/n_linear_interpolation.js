export default class NLinearInterpolation{fit(t,i){this._v=t,this._grids=i,this._offset_idx=[];for(let t=0;t<2**this._grids.length;t++)this._offset_idx.push(t.toString(2).padStart(this._grids.length,"0").split(""))}predict(t){return t.map((t=>{const i=[];for(let s=0;s<t.length;s++){if(t[s]<this._grids[s][0]||this._grids[s][this._grids[s].length-1]<t[s])return null;let r=-1;for(let i=0;i<this._grids[s].length&&t[s]>=this._grids[s][i];r=i++);i[s]=r===this._grids[s].length-1?r-1:r}const s=this._offset_idx.map((t=>t.reduce(((t,s,r)=>t[i[r]+ +s]),this._v)));for(let r=0;r<this._grids.length;r++){const e=this._grids[r][i[r]],h=this._grids[r][i[r]+1],g=(t[r]-e)/(h-e),l=s.length/2;for(let t=0;t<l;t++)s[t]=s[t]+g*(s[t+l]-s[t]);s.length=l}return s[0]}))}}