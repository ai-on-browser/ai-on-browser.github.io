import{Matrix}from"../util/math.js";export class SplineInterpolation{constructor(){}fit(t,s){const i=t.length,e=t.map(((t,i)=>[t,s[i]]));e.sort(((t,s)=>t[0]-s[0])),t=this._x=e.map((t=>t[0])),s=this._y=e.map((t=>t[1]));const h=Matrix.zeros(i,i),r=new Matrix(i,1);h.set(0,0,2/(t[1]-t[0])),r.set(0,0,3*(s[1]-s[0])/(t[1]-t[0])**2);for(let e=1;e<i;e++)h.set(e-1,e,1/(t[e]-t[e-1])),h.set(e,e-1,1/(t[e]-t[e-1])),e<i-1?(h.set(e,e,2/(t[e]-t[e-1])+2/(t[e+1]-t[e])),r.set(e,0,3*((s[e]-s[e-1])/(t[e]-t[e-1])**2+(s[e+1]-s[e])/(t[e+1]-t[e])**2))):(h.set(e,e,2/(t[e]-t[e-1])),r.set(e,0,3*(s[e]-s[e-1])/(t[e]-t[e-1])**2));const o=h.solve(r).value;this._a=[],this._b=[];for(let e=0;e<i-1;e++)this._a.push(o[e]*(t[e+1]-t[e])-(s[e+1]-s[e])),this._b.push(-o[e+1]*(t[e+1]-t[e])+(s[e+1]-s[e]))}predict(t){const s=this._x.length;return t.map((t=>{if(t<this._x[0])return this._y[0];let i=0;for(;i<s-1&&this._x[i+1]<=t;i++);if(i===s-1)return this._y[s-1];const e=(t-this._x[i])/(this._x[i+1]-this._x[i]);return(1-e)*this._y[i]+e*this._y[i+1]+e*(1-e)*((1-e)*this._a[i]+e*this._b[i])}))}}