var p=Object.defineProperty;var l=(_,s)=>p(_,"name",{value:s,configurable:!0});import c from"../util/matrix.js";export default class f{static{l(this,"SplineInterpolation")}constructor(){}fit(s,i){const r=s.length,e=s.map((t,o)=>[t,i[o]]);e.sort((t,o)=>t[0]-o[0]),s=this._x=e.map(t=>t[0]),i=this._y=e.map(t=>t[1]);const h=c.zeros(r,r),n=new c(r,1);h.set(0,0,2/(s[1]-s[0])),n.set(0,0,3*(i[1]-i[0])/(s[1]-s[0])**2);for(let t=1;t<r;t++)h.set(t-1,t,1/(s[t]-s[t-1])),h.set(t,t-1,1/(s[t]-s[t-1])),t<r-1?(h.set(t,t,2/(s[t]-s[t-1])+2/(s[t+1]-s[t])),n.set(t,0,3*((i[t]-i[t-1])/(s[t]-s[t-1])**2+(i[t+1]-i[t])/(s[t+1]-s[t])**2))):(h.set(t,t,2/(s[t]-s[t-1])),n.set(t,0,3*(i[t]-i[t-1])/(s[t]-s[t-1])**2));const a=h.solve(n).value;this._a=[],this._b=[];for(let t=0;t<r-1;t++)this._a.push(a[t]*(s[t+1]-s[t])-(i[t+1]-i[t])),this._b.push(-a[t+1]*(s[t+1]-s[t])+(i[t+1]-i[t]))}predict(s){const i=this._x.length;return s.map(r=>{if(r<this._x[0])return this._y[0];let e=0;for(;e<i-1&&this._x[e+1]<=r;e++);if(e===i-1)return this._y[i-1];const h=(r-this._x[e])/(this._x[e+1]-this._x[e]);return(1-h)*this._y[e]+h*this._y[e+1]+h*(1-h)*((1-h)*this._a[e]+h*this._b[e])})}}
