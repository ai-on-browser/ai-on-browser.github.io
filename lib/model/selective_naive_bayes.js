import Matrix from"../util/matrix.js";class Gaussian{constructor(){this._means=null,this._vars=null}_estimate_prob(t){this._means=t.mean(0),this._vars=t.variance(0)}_data_prob(t){const s=t.copySub(this._means);return s.mult(s),s.div(this._vars),s.map((t=>Math.exp(-t/2))),s.div(this._vars.copyMap((t=>Math.sqrt(2*Math.PI*t)))),s.prod(1)}}export default class SelectiveNaiveBayes{constructor(t="gaussian"){this._labels=[],this._rate=[],this._ratec=[],"gaussian"===t&&(this._p_class=Gaussian),this._p=[],this._pc=[]}fit(t,s){this._labels=[...new Set(s)],this._p=[],this._pc=[],this._rate=[],this._ratec=[];for(let a=0;a<this._labels.length;a++){const i=Matrix.fromArray(t.filter(((t,i)=>s[i]===this._labels[a]))),e=Matrix.fromArray(t.filter(((t,i)=>s[i]!==this._labels[a])));this._p[a]=new this._p_class,this._p[a]._estimate_prob(i),this._pc[a]=new this._p_class,this._pc[a]._estimate_prob(e),this._rate[a]=i.rows/t.length,this._ratec[a]=e.rows/t.length}}predict(t){const s=Matrix.fromArray(t),a=[],i=Matrix.zeros(s.rows,1),e=Matrix.zeros(s.rows,1);for(let t=0;t<this._labels.length;t++){const r=this._p[t]._data_prob(s);r.mult(this._rate[t]);const _=this._pc[t]._data_prob(s);_.mult(this._ratec[t]),this._rate[t]>=.5?a.push(r):a.push(_),i.add(r),e.add(_)}for(let t=0;t<this._labels.length;t++)this._rate[t]>=.5?a[t].div(i):(a[t].div(e),a[t].map((t=>1-(this._labels.length-1)*t)));return t.map(((t,s)=>{let i=0,e=-1;for(let t=0;t<this._labels.length;t++){let r=a[t].value[s];r>i&&(i=r,e=t)}return this._labels[e]}))}}