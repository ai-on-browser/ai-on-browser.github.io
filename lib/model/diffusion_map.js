import{Matrix}from"../util/math.js";export default class DiffusionMap{constructor(t,s="gaussian"){this._t=t,"gaussian"===s&&(this._k=(t,s)=>Math.exp(-t.reduce(((t,e,i)=>t+(e-s[i])**2),0)/2))}predict(t,s){const e=t.length,i=new Matrix(e,e);for(let s=0;s<e;s++)for(let r=s;r<e;r++){const e=this._k(t[s],t[r]);i.set(s,r,e),i.set(r,s,e)}i.div(i.sum(1));const r=i.power(this._t),[a,o]=r.eigen(),n=o.slice(0,s,1),c=new Matrix(1,s,a.slice(0,s));return c.map((t=>t**this._t)),n.mult(c),n.toArray()}}