var g=Object.defineProperty;var r=(o,s)=>g(o,"name",{value:s,configurable:!0});import f from"../util/matrix.js";const l={gaussian:r((o,s)=>Math.exp(-o.reduce((i,t,a)=>i+(t-s[a])**2,0)/2),"gaussian")};export default class d{static{r(this,"DiffusionMap")}constructor(s,i,t="gaussian"){this._t=s,this._rd=i,typeof t=="function"?this._k=t:(t==="gaussian"||t.name==="gaussian")&&(this._k=l.gaussian)}predict(s){const i=s.length,t=new f(i,i);for(let e=0;e<i;e++)for(let n=e;n<i;n++){const h=this._k(s[e],s[n]);t.set(e,n,h),t.set(n,e,h)}t.div(t.sum(1));const a=t.power(this._t),[p,_]=a.eigen(),c=_.slice(0,this._rd,1),u=new f(1,this._rd,p.slice(0,this._rd));return u.map(e=>e**this._t),c.mult(u),c.toArray()}}
