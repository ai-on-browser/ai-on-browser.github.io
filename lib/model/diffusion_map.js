import Matrix from"../util/matrix.js";export default class DiffusionMap{constructor(t,s="gaussian"){this._t=t,"gaussian"===s&&(this._k=(t,s)=>Math.exp(-t.reduce(((t,i,e)=>t+(i-s[e])**2),0)/2))}predict(t,s){const i=t.length,e=new Matrix(i,i);for(let s=0;s<i;s++)for(let r=s;r<i;r++){const i=this._k(t[s],t[r]);e.set(s,r,i),e.set(r,s,i)}e.div(e.sum(1));const r=e.power(this._t),[a,o]=r.eigen(),n=o.slice(0,s,1),c=new Matrix(1,s,a.slice(0,s));return c.map((t=>t**this._t)),n.mult(c),n.toArray()}}