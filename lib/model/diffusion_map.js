var _=Object.defineProperty;var h=(u,s)=>_(u,"name",{value:s,configurable:!0});import g from"../util/matrix.js";export default class m{static{h(this,"DiffusionMap")}constructor(s,i="gaussian"){this._t=s,typeof i=="function"?this._k=i:i==="gaussian"&&(this._k=(o,e)=>Math.exp(-o.reduce((c,a,r)=>c+(a-e[r])**2,0)/2))}predict(s,i){const o=s.length,e=new g(o,o);for(let t=0;t<o;t++)for(let n=t;n<o;n++){const l=this._k(s[t],s[n]);e.set(t,n,l),e.set(n,t,l)}e.div(e.sum(1));const c=e.power(this._t),[a,r]=c.eigen(),f=r.slice(0,i,1),p=new g(1,i,a.slice(0,i));return p.map(t=>t**this._t),f.mult(p),f.toArray()}}
