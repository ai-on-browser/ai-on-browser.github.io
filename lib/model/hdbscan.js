var p=Object.defineProperty;var u=(o,c)=>p(o,"name",{value:c,configurable:!0});const y={euclid:u((o,c)=>Math.sqrt(o.reduce((l,h,s)=>l+(h-c[s])**2,0)),"euclid"),manhattan:u((o,c)=>o.reduce((l,h,s)=>l+Math.abs(h-c[s]),0),"manhattan"),chebyshev:u((o,c)=>Math.max(...o.map((l,h)=>Math.abs(l-c[h]))),"chebyshev")};export default class k{static{u(this,"HDBSCAN")}constructor(c=5,l=5,h="euclid"){this._minClusterSize=c,this._minPts=l,this._metric=h,typeof this._metric=="function"?this._d=this._metric:this._d=y[this._metric]}get size(){if(!this._lastResult)return 0;const c=new Set;for(let l=0;l<this._lastResult.length;l++)this._lastResult[l]>=0&&c.add(this._lastResult[l]);return c.size}predict(c){const l=c.length,h=[],s=[];for(let t=0;t<l;t++)h[t]=[],s[t]=[];const g=[];for(let t=0;t<l;t++){h[t][t]=0;for(let i=t+1;i<l;i++)h[t][i]=h[i][t]=this._d(c[t],c[i]);const e=h[t].concat();e.sort((i,r)=>i-r),g[t]=e[this._minPts]}for(let t=0;t<l;t++){s[t][t]=0;for(let e=t+1;e<l;e++)s[t][e]=s[e][t]=Math.max(g[t],g[e],h[t][e])}const d=[];for(let t=0;t<l;t++)d[t]={index:[t],distance:0,children:[]};for(;d.length>1;){let t=-1,e=-1,i=1/0;const r=d.length;for(let n=0;n<r;n++)for(let f=n+1;f<r;f++)s[n][f]<i&&(t=n,e=f,i=s[n][f]);for(let n=0;n<r;n++)n!=e&&n!=t&&(s[t][n]=s[n][t]=Math.min(s[t][n],s[e][n]),s[n].splice(e,1));s[t].splice(e,1),s.splice(e,1),d[t]={distance:i,index:[...d[t].index,...d[e].index],children:[d[t],d[e]]},d.splice(e,1)}const x={},m=[[d[0],x]],a=[];for(;m.length>0;){let[t,e]=m.pop();for(e.index=t.index,e.lbirth=1/t.distance,e.stability=0,e.children=[],a.push(e);;){for(let i=t.children.length-1;i>=0;i--){const r=t.children[i];r.index.length<this._minClusterSize&&(t.children.splice(i,1),r.distance>0&&(e.stability+=r.index.length*(1/r.distance-e.lbirth)))}if(t.children.length===0)break;if(t.children.length===1)t=t.children[0];else{for(let i=0;i<t.children.length;i++){const r={};m.push([t.children[i],e.children[i]=r])}break}}}for(let t=a.length-1;t>=0;t--){const e=a[t];if(e.children.length<=0)continue;let i=0;for(let r=0;r<e.children.length;r++){const n=e.children[r];e.stability+=n.index.length*(n.lbirth-e.lbirth),i+=n.stability}e.stability>i?e.isCluster=!0:e.stability=i}let b=0;const _=Array(l).fill(-1);for(let t=0;t<a.length;t++)if(a[t].isCluster){for(let e=0;e<a[t].index.length;e++)_[a[t].index[e]]<0&&(_[a[t].index[e]]=b);b++}return this._lastResult=_.concat(),_}}
