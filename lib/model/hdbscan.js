export default class HDBSCAN{constructor(t=5,e=5,i="euclid"){switch(this._minClusterSize=t,this._minPts=e,this._metric=i,this._metric){case"euclid":this._d=(t,e)=>Math.sqrt(t.reduce(((t,i,l)=>t+(i-e[l])**2),0));break;case"manhattan":this._d=(t,e)=>t.reduce(((t,i,l)=>t+Math.abs(i-e[l])),0);break;case"chebyshev":this._d=(t,e)=>Math.max(...t.map(((t,i)=>Math.abs(t-e[i]))))}}get size(){if(!this._lastResult)return 0;const t=new Set;for(let e=0;e<this._lastResult.length;e++)this._lastResult[e]>=0&&t.add(this._lastResult[e]);return t.size}predict(t){const e=t.length,i=[],l=[];for(let t=0;t<e;t++)i[t]=[],l[t]=[];const n=[];for(let l=0;l<e;l++){i[l][l]=0;for(let n=l+1;n<e;n++)i[l][n]=i[n][l]=this._d(t[l],t[n]);const s=i[l].concat();s.sort(((t,e)=>t-e)),n[l]=s[this._minPts]}for(let t=0;t<e;t++){l[t][t]=0;for(let s=t+1;s<e;s++)l[t][s]=l[s][t]=Math.max(n[t],n[s],i[t][s])}const s=[];for(let t=0;t<e;t++)s[t]={index:[t],distance:0,children:[]};for(;s.length>1;){let t=-1,e=-1,i=1/0;const n=s.length;for(let s=0;s<n;s++)for(let r=s+1;r<n;r++)l[s][r]<i&&(t=s,e=r,i=l[s][r]);for(let i=0;i<n;i++)i!=e&&i!=t&&(l[t][i]=l[i][t]=Math.min(l[t][i],l[e][i]),l[i].splice(e,1));l[t].splice(e,1),l.splice(e,1),s[t]={distance:i,index:[...s[t].index,...s[e].index],children:[s[t],s[e]]},s.splice(e,1)}const r=[[s[0],{}]],h=[];for(;r.length>0;){let[t,e]=r.pop();for(e.index=t.index,e.lbirth=1/t.distance,e.stability=0,e.children=[],h.push(e);;){for(let i=t.children.length-1;i>=0;i--){const l=t.children[i];l.index.length<this._minClusterSize&&(t.children.splice(i,1),l.distance>0&&(e.stability+=l.index.length*(1/l.distance-e.lbirth)))}if(0===t.children.length)break;if(1!==t.children.length){for(let i=0;i<t.children.length;i++){const l={};r.push([t.children[i],e.children[i]=l])}break}t=t.children[0]}}for(let t=h.length-1;t>=0;t--){const e=h[t];if(e.children.length<=0)continue;let i=0;for(let t=0;t<e.children.length;t++){const l=e.children[t];e.stability+=l.index.length*(l.lbirth-e.lbirth),i+=l.stability}e.stability>i?e.isCluster=!0:e.stability=i}let c=0;const d=Array(e).fill(-1);for(let t=0;t<h.length;t++)if(h[t].isCluster){for(let e=0;e<h[t].index.length;e++)d[h[t].index[e]]<0&&(d[h[t].index[e]]=c);c++}return this._lastResult=d.concat(),d}}