export default class MutualKNN{constructor(t=5){this._p=[],this._k=t}get size(){const t=this.predict();return new Set(t).size}_d(t,e){return Math.sqrt(t.reduce(((t,s,r)=>t+(s-e[r])**2),0))}fit(t){const e=t.length,s=[];for(let r=0;r<e;r++){s[r]=[],s[r][r]=0;for(let e=0;e<r;e++)s[r][e]=s[e][r]=this._d(t[r],t[e])}const r=[];for(let t=0;t<e;t++){const o=s[t].map(((t,e)=>[t,e]));o.sort(((t,e)=>t[0]-e[0]));const l=o.slice(1,this._k+1);r[t]=Array(e).fill(!1);for(let e=0;e<l.length;e++)r[t][l[e][1]]=!0}const o=[];for(let t=0;t<e;t++){o[t]=Array(e).fill(!1);for(let e=0;e<t;e++)r[t][e]&&r[e][t]&&(o[t][e]=o[e][t]=!0)}const l=[];for(let t=0;t<e;t++)l.push(t);const c=[];let n=0;for(;l.length>0;){const t=[l.shift()];for(;t.length>0;){const e=t.pop();c[e]=n;for(let s=l.length-1;s>=0;s--)o[e][l[s]]&&(t.push(l[s]),l.splice(s,1))}n++}this._c=c}predict(){return this._c}}