import Matrix from"../util/matrix.js";const logGamma=t=>{if(Number.isInteger(t)&&t>0){let r=0;for(let a=2;a<t;a++)r+=Math.log(a);return r}if(Number.isInteger(t-.5)&&t>0){const r=t-.5;let a=Math.log(Math.sqrt(Math.PI))-Math.log(2)*r;for(let t=2*r-1;t>0;t-=2)a+=Math.log(t);return a}throw""},beta=(t,r)=>Math.exp(logGamma(t)+logGamma(r)-logGamma(t+r)),ibeta=(t,r,a)=>{if(t>(r+1)/(r+a+1))return 1-ibeta(1-t,a,r);let e,o,n,s=-t*(r+a)/(r+1),l=2,i=1+s/l,h=1,u=1+s/h,f=1,M=l/h*f,c=i/u*M;for(let m=1;m<1e3&&!(Math.abs(c-f)<1e-12);m++){const b=2*m*r;e=t*m*(a-m)/(b*(b-1)),s=-t*(r+m)*(r+a+m)/(b*(b+1)),o=i,l=1+e/o,i=1+s/l,n=u,h=1+e/n,u=1+s/h,f=c,M=l/h*f,c=i/u*M}return t**r*(1-t)**a*(c-1)/(r*beta(r,a))},ct=(t,r)=>{if(1===r)return.5+Math.atan(t)/Math.PI;if(2===r)return(1+t/Math.sqrt(2+t**2))/2;const a=Math.sqrt(t**2+r);return ibeta((t+a)/(2*a),r/2,r/2)};export const qt=(t,r)=>{if(Math.abs(r)>1)throw"absolute of 'a' need less than or equals to 1.";if(1===Math.abs(r))return Math.sign(r)*(1/0);if(r>.5)return-qt(t,1-r);r=1-r;let a=1,e=null,o=0;let n=1e4;for(;n-- >0;){const n=ct(a,t);if(isNaN(n))return n;if(Math.abs(n-r)<1e-5)return a;n<r?(o=a,null===e?a*=2:a=(a+e)/2):(e=a,a=(a+o)/2)}throw"qt not converged."};const tTable=[[3.078,6.314,12.706,31.821,63.657],[1.886,2.92,4.303,6.965,9.925],[1.638,2.353,3.182,4.541,5.841],[1.533,2.132,2.776,3.747,4.604],[1.476,2.015,2.571,3.365,4.032],[1.44,1.943,2.447,3.143,3.707],[1.415,1.895,2.365,2.998,3.499],[1.397,1.86,2.306,2.896,3.355],[1.383,1.833,2.262,2.821,3.25],[1.372,1.812,2.228,2.764,3.169],[1.363,1.796,2.201,2.718,3.106],[1.356,1.782,2.179,2.681,3.055],[1.35,1.771,2.16,2.65,3.012],[1.345,1.761,2.145,2.624,2.977],[1.341,1.753,2.131,2.602,2.947],[1.337,1.746,2.12,2.583,2.921],[1.333,1.74,2.11,2.567,2.898],[1.33,1.734,2.101,2.552,2.878],[1.328,1.729,2.093,2.539,2.861],[1.325,1.725,2.086,2.528,2.845],[1.323,1.721,2.08,2.518,2.831],[1.321,1.717,2.074,2.508,2.819],[1.319,1.714,2.069,2.5,2.807],[1.318,1.711,2.064,2.492,2.797],[1.316,1.708,2.06,2.485,2.787],[1.315,1.706,2.056,2.479,2.779],[1.314,1.703,2.052,2.473,2.771],[1.313,1.701,2.048,2.467,2.763],[1.311,1.699,2.045,2.462,2.756],[1.31,1.697,2.042,2.457,2.75]],v40=[1.303,1.684,2.021,2.423,2.704],v60=[1.296,1.671,2,2.39,2.66],v80=[1.292,1.664,1.99,2.374,2.639],v120=[1.289,1.658,1.98,2.358,2.617],v180=[1.286,1.653,1.973,2.347,2.603],v240=[1.285,1.651,1.97,2.342,2.596],vinf=[1.258,1.645,1.96,2.326,2.576],p=[.1,.05,.025,.01,.005];export default class SmirnovGrubbs{constructor(t){this._alpha=t}predict(t){const r=Matrix.fromArray(t),a=r.rows,e=Array(t.length).fill(!1);if(a<=2|this._alpha>a)return e;const o=r.mean(0),n=r.std(0);r.sub(o),r.abs(),r.div(n);const s=r.max(1),l=s.argmax(0).toScaler(),i=s.at(l,0),h=this._alpha/a,u=qt(a-2,h);return i>(a-1)*u/Math.sqrt(a*(a-2+u**2))&&(e[l]=!0),e}}