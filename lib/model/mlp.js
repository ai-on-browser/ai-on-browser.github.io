import NeuralNetwork from"./neuralnetwork.js";export class MLPClassifier{constructor(t,e,s){this._layers=[{type:"input"}];for(let s=0;s<t.length;s++)this._layers.push({type:"full",out_size:t[s],activation:e});this._model=null,this._classes=null,this._optimizer=s,this._epoch=0}get epoch(){return this._epoch}fit(t,e,s,i,l){this._model||(this._classes=[...new Set(e)],this._layers.push({type:"full",out_size:this._classes.length}),this._model=NeuralNetwork.fromObject(this._layers,"mse",this._optimizer));const r=e.map((t=>{const e=Array(this._classes.length).fill(0);return e[this._classes.indexOf(t)]=1,e})),h=this._model.fit(t,r,s,i,l);return this._epoch+=s,h[0]}predict(t){return this._model.calc(t).argmax(1).value.map((t=>this._classes[t]))}}export class MLPRegressor{constructor(t,e,s){this._layers=[{type:"input"}];for(let s=0;s<t.length;s++)this._layers.push({type:"full",out_size:t[s],activation:e});this._model=null,this._optimizer=s,this._epoch=0}get epoch(){return this._epoch}fit(t,e,s,i,l){this._model||(this._layers.push({type:"full",out_size:e[0].length}),this._model=NeuralNetwork.fromObject(this._layers,"mse",this._optimizer));const r=this._model.fit(t,e,s,i,l);return this._epoch+=s,r[0]}predict(t){return this._model.calc(t).toArray()}}