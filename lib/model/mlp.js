import NeuralNetwork from"./neuralnetwork.js";export default class MLP{constructor(t,e,s){this._type=t?"classifier":"regression",this._output_size=t,this._layers=[{type:"input"}],this._layers.push(...e),this._layers.push({type:"full",out_size:t||1}),t&&this._layers.push({type:"sigmoid"}),this._model=NeuralNetwork.fromObject(this._layers,"mse",s),this._epoch=0}get type(){return this._type}get output_size(){return this._output_size}get epoch(){return this._epoch}fit(t,e,s,r,i){if("classifier"===this._type&&(!Array.isArray(e[0])||1===e[0].length)){const t=[];for(const s of e){const e=Array(this._output_size).fill(0);Array.isArray(s)?1===s.length&&(e[s[0]]=1):e[s]=1,t.push(e)}e=t}this._model.fit(t,e,s,r,i),this._epoch+=s}predict(t){return this._model.calc(t).toArray()}}