import{Matrix}from"../util/math.js";export default class LabelSpreading{constructor(t=.2,s="rbf",i=.1,a=1/0){this._k=a,this._sigma=i,this._affinity=s,this._alpha=t}_affinity_matrix(t){const s=t.rows,i=Matrix.zeros(s,s);for(let a=0;a<s;a++)for(let r=a+1;r<s;r++){let s=t.row(a).copySub(t.row(r)).norm();i.set(a,r,s),i.set(r,a,s)}const a=Matrix.zeros(s,s);if(this._k>=s)a.fill(1);else if(this._k>0){for(let t=0;t<s;t++){const s=i.row(t).value.map(((t,s)=>[t,s]));s.sort(((t,s)=>t[0]-s[0]));for(let i=1;i<Math.min(this._k+1,s.length);i++)a.set(t,s[i][1],1)}a.add(a.t),a.div(2)}return"rbf"===this._affinity?i.copyMap(((t,s)=>a.at(...s)>0?Math.exp(-(t**2)/this._sigma**2):0)):"knn"===this._affinity?a.copyMap((t=>t>0?1:0)):void 0}_laplacian(t){const s=t.rows,i=this._affinity_matrix(t);let a=i.sum(1).value;const r=Matrix.diag(a);r.sub(i),a=a.map((t=>Math.sqrt(t)));for(let t=0;t<s;t++)for(let i=0;i<s;i++)r.set(t,i,r.at(t,i)/(a[t]*a[i]));r.map((t=>-t));for(let t=0;t<r.rows;t++)r.set(t,t,0);return r}init(t,s){const i=(t=Matrix.fromArray(t)).rows;this._y=s;const a=new Set;for(let t=0;t<i;t++)this._y[t]>0&&a.add(this._y[t]);this._classes=[...a],this._l=this._laplacian(t),this._probs=Matrix.zeros(i,this._classes.length);for(let t=0;t<i;t++)this._y[t]>0&&this._probs.set(t,this._classes.indexOf(this._y[t]),1)}fit(){this._probs=this._l.dot(this._probs),this._probs.mult(this._alpha);for(let t=0;t<this._y.length;t++)this._y[t]>0&&this._probs.addAt(t,this._classes.indexOf(this._y[t]),1-this._alpha)}predict(){return this._probs.argmax(1).value.map((t=>this._classes[t]))}}