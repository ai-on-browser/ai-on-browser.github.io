var f=Object.defineProperty;var _=(n,i)=>f(n,"name",{value:i,configurable:!0});import o from"../util/matrix.js";export default class c{static{_(this,"LabelSpreading")}constructor(i=.2,e="rbf",l=.1,a=1/0){this._k=a,this._sigma=l,this._affinity=e,this._alpha=i}_affinity_matrix(i){const e=i.rows,l=o.zeros(e,e);for(let t=0;t<e;t++)for(let s=t+1;s<e;s++){let r=o.sub(i.row(t),i.row(s)).norm();l.set(t,s,r),l.set(s,t,r)}const a=o.zeros(e,e);if(this._k>=e)a.fill(1);else if(this._k>0){for(let t=0;t<e;t++){const s=l.row(t).value.map((r,h)=>[r,h]);s.sort((r,h)=>r[0]-h[0]);for(let r=1;r<Math.min(this._k+1,s.length);r++)a.set(t,s[r][1],1)}a.add(a.t),a.div(2)}if(this._affinity==="rbf")return o.map(l,(t,s)=>a.at(s)>0?Math.exp(-(t**2)/this._sigma**2):0);if(this._affinity==="knn")return o.map(a,t=>t>0?1:0)}_laplacian(i){const e=i.rows,l=this._affinity_matrix(i);let a=l.sum(1).value;const t=o.diag(a);t.sub(l),a=a.map(s=>Math.sqrt(s));for(let s=0;s<e;s++)for(let r=0;r<e;r++)t.set(s,r,t.at(s,r)/(a[s]*a[r]));t.map(s=>-s);for(let s=0;s<t.rows;s++)t.set(s,s,0);return t}init(i,e){i=o.fromArray(i);const l=i.rows;this._y=e;const a=new Set;for(let t=0;t<l;t++)this._y[t]!=null&&a.add(this._y[t]);this._classes=[...a],this._l=this._laplacian(i),this._probs=o.zeros(l,this._classes.length);for(let t=0;t<l;t++)this._y[t]!=null&&this._probs.set(t,this._classes.indexOf(this._y[t]),1)}fit(){this._probs=this._l.dot(this._probs),this._probs.mult(this._alpha);for(let i=0;i<this._y.length;i++)this._y[i]!=null&&this._probs.addAt(i,this._classes.indexOf(this._y[i]),1-this._alpha)}predict(){return this._probs.argmax(1).value.map(i=>this._classes[i])}}
