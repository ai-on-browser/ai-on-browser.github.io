import{Matrix}from"../util/math.js";class Gaussian{constructor(){this._means=null,this._vars=null}_estimate_prob(t){this._means=t.mean(0),this._vars=t.variance(0)}_data_prob(t){const s=t.copySub(this._means);return s.mult(s),s.div(this._vars),s.map((t=>Math.exp(-t/2))),s.div(this._vars.copyMap((t=>Math.sqrt(2*Math.PI*t)))),s.prod(1)}}export default class ComplementNaiveBayes{constructor(t="gaussian"){this._k=0,this._labels=[],this._rate=[],this._p_class=Gaussian,this._p=[]}fit(t,s){this._labels=[...new Set(s)],this._p=[],this._rate=[];for(let a=0;a<this._labels.length;a++){const e=Matrix.fromArray(t.filter(((t,e)=>s[e]!==this._labels[a])));this._p[a]=new this._p_class,this._p[a]._estimate_prob(e),this._rate[a]=1-e.rows/t.length}}predict(t){const s=Matrix.fromArray(t),a=[];for(let t=0;t<this._labels.length;t++){const e=this._p[t]._data_prob(s);e.idiv(this._rate[t]),a.push(e)}return t.map(((t,s)=>{let e=0,i=-1;for(let t=0;t<this._labels.length;t++){let r=a[t].value[s];r>e&&(e=r,i=t)}return this._labels[i]}))}}