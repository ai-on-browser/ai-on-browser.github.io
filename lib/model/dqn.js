var y=Object.defineProperty;var p=(c,t)=>y(c,"name",{value:t,configurable:!0});import{RLRealRange as d}from"../rl/base.js";import x from"./neuralnetwork.js";const g=p(function(c){return c.length===0?-1:c.indexOf(Math.max(...c))},"argmax");class A{static{p(this,"DQN")}constructor(t,i=20,s=[],e="sgd"){this._resolution=i,this._states=t.states,this._actions=t.actions,this._action_sizes=t.actions.map(_=>Array.isArray(_)?_.length:i),this._gamma=.99,this._epoch=0,this._method="DQN",this._memory=[],this._max_memory_size=1e5,this._batch_size=1e3,this._do_update_step=10,this._fix_param_update_step=1e3,this._layers=[{type:"input"}],this._layers.push(...s),this._layers.push({type:"full",out_size:this._action_sizes.reduce((_,n)=>_*n,1)},{type:"output",name:"output"},{type:"huber"}),this._target=null,this._net=x.fromObject(this._layers,null,e)}set method(t){this._method=t,t==="DQN"&&this._target&&(this._target=null)}get_best_action(t){t=this._state_to_input(t);const i=this._net.calc([t]);return this._pos_action(g(i.toArray()[0]))}_state_to_input(t){const i=[];for(let s=0;s<t.length;s++)if(Array.isArray(this._states[s]))for(let e=0;e<this._states[s].length;e++)i.push(this._states[s][e]===t[s]?1:0);else i.push(t[s]);return i}get_score(){if(!this._states_data){const e=this._states.map(a=>a.toArray(this._resolution).length);this._states_data=[];const _=p(a=>{for(let h=0;h<a.length;h++){if(a[h]++,a[h]<e[h])return!0;a[h]=0}return!1},"next_idx"),n=Array(this._states.length).fill(0);do this._states_data.push([].concat(n));while(_(n))}const t=this._net.calc(this._states_data).toArray(),i=[],s=this._states.length;for(let e=0;e<this._states_data.length;e++){let _=i;for(let n=0;n<s-1;n++)_[this._states_data[e][n]]||(_[this._states_data[e][n]]=[]),_=_[this._states_data[e][n]];_[this._states_data[e][s-1]]=t[e]}return i}_action_pos(t){let i=0;for(let s=0;s<t.length;s++)if(i=i*this._action_sizes[s],Array.isArray(this._actions[s]))i+=this._actions[s].indexOf(t[s]);else if(this._actions[s]instanceof d)i+=this._actions[s].indexOf(t[s],this._resolution);else throw"Not implemented";return i}_pos_action(t){const i=[];for(let s=this._action_sizes.length-1;s>=0;s--){const e=t%this._action_sizes[s];if(t=Math.floor(t/this._action_sizes[s]),Array.isArray(this._actions[s]))i.unshift(this._actions[s][e]);else if(this._actions[s]instanceof d)i.unshift(this._actions[s].toArray(this._resolution)[e]);else throw"Not implemented"}return i}update(t,i,s,e,_,n,a){const h=this._state_to_input(i),u=this._state_to_input(s);if(this._memory.push([t,h,u,e]),this._memory.length<this._batch_size||(this._memory.length>this._max_memory_size&&this._memory.shift(),++this._epoch%this._do_update_step>0))return;const l=[];for(let o=0;o<this._batch_size;o++){let m=Math.floor(Math.random()*(this._memory.length-o)),f=0;for(;f<l.length&&l[f]<=m;f++,m++);l.splice(f,0,m)}const r=l.map(o=>this._memory[o]);return this._method==="DDQN"?this._update_ddqn(r,n,a):this._update_dqn(r,n,a)}_update_dqn(t,i,s){const e=t.map(r=>r[1]),_=t.map(r=>r[2]),n=[].concat(e,_),a=this._net.calc(n).toArray(),h=a.slice(0,e.length),u=a.slice(e.length);for(let r=0;r<h.length;r++){const o=this._action_pos(t[r][0]);h[r][o]=t[r][3]+this._gamma*Math.max(...u[r])}return this._net.fit(e,h,1,i,s)[0]}_update_ddqn(t,i,s){const e=t.map(o=>o[1]),_=t.map(o=>o[2]),n=[].concat(e,_),a=this._net.calc(n).toArray(),h=a.slice(0,e.length),u=a.slice(e.length),l=(this._target||this._net).calc(_).toArray();for(let o=0;o<h.length;o++){const m=this._action_pos(t[o][0]);h[o][m]=t[o][3]+this._gamma*l[o][g(u[o])]}const r=this._net.fit(e,h,1,i,s);return this._epoch%this._fix_param_update_step&&(this._target=this._net.copy()),r[0]}}export default class z{static{p(this,"DQNAgent")}constructor(t,i,s,e){this._env=t,this._net=new A(t,i,s,e)}set method(t){this._net.method=t}terminate(){}get_score(){return this._net.get_score()}get_action(t,i=.002){return Math.random()>i?this._net.get_best_action(t):this._env.sample_action(this)}update(t,i,s,e,_,n,a){return this._net.update(t,i,s,e,_,n,a)}}
