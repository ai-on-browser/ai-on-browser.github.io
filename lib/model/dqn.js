import{RLRealRange}from"../rl/base.js";import NeuralNetwork from"./neuralnetwork.js";const argmax=function(t,s){return 0===t.length?-1:(t=s?t.map(s):t).indexOf(Math.max(...t))};class DQN{constructor(t,s=20,e=[],a="sgd"){this._resolution=s,this._states=t.states,this._actions=t.actions,this._action_sizes=t.actions.map((t=>Array.isArray(t)?t.length:s)),this._gamma=.99,this._epoch=0,this._method="DQN",this._memory=[],this._max_memory_size=1e5,this._batch_size=1e3,this._do_update_step=10,this._fix_param_update_step=1e3,this._layers=[{type:"input"}],this._layers.push(...e),this._layers.push({type:"full",out_size:this._action_sizes.reduce(((t,s)=>t*s),1)},{type:"output",name:"output"},{type:"huber"}),this._target=null,this._net=NeuralNetwork.fromObject(this._layers,null,a)}set method(t){this._method=t,"DQN"===t&&this._target&&(this._target=null)}get_best_action(t){t=this._state_to_input(t);const s=this._net.calc([t]);return[argmax(s.toArray()[0])]}_state_to_input(t){const s=[];for(let e=0;e<t.length;e++)if(Array.isArray(this._states[e]))for(let a=0;a<this._states[e].length;a++)s.push(this._states[e][a]===t[e]?1:0);else s.push(t[e]);return s}get_score(){if(!this._states_data){const t=this._states.map((t=>t.toArray(this._resolution).length));this._states_data=[];const s=s=>{for(let e=0;e<s.length;e++){if(s[e]++,s[e]<t[e])return!0;s[e]=0}return!1},e=Array(this._states.length).fill(0);do{this._states_data.push([].concat(e))}while(s(e))}const t=this._net.calc(this._states_data).toArray(),s=[],e=this._states.length;for(let a=0;a<this._states_data.length;a++){let i=s;for(let t=0;t<e-1;t++)i[this._states_data[a][t]]||(i[this._states_data[a][t]]=[]),i=i[this._states_data[a][t]];i[this._states_data[a][e-1]]=t[a]}return s}_action_pos(t){let s=0;for(let e=0;e<t.length;e++)if(s*=this._action_sizes[e],Array.isArray(this._actions[e]))s+=this._actions[e].indexOf(t[e]);else{if(!(this._actions[e]instanceof RLRealRange))throw"Not implemented";s+=this._actions[e].indexOf(t[e],this._resolution)}return s}update(t,s,e,a,i,_,h){const n=this._state_to_input(s),o=this._state_to_input(e);if(this._memory.push([t,n,o,a]),this._memory.length<this._batch_size)return;if(this._memory.length>this._max_memory_size&&this._memory.shift(),++this._epoch%this._do_update_step>0)return;const r=[];for(let t=0;t<this._batch_size;t++){let s=Math.floor(Math.random()*(this._memory.length-t)),e=0;for(;e<r.length&&r[e]<=s;e++,s++);r.splice(e,0,s)}const l=r.map((t=>this._memory[t]));"DDQN"===this._method?this._update_ddqn(l,_,h):this._update_dqn(l,_,h)}_update_dqn(t,s,e){const a=t.map((t=>t[1])),i=t.map((t=>t[2])),_=[].concat(a,i),h=this._net.calc(_).toArray(),n=h.slice(0,a.length),o=h.slice(a.length);for(let s=0;s<n.length;s++){const e=this._action_pos(t[s][0]);n[s][e]=t[s][3]+this._gamma*Math.max(...o[s])}this._net.fit(a,n,1,s,e)}_update_ddqn(t,s,e){const a=t.map((t=>t[1])),i=t.map((t=>t[2])),_=[].concat(a,i),h=this._net.calc(_).toArray(),n=h.slice(0,a.length),o=h.slice(a.length),r=(this._target||this._net).calc(i).toArray();for(let s=0;s<n.length;s++){const e=this._action_pos(t[s][0]);n[s][e]=t[s][3]+this._gamma*r[s][argmax(o[s])]}this._net.fit(a,n,1,s,e),this._epoch%this._fix_param_update_step&&(this._target=this._net.copy())}}export default class DQNAgent{constructor(t,s,e,a){this._env=t,this._net=new DQN(t,s,e,a)}set method(t){this._net.method=t}terminate(){}get_score(){return this._net.get_score()}get_action(t,s=.002){return Math.random()>s?this._net.get_best_action(t):this._env.sample_action(this)}update(t,s,e,a,i,_,h){this._net.update(t,s,e,a,i,_,h)}}