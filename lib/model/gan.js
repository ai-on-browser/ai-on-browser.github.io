import Matrix from"../util/matrix.js";import NeuralNetwork from"./neuralnetwork.js";export default class GAN{constructor(t,e,n,r,i,o,s){this._type=s,this._noise_dim=t,this._epoch=0;const a=[{type:"input",name:"dic_in"}];this._generatorNetLeyers=[{type:"input",name:"gen_in"}],"conditional"===s&&(a.push({type:"input",name:"cond",input:[]},{type:"onehot",name:"cond_oh",input:["cond"],class_size:o},{type:"concat",input:["dic_in","cond_oh"]}),this._generatorNetLeyers.push({type:"input",name:"cond",input:[]},{type:"onehot",name:"cond_oh",input:["cond"],class_size:o},{type:"concat",input:["gen_in","cond_oh"]})),a.push(...n,{type:"full",out_size:2},{type:"softmax"}),this._generatorNetLeyers.push(...e),this._discriminator=NeuralNetwork.fromObject(a,"mse",i),this._g_opt=r}get epoch(){return this._epoch}fit(t,e,n,r,i,o){this._generator||(this._generatorNetLeyers.push({type:"full",out_size:t[0].length},{type:"leaky_relu",a:.1,name:"generate"}),this._generatorNetLeyers.push({type:"include",net:this._discriminator,input_to:"dic_in",train:!1}),this._generator=NeuralNetwork.fromObject(this._generatorNetLeyers,"mse",this._g_opt));const s=e,a=[].concat(s,s);e=Array(t.length).fill([1,0]);for(let n=0;n<t.length;n++)e.push([0,1]);const c=Array(t.length).fill([1,0]);let h=null,_=null;for(let p=0;p<n;p++){const n=this.generate(t.length,s);_=this._discriminator.fit({dic_in:[].concat(t,n),cond:a},e,1,i,o);const p=Matrix.randn(t.length,this._noise_dim).toArray();h=this._generator.fit({gen_in:p,cond:s},c,1,r,o),this._epoch++}return{discriminatorLoss:_[0],generatorLoss:h[0]}}prob(t,e){return this._discriminator.calc({dic_in:t,cond:e}).toArray()}generate(t,e){const n=Matrix.randn(t,this._noise_dim).toArray();return this._generator.calc({gen_in:n,cond:e},null,["generate"]).generate.toArray()}}