var g=Object.defineProperty;var d=(c,r)=>g(c,"name",{value:r,configurable:!0});class f{static{d(this,"ExtraTrees")}constructor(r,e=1){this._samplingRate=e,this._trees=[];for(let t=0;t<r;t++){const s={data:null,target:null,children:[]};this._trees.push(s)}this._depth=1}get depth(){return this._depth}_sample(r){const e=Array.from({length:r},(t,s)=>s);for(let t=r-1;t>0;t--){const s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}return e.slice(0,Math.ceil(r*this._samplingRate))}init(r,e){for(let t=0;t<this._trees.length;t++){const s=this._sample(r.length),n=[],i=[];for(let l=0;l<s.length;l++)n.push(r[s[l]]),i.push(e[s[l]]);this._trees[t].data=n,this._trees[t].target=i}}fit(){let r=this._trees;for(;;){const e=[];for(let t=0;t<r.length;t++)r[t].children.length===0?e.push(r[t]):e.push(...r[t].children);if(r.length===e.length)break;r=e}r.forEach(e=>{const t=e.data;if(t.length<=1)return;const s=Math.floor(Math.random()*t[0].length),n=t.map(a=>a[s]);n.sort((a,h)=>a-h);const i=Math.floor(Math.random()*(n.length-1)),l=(n[i]+n[i+1])/2;e.feature=s,e.threshold=l,e.children=[{data:t.filter(a=>a[s]<l),target:e.target.filter((a,h)=>t[h][s]<l),children:[]},{data:t.filter(a=>a[s]>=l),target:e.target.filter((a,h)=>t[h][s]>=l),children:[]}]}),this._depth++}_predict_leafs(r){return r.map(e=>this._trees.map(t=>{for(;;){if(t.children.length===0)return t;e[t.feature]<t.threshold?t=t.children[0]:t=t.children[1]}}))}}export class ExtraTreesClassifier extends f{static{d(this,"ExtraTreesClassifier")}constructor(r,e=1){super(r,e)}predict(r){return this._predict_leafs(r).map(t=>{const s={};let n=null;for(let i=0;i<t.length;i++){const l=t[i],a={};let h=null;for(let o=0;o<l.target.length;o++)a[l.target[o]]||(a[l.target[o]]=0),a[l.target[o]]++,(h===null||a[h]<a[l.target[o]])&&(h=l.target[o]);s[h]||(s[h]=0),s[h]++,(n===null||s[n]<s[h])&&(n=h)}return n})}}export class ExtraTreesRegressor extends f{static{d(this,"ExtraTreesRegressor")}constructor(r,e=1){super(r,e)}predict(r){return this._predict_leafs(r).map(t=>{let s=0;for(let n=0;n<t.length;n++){const i=t[n];s+=i.target.reduce((l,a)=>l+a,0)/i.target.length}return s/t.length})}}
