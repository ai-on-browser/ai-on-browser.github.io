class ExtraTrees{constructor(t,e=1){this._samplingRate=e,this._trees=[];for(let e=0;e<t;e++){const t={data:null,target:null,children:[]};this._trees.push(t)}this._depth=1}get depth(){return this._depth}_sample(t){const e=[];for(let r=0;r<t;r++)e[r]=r;for(let r=t-1;r>0;r--){const t=Math.floor(Math.random()*(r+1));[e[r],e[t]]=[e[t],e[r]]}return e.slice(0,Math.ceil(t*this._samplingRate))}init(t,e){for(let r=0;r<this._trees.length;r++){const l=this._sample(t.length),s=[],n=[];for(let r=0;r<l.length;r++)s.push(t[l[r]]),n.push(e[l[r]]);this._trees[r].data=s,this._trees[r].target=n}}fit(){let t=this._trees;for(;;){const e=[];for(let r=0;r<t.length;r++)0===t[r].children.length?e.push(t[r]):e.push(...t[r].children);if(t.length===e.length)break;t=e}t.forEach((t=>{const e=t.data;if(e.length<=1)return;const r=Math.floor(Math.random()*e[0].length),l=e.map((t=>t[r]));l.sort(((t,e)=>t-e));const s=Math.floor(Math.random()*(l.length-1)),n=(l[s]+l[s+1])/2;t.feature=r,t.threshold=n,t.children=[{data:e.filter((t=>t[r]<n)),target:t.target.filter(((t,l)=>e[l][r]<n)),children:[]},{data:e.filter((t=>t[r]>=n)),target:t.target.filter(((t,l)=>e[l][r]>=n)),children:[]}]})),this._depth++}_predict_leafs(t){return t.map((t=>this._trees.map((e=>{for(;;){if(0===e.children.length)return e;e=t[e.feature]<e.threshold?e.children[0]:e.children[1]}}))))}}export class ExtraTreesClassifier extends ExtraTrees{constructor(t,e=1){super(t,e)}predict(t){return this._predict_leafs(t).map((t=>{const e={};let r=null;for(let l=0;l<t.length;l++){const s=t[l],n={};let a=null;for(let t=0;t<s.target.length;t++)n[s.target[t]]||(n[s.target[t]]=0),n[s.target[t]]++,(null===a||n[a]<n[s.target[t]])&&(a=s.target[t]);e[a]||(e[a]=0),e[a]++,(null===r||e[r]<e[a])&&(r=a)}return r}))}}export class ExtraTreesRegressor extends ExtraTrees{constructor(t,e=1){super(t,e)}predict(t){return this._predict_leafs(t).map((t=>{let e=0;for(let r=0;r<t.length;r++){const l=t[r];e+=l.target.reduce(((t,e)=>t+e),0)/l.target.length}return e/t.length}))}}