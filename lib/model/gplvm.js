var f=Object.defineProperty;var u=(d,t)=>f(d,"name",{value:t,configurable:!0});import o from"../util/matrix.js";class p{static{u(this,"GaussianKernel")}constructor(t=1,i=1,s=.1){this._a=t,this._b=i,this._e=s}_calc(t,i){const s=o.sub(t,i).reduce((r,h)=>r+h*h,0);return this._a*Math.exp(-s/(2*this._b))}_grad(t,i,s){const r=o.sub(t,i);return r.mult(-this._a*s/this._b),r}calc(t,i){i||(i=t);const s=t.rows,r=i.rows,h=new o(s,r);for(let a=0;a<s;a++){const e=t.row(a);for(let n=0;n<r;n++){const _=this._calc(e,i.row(n));h.set(a,n,_)}}return h}grad(t,i){const s=t.rows,r=new o(s,s);for(let h=0;h<s;h++){const a=t.row(h);for(let e=0;e<s;e++){const n=this._grad(a,t.row(e),i.at(h,e));r.set(h,e,n.value)}}return r}update(t,i,s){if(this._e===0)return;const r=t.rows,h=new o(r,r);for(let e=0;e<r;e++){const n=t.row(e);for(let _=0;_<r;_++){const c=o.sub(n,t.row(_));c.map(w=>w**2);const l=-(this._a*c.sum())/(2*this._b**2);h.set(e,_,l*i.at(e,_))}}const a=o.mult(s,h.t).sum();this._b=Math.exp(Math.log(this._b)+this._e/r*a),this._b===0&&(this._b=1e-8)}}export default class g{static{u(this,"GPLVM")}constructor(t,i,s=1,r=.005,h=.2,a="gaussian",e=[]){this._rd=t,this._alpha=i,a==="gaussian"&&(this._kernel=new p(...e,h)),this._ez=s,this._ea=r}init(t){this._x=o.fromArray(t),this._z=o.randn(t.length,this._rd,0,.01),this._s=this._x.dot(this._x.t)}fit(){const t=this._x.rows,i=this._kernel.calc(this._z),s=o.add(i,o.eye(t,t,this._alpha)),r=s.inv(),h=r.dot(this._s).dot(r);h.sub(o.mult(r,this._x.cols)),h.div(2);const a=this._kernel.grad(this._z,s),e=new o(t,this._rd);for(let n=0;n<t;n++){const _=o.zeros(1,this._rd);for(let c=0;c<t;c++){const l=new o(1,this._rd,a.at(n,c));l.mult(h.at(n,c)),_.add(l)}e.set(n,0,_)}e.mult(this._ez/t),this._kernel.update(this._z,i,h),this._z.add(e),this._alpha=Math.exp(Math.log(this._alpha)+this._ea/t*h.trace()*this._alpha)}llh(){const t=this._x.rows,i=this._kernel.calc(this._z),s=o.add(i,o.eye(t,t,this._alpha));return-this._x.length*Math.log(2*Math.PI)/2-this._x.cols*Math.log(s.det())/2-this._x.cols*s.solve(this._s).trace()/2}predict(){return this._z.toArray()}reconstruct(t){t=o.fromArray(t);const i=this._z.rows,s=this._kernel.calc(this._z),r=o.add(s,o.eye(i,i,this._alpha));return this._kernel.calc(t,this._z).dot(r.solve(this._x)).toArray()}}
