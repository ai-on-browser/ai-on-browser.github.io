export default class AdaptiveThresholding{constructor(t="mean",e=3,s=2){this._method=t,this._k=e,this._c=s}_kernel(){const t=[];for(let e=0;e<this._k;t[e++]=Array(this._k).fill(1/this._k**2));if("gaussian"===this._method){const e=1.3,s=Math.floor(this._k/2);let h=0;for(let i=0;i<this._k;i++)for(let l=0;l<this._k;l++){const n=i-s,r=l-s,o=Math.exp(-(n**2+r**2)/(2*e**2));t[i][l]=o,h+=o}for(let e=0;e<this._k;e++)for(let s=0;s<this._k;s++)t[e][s]/=h}return t}predict(t){switch(this._method){case"mean":case"gaussian":return this._predict_kernel(t);case"median":case"midgray":return this._predict_statistics(t)}}_predict_kernel(t){const e=[],s=this._kernel();for(let h=0;h<t.length;h++){e[h]=[];for(let i=0;i<t[h].length;i++){const l=t[h][i].length,n=Array(l).fill(0);let r=0;for(let e=0;e<s.length;e++){const o=h+e-(s.length-1)/2;if(!(o<0||t.length<=o))for(let c=0;c<s[e].length;c++){const _=i+c-(s[e].length-1)/2;if(!(_<0||t[h].length<=_)){for(let h=0;h<l;h++)n[h]+=s[e][c]*t[o][_][h];r+=s[e][c]}}}e[h][i]=n.map(((e,s)=>t[h][i][s]<e/r-this._c?0:255))}}return e}_predict_statistics(t){const e=[];for(let s=0;s<t.length;s++){e[s]=[];for(let h=0;h<t[s].length;h++){const i=t[s][h].length,l=[];for(let t=0;t<i;l[t++]=[]);for(let e=0;e<this._k;e++){const n=s+e-(this._k-1)/2;if(!(n<0||t.length<=n))for(let e=0;e<this._k;e++){const r=h+e-(this._k-1)/2;if(!(r<0||t[s].length<=r))for(let e=0;e<i;e++)l[e].push(t[n][r][e])}}e[s][h]=[];for(let n=0;n<i;n++)if(l[n].sort(((t,e)=>t-e)),"median"===this._method){const i=l[n].length%2==0?l[n][l[n].length/2-1]:l[n][(l[n].length-1)/2];e[s][h][n]=t[s][h][n]<i-this._c?0:255}else if("midgray"===this._method){const i=(l[n][0]+l[n][l[n].length-1])/2;e[s][h][n]=t[s][h][n]<i-this._c?0:255}}}return e}}