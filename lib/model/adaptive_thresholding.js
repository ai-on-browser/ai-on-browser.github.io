export default class AdaptiveThresholding{constructor(t="mean",e=3,s=2){this._method=t,this._k=e,this._c=s}_kernel(){const t=[];for(let e=0;e<this._k;t[e++]=Array(this._k).fill(1/this._k**2));if("gaussian"===this._method){const e=1.3,s=Math.floor(this._k/2);let h=0;for(let i=0;i<this._k;i++)for(let n=0;n<this._k;n++){const l=i-s,r=n-s,o=Math.exp(-(l**2+r**2)/(2*e**2));t[i][n]=o,h+=o}for(let e=0;e<this._k;e++)for(let s=0;s<this._k;s++)t[e][s]/=h}return t}predict(t){switch(this._method){case"mean":case"gaussian":return this._predict_kernel(t);case"median":case"midgray":return this._predict_statistics(t)}}_predict_kernel(t){const e=[],s=this._kernel();for(let h=0;h<t.length;h++){e[h]=[];for(let i=0;i<t[h].length;i++){let n=0,l=0;for(let e=0;e<s.length;e++){const r=h+e-(s.length-1)/2;if(!(r<0||t.length<=r))for(let o=0;o<s[e].length;o++){const _=i+o-(s[e].length-1)/2;_<0||t[h].length<=_||(n+=s[e][o]*t[r][_],l+=s[e][o])}}e[h][i]=t[h][i]<n/l-this._c?0:255}}return e}_predict_statistics(t){const e=[];for(let s=0;s<t.length;s++){e[s]=[];for(let h=0;h<t[s].length;h++){const i=[];for(let e=0;e<this._k;e++){const n=s+e-(this._k-1)/2;if(!(n<0||t.length<=n))for(let e=0;e<this._k;e++){const l=h+e-(this._k-1)/2;l<0||t[s].length<=l||i.push(t[n][l])}}if(i.sort(((t,e)=>t-e)),"median"===this._method){const n=i.length%2==0?i[i.length/2-1]:i[(i.length-1)/2];e[s][h]=t[s][h]<n-this._c?0:255}else if("midgray"===this._method){const n=(i[0]+i[i.length-1])/2;e[s][h]=t[s][h]<n-this._c?0:255}}}return e}}