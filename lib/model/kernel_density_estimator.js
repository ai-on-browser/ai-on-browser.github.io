var p=Object.defineProperty;var i=(t,a)=>p(t,"name",{value:a,configurable:!0});const _={gaussian:i(t=>Math.exp(-t*t/2)/Math.sqrt(2*Math.PI),"gaussian"),rectangular:i(t=>Math.abs(t)<=1?.5:0,"rectangular"),triangular:i(t=>Math.abs(t)<=1?1-Math.abs(t):0,"triangular"),epanechnikov:i(t=>Math.abs(t)<=1?3*(1-t**2)/4:0,"epanechnikov"),biweight:i(t=>Math.abs(t)<=1?.9375*(1-t**2)**2:0,"biweight"),triweight:i(t=>Math.abs(t)<=1?1.09375*(1-t**2)**3:0,"triweight")};export default class b{static{i(this,"KernelDensityEstimator")}constructor(a=0,s="gaussian"){this._h=a,typeof s=="function"?this._kernel=s:(typeof s=="string"&&(s={name:s}),this._kernel=_[s.name])}fit(a){if(this._x=a,this._h>0)return;const s=a.length,e=a.map(h=>Math.sqrt(h.reduce((n,o)=>n+o**2,0))),c=e.reduce((h,n)=>h+n,0)/s,r=Math.sqrt(e.reduce((h,n)=>h+(n-c)**2,0)/s);e.sort((h,n)=>h-n);const u=i(h=>{const n=(s-1)*h,o=Math.floor(n),l=Math.ceil(n);return e[o]+(n-o)*(e[l]-e[o])},"q"),M=Math.min(r,(u(.75)-u(.25))/1.34);this._h=1.06*M/Math.pow(s,.2)}probability(a){const s=this._x.length;return a.map(e=>{let c=0;for(let r=0;r<s;r++)c+=this._kernel(Math.sqrt(e.reduce((u,M,h)=>u+(M-this._x[r][h])**2,0))/this._h);return c/(s*this._h)})}predict(a){return this.probability(a)}}
