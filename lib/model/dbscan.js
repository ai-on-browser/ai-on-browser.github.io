var m=Object.defineProperty;var o=(c,e)=>m(c,"name",{value:e,configurable:!0});const p={euclid:o((c,e)=>Math.sqrt(c.reduce((r,s,h)=>r+(s-e[h])**2,0)),"euclid"),manhattan:o((c,e)=>c.reduce((r,s,h)=>r+Math.abs(s-e[h]),0),"manhattan"),chebyshev:o((c,e)=>Math.max(...c.map((r,s)=>Math.abs(r-e[s]))),"chebyshev")};export default class d{static{o(this,"DBSCAN")}constructor(e=.5,r=5,s="euclid"){this._eps=e,this._minPts=r,this._metric=s,typeof this._metric=="function"?this._d=this._metric:this._d=p[this._metric]}predict(e){let r=0;const s=e.length,h=Array(s).fill(!1),l=Array(s),u=Array(s);for(let t=0;t<s;u[t++]=Array(s));for(let t=0;t<s;t++)for(let i=0;i<t;i++){const n=this._d(e[t],e[i]);u[t][i]=u[i][t]=n}const a=o(t=>{const i=[];for(let n=0;n<s;n++)u[t][n]<this._eps&&i.push(n);return i},"getNeighbors");for(let t=0;t<s;t++){if(h[t])continue;h[t]=!0;const i=a(t);if(i.length<this._minPts){l[t]=-1;continue}const n=r++;for(l[t]=n;i.length>0;){const f=i.pop();if(!h[f]){h[f]=!0;const _=a(f);_.length>=this._minPts&&i.push(..._)}l[f]||(l[f]=n)}}return l}}
