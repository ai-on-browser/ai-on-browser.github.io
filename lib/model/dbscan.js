var d=Object.defineProperty;var f=(u,o)=>d(u,"name",{value:o,configurable:!0});export default class m{static{f(this,"DBSCAN")}constructor(o=.5,a=5,i="euclid"){if(this._eps=o,this._minPts=a,this._metric=i,typeof this._metric=="function")this._d=this._metric;else switch(this._metric){case"euclid":this._d=(r,s)=>Math.sqrt(r.reduce((c,h,t)=>c+(h-s[t])**2,0));break;case"manhattan":this._d=(r,s)=>r.reduce((c,h,t)=>c+Math.abs(h-s[t]),0);break;case"chebyshev":this._d=(r,s)=>Math.max(...r.map((c,h)=>Math.abs(c-s[h])));break}}predict(o){let a=0;const i=o.length,r=Array(i).fill(!1),s=Array(i),c=Array(i);for(let t=0;t<i;c[t++]=Array(i));for(let t=0;t<i;t++)for(let e=0;e<t;e++){const n=this._d(o[t],o[e]);c[t][e]=c[e][t]=n}const h=f(t=>{const e=[];for(let n=0;n<i;n++)c[t][n]<this._eps&&e.push(n);return e},"getNeighbors");for(let t=0;t<i;t++){if(r[t])continue;r[t]=!0;const e=h(t);if(e.length<this._minPts){s[t]=-1;continue}const n=a++;for(s[t]=n;e.length>0;){const l=e.pop();if(!r[l]){r[l]=!0;const _=h(l);_.length>=this._minPts&&e.push(..._)}s[l]||(s[l]=n)}}return s}}
