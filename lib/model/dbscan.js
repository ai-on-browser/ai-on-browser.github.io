export default class DBSCAN{constructor(t=.5,s=5,e="euclid"){switch(this._eps=t,this._minPts=s,this._metric=e,this._metric){case"euclid":this._d=(t,s)=>Math.sqrt(t.reduce(((t,e,r)=>t+(e-s[r])**2),0));break;case"manhattan":this._d=(t,s)=>t.reduce(((t,e,r)=>t+Math.abs(e-s[r])),0);break;case"chebyshev":this._d=(t,s)=>Math.max(...t.map(((t,e)=>Math.abs(t-s[e]))))}}predict(t){let s=0;const e=t.length,r=Array(e).fill(!1),i=Array(e),c=Array(e);for(let t=0;t<e;c[t++]=Array(e));for(let s=0;s<e;s++)for(let e=0;e<s;e++){const r=this._d(t[s],t[e]);c[s][e]=c[e][s]=r}const h=t=>{const s=[];for(let r=0;r<e;r++)c[t][r]<this._eps&&s.push(r);return s};for(let t=0;t<e;t++){if(r[t])continue;r[t]=!0;const e=h(t);if(e.length<this._minPts){i[t]=-1;continue}const c=s++;for(i[t]=c;e.length>0;){const t=e.pop();if(!r[t]){r[t]=!0;const s=h(t);s.length>=this._minPts&&e.push(...s)}i[t]||(i[t]=c)}}return i}}