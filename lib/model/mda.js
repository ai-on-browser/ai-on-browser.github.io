var a=Object.defineProperty;var d=(l,i)=>a(l,"name",{value:i,configurable:!0});import _ from"../util/matrix.js";export default class p{static{d(this,"MixtureDiscriminant")}constructor(i){this._r=i}init(i,o){this._x=i,this._y=o,this._d=this._x[0].length,this._c=[...new Set(o)],this._p=_.random(this._x.length,this._r),this._p.div(this._p.sum(1)),this._a=[];for(let n=0;n<this._c.length;n++){const t=this._x.filter((s,r)=>this._y[r]===this._c[n]);this._a[n]=t.length/this._x.length}this._mstep()}_mstep(){this._pi=_.zeros(this._c.length,this._r),this._m=[];for(let t=0;t<this._c.length;t++)this._m[t]=_.zeros(this._r,this._d);const i=_.zeros(this._c.length,1),o=[];for(let t=0;t<this._c.length;t++)o[t]=_.zeros(1,this._r);for(let t=0;t<this._x.length;t++){const s=this._c.indexOf(this._y[t]);for(let r=0;r<this._r;r++){const h=this._p.at(t,r);this._pi.addAt(s,r,h);for(let e=0;e<this._d;e++)this._m[s].addAt(r,e,this._x[t][e]*h)}i.addAt(s,0,1),o[s].add(this._p.row(t))}this._pi.div(i);for(let t=0;t<this._c.length;t++)this._m[t].div(o[t].t);this._s=_.zeros(this._d,this._d);const n=this._y.map((t,s)=>[t,s]);for(let t=0;t<this._c.length;t++){let s=this._x.filter((h,e)=>this._y[e]===this._c[t]);s=_.fromArray(s);const r=this._p.row(n.filter(h=>h[0]===this._c[t]).map(h=>h[1]));for(let h=0;h<this._r;h++){const e=_.sub(s,this._m[t].row(h)),c=e.tDot(_.mult(e,r.col(h)));this._s.add(c)}}this._s.div(this._x.length),this._sinv=this._s.inv()}fit(){this._p=_.zeros(this._x.length,this._r);for(let i=0;i<this._x.length;i++){const o=this._c.indexOf(this._y[i]),n=new _(1,this._d,this._x[i]);for(let t=0;t<this._r;t++){const s=_.sub(n,this._m[o].row(t)),r=s.dot(this._sinv).dot(s.t).toScaler();this._p.addAt(i,t,this._pi.at(o,t)*Math.exp(-r/2))}}this._p.div(this._p.sum(1)),this._mstep()}predict(i){const o=_.fromArray(i),n=_.zeros(o.rows,this._c.length);for(let t=0;t<this._c.length;t++)for(let s=0;s<this._r;s++){const r=_.sub(o,this._m[t].row(s)),h=r.dot(this._sinv);h.mult(r);const e=h.sum(1);e.map(c=>this._pi.at(t,s)*Math.exp(-c/2));for(let c=0;c<o.rows;c++)n.addAt(c,t,this._a[t]*e.at(c,0))}return n.argmax(1).value.map(t=>this._c[t])}}
