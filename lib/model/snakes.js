export default class Snakes{constructor(t,h,e,l=100){this._alpha=t,this._beta=h,this._gamma=e,this._k=l,this._v=[]}_convolute(t,h){const e=[];for(let l=0;l<t.length;l++){e[l]=[];for(let s=0;s<t[l].length;s++){const n=Array(t[l][s].length).fill(0);for(let e=0;e<h.length;e++){let i=l+e-Math.floor(h.length/2);i=Math.max(0,Math.min(t.length-1,i));for(let l=0;l<h[e].length;l++){let g=s+l-Math.floor(h[e].length/2);g=Math.max(0,Math.min(t[i].length-1,g));for(let s=0;s<t[i][g].length;s++)n[s]+=t[i][g][s]*h[e][l]}}e[l][s]=n}}return e}init(t){const h=this._convolute(t,[[1,0,-1],[2,0,-2],[1,0,-1]]),e=this._convolute(t,[[1,2,1],[0,0,0],[-1,-2,-1]]);this._g=[];for(let t=0;t<h.length;t++){this._g[t]=[];for(let l=0;l<h[t].length;l++){this._g[t][l]=0;for(let s=0;s<h[t][l].length;s++)this._g[t][l]+=Math.sqrt(h[t][l][s]**2+e[t][l][s]**2);this._g[t][l]/=h[t][l].length}}this._v=[];const l=[];for(let t=0;t<4;t++)l.push(Math.round(t*this._k/4));l.push(this._k);for(let t=0;t<l[1]-l[0];t++)this._v.push([0,Math.round(t*(this._g[0].length-1)/(l[1]-l[0]))]);for(let t=0;t<l[2]-l[1];t++)this._v.push([Math.round(t*(this._g.length-1)/(l[2]-l[1])),this._g[0].length-1]);for(let t=0;t<l[3]-l[2];t++)this._v.push([this._g.length-1,this._g[0].length-1-Math.round(t*(this._g[0].length-1)/(l[3]-l[2]))]);for(let t=0;t<l[4]-l[3];t++)this._v.push([this._g.length-1-Math.round(t*(this._g.length-1)/(l[2]-l[1])),0])}_energy(t){let h=0,e=0,l=0;for(let s=0;s<t.length;s++){const n=0===s?t.length-1:s-1,i=s===t.length-1?0:s+1;h+=t[s].reduce(((h,e,l)=>h+(e-t[n][l])**2),0),e+=t[s].reduce(((h,e,l)=>h+(t[i][l]+t[n][l]-2*e)**2),0),l-=this._g[t[s][0]][t[s][1]]}return this._alpha*h+this._beta*e+this._gamma*l}fit(){const t=[[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1]];for(let h=0;h<this._v.length;h++){let e=this._energy(this._v),l=null;for(let s=0;s<t.length;s++){const n=this._v[h].map(((h,e)=>h+t[s][e]));if(n[0]<0||n[1]<0||n[0]>=this._g.length||n[1]>=this._g[0].length)continue;const i=this._v.concat();i[h]=n;const g=this._energy(i);g<e&&(e=g,l=n)}l&&(this._v[h]=l)}}predict(){const t=[];for(let h=0;h<this._g.length;h++)t[h]=Array(this._g[h].length).fill(!1);for(let h=0;h<this._v.length;h++){const e=this._v[h][0],l=this._v[h][1],s=this._v[h===this._v.length-1?0:h+1][0],n=this._v[h===this._v.length-1?0:h+1][1],i=Math.abs(s-e),g=Math.abs(n-l);if(t[e][l]=!0,i>g){let h=2*g-i,o=l;const _=s>e?1:-1;for(let r=e+_;_>0?r<s:r>s;r+=_)h>0?(o+=n>l?1:-1,t[r][o]=!0,h+=2*g-2*i):(t[r][o]=!0,h+=2*g)}else{let h=2*i-g,o=e;const _=n>l?1:-1;for(let r=l+_;_>0?r<n:r>n;r+=_)h>0?(o+=s>e?1:-1,t[o][r]=!0,h+=2*i-2*g):(t[o][r]=!0,h+=2*i)}}return t}}