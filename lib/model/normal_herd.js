import{Matrix}from"../util/math.js";export default class NormalHERD{constructor(t="exact",s=.1){this._m=null,this._s=null,this._c=s,this._method=t}init(t,s){this._x=Matrix.fromArray(t),this._shift=this._x.mean(0),this._x.sub(this._shift),this._y=s,this._d=this._x.cols,this._m=Matrix.zeros(this._d,1),this._s=Matrix.eye(this._d,this._d)}update(t,s){const i=this._m.tDot(t).toScaler();if(i*s>1)return;const h=t.tDot(this._s).dot(t).toScaler(),_=Math.max(0,1-i*s)/(h+1/this._c),o=this._s.dot(t);if(o.mult(s*_),this._m.add(o),"full"===this._method){const s=this._s.dot(t).dot(t.tDot(this._s));s.mult((this._c**2*h+2*this._c)/(1+this._c*h)**2),this._s.sub(s)}else if("exact"===this._method)for(let s=0;s<this._s.rows;s++){const i=this._s.at(s,s),h=t.at(s,0);this._s.set(s,s,i/(1+this._c*h**2*i)**2)}else if("project"===this._method){const s=2*this._c+this._c**2*h;for(let i=0;i<this._s.rows;i++){const h=this._s.at(i,i),_=t.at(i,0);this._s.set(i,i,1/(1/h+s*_**2))}}else if("drop"===this._method){const s=2*this._c+this._c**2*h;for(let i=0;i<this._s.rows;i++){const _=this._s.at(i,i),o=t.at(i,0);this._s.set(i,i,_-(_*o)**2*s/(1+this._c*h)**2)}}}fit(){for(let t=0;t<this._x.rows;t++)this.update(this._x.row(t).t,this._y[t])}predict(t){const s=Matrix.fromArray(t);s.sub(this._shift);return s.dot(this._m).value.map((t=>t<=0?-1:1))}}