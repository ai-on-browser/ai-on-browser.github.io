class DecisionTree{constructor(){this._depth=0}get depth(){return this._depth}init(e,t){this._datas=e.map(((e,r)=>({value:e,target:t[r]}))),this._tree={datas:this._datas,value:this._calcValue(this._datas),score:this._calcScore(this._datas),children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((e,t)=>e.concat(t.leafs)),[])}},this._features=e[0].length,this._depth=1}fit(){this._tree.leafs.forEach((e=>{let t=e.score,r=-1,s=-1;for(let a=0;a<this._features;a++){const c=e.datas.map((e=>e.value[a]));c.sort(((e,t)=>e-t));for(let h=0;h<c.length-1;h++){let l=(c[h]+c[h+1])/2,i=e.datas.filter((e=>e.value[a]<l)),n=e.datas.filter((e=>e.value[a]>=l));const o=(this._calcScore(i)*i.length+this._calcScore(n)*n.length)/c.length;o<t&&(t=o,r=a,s=l)}}if(t<e.score){e.feature=r,e.threshold=s;const t=e.datas.filter((e=>e.value[r]<s)),a=e.datas.filter((e=>e.value[r]>=s));e.children.push({datas:t,score:this._calcScore(t),value:this._calcValue(t),children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((e,t)=>e.concat(t.leafs)),[])}}),e.children.push({datas:a,score:this._calcScore(a),value:this._calcValue(a),children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((e,t)=>e.concat(t.leafs)),[])}})}})),this._depth++}importance(){const e=Array(this._features).fill(0);let t=0;const r=[this._tree];for(;r.length>0;){const s=r.pop();if(0===s.children.length)continue;const a=s.datas,c=s.children[0].datas,h=s.children[1].datas,l=(this._calcScore(a)*a.length-this._calcScore(c)*c.length-this._calcScore(h)*h.length)/this._datas.length;e[s.feature]+=l,t+=l,r.push(...s.children)}return 0===t?e:e.map((e=>e/t))}predict_value(e){return e.map((e=>{let t=this._tree;for(;t.children.length>0;)t=e[t.feature]<t.threshold?t.children[0]:t.children[1];return t.value}))}}export class DecisionTreeClassifier extends DecisionTree{constructor(e){super(),this._method=e}_calcValue(e){return this._classesRate(e)}_calcScore(e){return"ID3"===this._method?this._id3(e):this._gini(e)}_classesRate(e){const t=new Map;return e.forEach((e=>{t.set(e.target,(t.get(e.target)||0)+1)})),t.forEach(((r,s)=>{t.set(s,r/=e.length)})),t}_id3(e){const t=this._classesRate(e);let r=0;return t.forEach((e=>r-=e*Math.log(e))),r}_gini(e){const t=this._classesRate(e);let r=1;return t.forEach((e=>r-=e**2)),r}predict_prob(e){return this.predict_value(e)}predict(e){return this.predict_prob(e).map((e=>{let t=0,r=-1;return e.forEach(((e,s)=>{e>t&&(t=e,r=s)})),r}))}}export class DecisionTreeRegression extends DecisionTree{_calcValue(e){if(0===e.length)return 0;if(Array.isArray(e[0].target)){const t=e[0].target.length;return e.reduce(((e,t)=>e.map(((e,r)=>e+t.target[r]))),Array(t).fill(0)).map((t=>t/e.length))}return e.reduce(((e,t)=>e+t.target),0)/e.length}_calcScore(e){if(0===e.length)return 0;const t=this._calcValue(e);return Array.isArray(e[0].target)?Math.sqrt(e.reduce(((e,r)=>e+r.target.reduce(((e,r,s)=>e+(r-t[s])**2),0)),0)/e.length):Math.sqrt(e.reduce(((e,r)=>e+(r.target-t)**2),0)/e.length)}predict(e){return this.predict_value(e)}}