import{Matrix}from"../util/math.js";export default class PLS{constructor(t){this._l=t}init(t,r){this._x=Matrix.fromArray(t),this._y=Matrix.fromArray(r)}fit(){if(1!==this._y.cols)throw"";[this._b,this._b0]=this._pls1()}_pls1(){let t=this._x.copy(),r=t.tDot(this._y);r.div(r.norm());const o=[],i=[],s=[];for(let a=0;a<this._l;a++){const a=t.dot(r),h=a.tDot(a).value[0];a.div(h);const l=t.tDot(a),e=this._y.tDot(a).value[0];if(i.push(l.value),s.push(e),o.push(r.value),0===e)break;const u=a.dot(l.t);u.mult(h),t.sub(u),r=t.tDot(this._y)}const a=Matrix.fromArray(o).t,h=Matrix.fromArray(i).t,l=new Matrix(s.length,1,s),e=a.dot(h.tDot(a).solve(l));return[e,s[0]-h.col(0).tDot(e).value[0]]}predict(t){return(t=Matrix.fromArray(t)).dot(this._b).copyAdd(this._b0).toArray()}}