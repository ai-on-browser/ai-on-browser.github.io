import Matrix from"../util/matrix.js";const nelderMead=(t,s,r=1,i=1,o=2,a=.5,e=.5,l=null)=>{const h=t.length,c=[t.copy()];for(let s=0;s<h;s++){const i=Matrix.zeros(t.rows,t.cols);i.value[s]=r,i.add(t),c.push(i)}l||(l=5*h);const n=c.map((t=>[s(t),t]));for(let t=0;t<l&&(n.sort(((t,s)=>t[0]-s[0])),0!==n[0][0]);t++){const t=n[0][1].copy();for(let s=1;s<h;s++)t.add(n[s][1]);t.div(h);const r=t.copy();r.sub(n[h][1]),r.mult(i),r.add(t);const l=s(r);if(n[0][0]<=l&&l<n[h-1][0])n[h]=[l,r];else if(l<n[0][0]){const i=r.copy();i.sub(t),i.mult(o),i.add(t);const a=s(i);n[h]=a<l?[a,i]:[l,r]}else{const r=n[h][1].copy();r.sub(t),r.mult(a),r.add(t);const i=s(r);if(i<n[h][0])n[h]=[i,r];else for(let t=1;t<=h;t++){const r=n[t][1];r.sub(n[0][1]),r.mult(e),r.add(n[0][1]),n[t]=[s(r),r]}}}return n.sort(((t,s)=>t[0]-s[0])),n[0][1]};export class Probit{constructor(){this._w=null}init(t,s){const r=Matrix.fromArray(t);this._x=Matrix.resize(r,r.rows,r.cols+1,1),this._y=s,this._d=this._x.cols,this._w=Matrix.randn(this._d,1)}_cdf(t){const s=t<0?-1:1,r=Math.abs(t)/Math.sqrt(2),i=1/(1+.3275911*r);return.5*(1+s*(1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-r*r)))}_llh(t){const s=Matrix.fromArray(this._x).dot(t);s.map((t=>this._cdf(t)));let r=0;for(let t=0;t<s.rows;t++)1===this._y[t]?r+=Math.log(s.value[t]):r+=Math.log(1-s.value[t]);return r}fit(){this._w=nelderMead(this._w,(t=>-this._llh(t)))}predict(t){const s=Matrix.fromArray(t),r=Matrix.resize(s,s.rows,s.cols+1,1).dot(this._w);return r.map((t=>this._cdf(t)-.5)),r.value.map((t=>t<=0?-1:1))}}export class MultinomialProbit extends Probit{constructor(){super(),this._w=null,this._classes=null}_llh(t){const s=Matrix.fromArray(this._x).dot(t);s.map((t=>this._cdf(t))),s.div(s.sum(1));let r=0;for(let t=0;t<s.rows;t++)for(let i=0;i<this._y.cols;i++)r+=this._y.at(t,i)*Math.log(s.at(t,i));return r}fit(t,s){this._classes||(this._classes=[...new Set(s)]),t=Matrix.fromArray(t),this._x=Matrix.resize(t,t.rows,t.cols+1,1),this._y=new Matrix(t.rows,this._classes.length),s.forEach(((t,s)=>this._y.set(s,this._classes.indexOf(t),1))),this._w||(this._w=Matrix.randn(this._x.cols,this._classes.length)),this._w=nelderMead(this._w,(t=>-this._llh(t)))}predict(t){const s=Matrix.fromArray(t),r=Matrix.resize(s,s.rows,s.cols+1,1).dot(this._w);return r.map((t=>this._cdf(t))),r.argmax(1).value.map((t=>this._classes[t]))}}