var g=Object.defineProperty;var x=(h,s)=>g(h,"name",{value:s,configurable:!0});import n from"../util/matrix.js";const b=x((h,s,o=1,e=1,t=2,_=.5,M=.5,m=null)=>{const l=h.length,u=[h.copy()];for(let a=0;a<l;a++){const c=n.zeros(h.rows,h.cols);c.value[a]=o,c.add(h),u.push(c)}m||(m=l*5);const r=u.map(a=>[s(a),a]);for(let a=0;a<m&&(r.sort((i,f)=>i[0]-f[0]),r[0][0]!==0);a++){const c=r[0][1].copy();for(let i=1;i<l;i++)c.add(r[i][1]);c.div(l);const d=c.copy();d.sub(r[l][1]),d.mult(e),d.add(c);const w=s(d);if(r[0][0]<=w&&w<r[l-1][0])r[l]=[w,d];else if(w<r[0][0]){const i=d.copy();i.sub(c),i.mult(t),i.add(c);const f=s(i);f<w?r[l]=[f,i]:r[l]=[w,d]}else{const i=r[l][1].copy();i.sub(c),i.mult(_),i.add(c);const f=s(i);if(f<r[l][0])r[l]=[f,i];else for(let y=1;y<=l;y++){const p=r[y][1];p.sub(r[0][1]),p.mult(M),p.add(r[0][1]),r[y]=[s(p),p]}}}return r.sort((a,c)=>a[0]-c[0]),r[0][1]},"nelderMead");export class Probit{static{x(this,"Probit")}constructor(){this._w=null}init(s,o){const e=n.fromArray(s);this._x=n.resize(e,e.rows,e.cols+1,1),this._y=o,this._d=this._x.cols,this._w=n.randn(this._d,1)}_cdf(s){const o=.3275911,e=.254829592,t=-.284496736,_=1.421413741,M=-1.453152027,m=1.061405429,l=s<0?-1:1,u=Math.abs(s)/Math.sqrt(2),r=1/(1+o*u),a=1-((((m*r+M)*r+_)*r+t)*r+e)*r*Math.exp(-u*u);return .5*(1+l*a)}_llh(s){const o=n.fromArray(this._x).dot(s);o.map(t=>this._cdf(t));let e=0;for(let t=0;t<o.rows;t++)this._y[t]===1?e+=Math.log(o.value[t]):e+=Math.log(1-o.value[t]);return e}fit(){this._w=b(this._w,s=>-this._llh(s))}predict(s){const o=n.fromArray(s),e=n.resize(o,o.rows,o.cols+1,1).dot(this._w);return e.map(t=>this._cdf(t)-.5),e.value.map(t=>t<=0?-1:1)}}export class MultinomialProbit extends Probit{static{x(this,"MultinomialProbit")}constructor(){super(),this._w=null,this._classes=null}_llh(s){const o=n.fromArray(this._x).dot(s);o.map(t=>this._cdf(t)),o.div(o.sum(1));let e=0;for(let t=0;t<o.rows;t++)for(let _=0;_<this._y.cols;_++)e+=this._y.at(t,_)*Math.log(o.at(t,_));return e}fit(s,o){this._classes||(this._classes=[...new Set(o)]),s=n.fromArray(s),this._x=n.resize(s,s.rows,s.cols+1,1),this._y=new n(s.rows,this._classes.length),o.forEach((e,t)=>this._y.set(t,this._classes.indexOf(e),1)),this._w||(this._w=n.randn(this._x.cols,this._classes.length)),this._w=b(this._w,e=>-this._llh(e))}predict(s){const o=n.fromArray(s),e=n.resize(o,o.rows,o.cols+1,1).dot(this._w);return e.map(t=>this._cdf(t)),e.argmax(1).value.map(t=>this._classes[t])}}
