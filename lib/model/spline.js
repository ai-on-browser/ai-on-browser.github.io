import{Matrix}from"../util/math.js";import{SplineInterpolation}from"./spline_interpolation.js";export class SmoothingSpline{constructor(t){this._l=t}fit(t,i){const o=t.map(((t,o)=>[t,i[o],o]));o.sort(((t,i)=>t[0]-i[0])),t=o.map((t=>t[0])),i=Matrix.fromArray(o.map((t=>t[1])));const s=t.length,e=Matrix.zeros(s-2,s-2),r=Matrix.zeros(s-2,s);for(let i=0;i<s-2;i++){const o=t[i+1]-t[i],s=t[i+2]-t[i+1];r.set(i,i,1/o),r.set(i,i+1,-1/o-1/s),r.set(i,i+2,1/s),i>0&&(e.set(i-1,i,o/6),e.set(i,i-1,o/6)),e.set(i,i,(o+s)/3)}const n=r.tDot(e.inv()).dot(r);n.mult(this._l);for(let t=0;t<s;t++)n.addAt(t,t,1);const l=n.solve(i).value;this._spline=new SplineInterpolation,this._spline.fit(t,l)}predict(t){return this._spline.predict(t)}}