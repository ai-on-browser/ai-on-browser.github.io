import Matrix from"../util/matrix.js";export default class KSVD{constructor(t,r,s=r){this._y=Matrix.fromArray(t),this._m=r,this._k=s,this._d=Matrix.randn(this._y.cols,r),this._d.div(Matrix.map(Matrix.map(this._d,(t=>t**2)).mean(0),Math.sqrt))}fit(){const t=new Matrix(this._y.rows,this._m);for(let r=0;r<this._y.rows;r++){const s=this._omp(this._y.row(r).t);t.set(r,0,s.t)}for(let r=0;r<this._m;r++){const s=t.col(r).value.map((t=>0!==t)),o=this._y.row(s);o.sub(t.row(s).dot(this._d.t));const[i,e,h]=o.svd();this._d.set(0,r,h.row(0).t);for(let o=0,h=0;o<s.length;o++)s[o]&&(t.set(o,r,i.at(h,0)*e[0]),h++)}this._r=t;return Matrix.sub(this._y,this._r.dot(this._d.t)).norm()**2}_omp(t){let r=Matrix.zeros(this._m,1),s=t;const o=[];for(let i=0;i<this._k;i++){let i=1/0,e=-1;for(let t=0;t<this._m;t++){if(o.indexOf(t)>=0)continue;const r=this._d.col(t),h=s.norm()**2-r.tDot(s).toScaler()**2/(r.norm()**2+1e-12);h<i&&(i=h,e=t)}o.push(e);const h=this._d.col(o),_=h.tDot(h).solve(h.tDot(t));for(let t=0;t<o.length;t++)r.set(o[t],0,_.row(t));if(s=Matrix.sub(t,h.dot(_)),s.norm()<1e-8)break}return r}predict(){return this._r.toArray()}}