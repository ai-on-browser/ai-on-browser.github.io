export default class DIANA{constructor(){}get size(){return this._tree.leafs.length}init(e){this._x=e,this._tree={idx:e.map(((e,t)=>t)),children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((e,t)=>e.concat(t.leafs)),[])}}}_distance(e,t){return Math.sqrt(e.reduce(((e,i,n)=>e+(i-t[n])**2),0))}_v(e,t,i){let n=0;for(let h=0;h<t.length;h++)t[h]!==e&&i.indexOf(t[h])<0&&(n+=this._distance(this._x[e],this._x[t[h]]));if(n/=t.length-i.length-1,i.length>0){let t=0;for(let n=0;n<i.length;n++)t+=this._distance(this._x[e],this._x[i[n]]);n-=t/i.length}return n}fit(){for(const e of this._tree.leafs){if(1===e.idx.length)continue;const t=[];for(;t.length<e.idx.length;){let i=-1/0,n=-1;for(let h=0;h<e.idx.length;h++){if(t.indexOf(e.idx[h])>=0)continue;const l=this._v(e.idx[h],e.idx,t);i<l&&(i=l,n=e.idx[h])}if(i<=0)break;t.push(n)}if(0<t.length&&t.length<e.idx.length){const i=e.idx.filter((e=>t.indexOf(e)<0));e.children.push({idx:t,children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((e,t)=>e.concat(t.leafs)),[])}},{idx:i,children:[],get leafs(){return 0===this.children.length?[this]:this.children.reduce(((e,t)=>e.concat(t.leafs)),[])}})}}}predict(){const e=[],t=this._tree.leafs;for(let i=0;i<t.length;i++)for(const n of t[i].idx)e[n]=i;return e}}