var c=Object.defineProperty;var r=(s,e)=>c(s,"name",{value:e,configurable:!0});export default class d{static{r(this,"DIANA")}constructor(){}get size(){return this._tree.leafs.length}init(e){this._x=e,this._tree={idx:e.map((i,t)=>t),children:[],get leafs(){return this.children.length===0?[this]:this.children.reduce((i,t)=>i.concat(t.leafs),[])}}}_distance(e,i){return Math.sqrt(e.reduce((t,l,n)=>t+(l-i[n])**2,0))}_v(e,i,t){let l=0;for(let n=0;n<i.length;n++)i[n]!==e&&!t.includes(i[n])&&(l+=this._distance(this._x[e],this._x[i[n]]));if(l=l/(i.length-t.length-1),t.length>0){let n=0;for(let h=0;h<t.length;h++)n+=this._distance(this._x[e],this._x[t[h]]);l-=n/t.length}return l}fit(){for(const e of this._tree.leafs){if(e.idx.length===1)continue;const i=[];for(;i.length<e.idx.length;){let t=-1/0,l=-1;for(let n=0;n<e.idx.length;n++){if(i.includes(e.idx[n]))continue;const h=this._v(e.idx[n],e.idx,i);t<h&&(t=h,l=e.idx[n])}if(t<=0)break;i.push(l)}if(0<i.length&&i.length<e.idx.length){const t=e.idx.filter(l=>!i.includes(l));e.children.push({idx:i,children:[],get leafs(){return this.children.length===0?[this]:this.children.reduce((l,n)=>l.concat(n.leafs),[])}},{idx:t,children:[],get leafs(){return this.children.length===0?[this]:this.children.reduce((l,n)=>l.concat(n.leafs),[])}})}}}predict(){const e=[],i=this._tree.leafs;for(let t=0;t<i.length;t++)for(const l of i[t].idx)e[l]=t;return e}}
