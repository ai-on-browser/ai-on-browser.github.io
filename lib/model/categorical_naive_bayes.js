var _=Object.defineProperty;var o=(a,e)=>_(a,"name",{value:e,configurable:!0});export default class c{static{o(this,"CategoricalNaiveBayes")}constructor(e=1){this._alpha=e}fit(e,n){if(!this._cand){this._d=e[0].length,this._cand=[];for(let l=0;l<this._d;l++)this._cand[l]=[...new Set(e.map(t=>t[l]))]}this._labels=[...new Set(n)],this._prob=[];for(let l=0;l<this._labels.length;l++){const t=[];for(let i=0;i<this._d;i++){t[i]=Array(this._cand[i].length).fill(0);for(let h=0;h<e.length;h++){if(n[h]!==this._labels[l])continue;const r=this._cand[i].indexOf(e[h][i]);t[i][r]++}const s=t[i].reduce((h,r)=>h+r,0);t[i]=t[i].map(h=>(h+this._alpha)/(s+this._alpha*t[i].length))}this._prob[l]=t}}probability(e){return e.map(n=>{const l=Array(this._labels.length).fill(1);for(let t=0;t<this._d;t++){const i=this._cand[t].indexOf(n[t]);for(let s=0;s<this._labels.length;s++)l[s]*=this._prob[s][t][i]}return l})}predict(e){return this.probability(e).map(l=>{let t=0,i=-1;for(let s=0;s<this._labels.length;s++)l[s]>t&&(t=l[s],i=s);return i<0?null:this._labels[i]})}}
