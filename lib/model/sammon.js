import{Matrix}from"../util/math.js";export default class Sammon{constructor(t,s){this._x=t;const i=this._x.length;this._y=Matrix.randn(i,s),this._alpha=.3,this._d=Matrix.zeros(i,i);for(let s=0;s<i;s++)for(let r=s+1;r<i;r++){let i=0;for(let o=0;o<t[s].length;o++)i+=(t[s][o]-t[r][o])**2;i=Math.sqrt(i),this._d.set(s,r,i),this._d.set(r,s,i)}}fit(){const t=this._d.sum(),s=this._y.rows,i=this._y.cols;for(let r=0;r<s;r++){let o=Matrix.zeros(1,i),h=Matrix.zeros(1,i);for(let a=0;a<s;a++){if(r===a)continue;let s=0;for(let t=0;t<i;t++)s+=(this._y.at(r,t)-this._y.at(a,t))**2;if(s=Math.sqrt(s),0===s)continue;const e=(this._d.at(r,a)-s)/(this._d.at(r,a)*s),_=this._y.row(r).copySub(this._y.row(a));o.sub(_.copyMult(2/t*e)),h.sub(_.copyMap((i=>2/t*e*(1-i**2/s*(1/(this._d.at(r,a)-s)+1/s)))))}for(let t=0;t<i;t++)this._y.subAt(r,t,this._alpha*o.at(0,t)/Math.abs(h.at(0,t)))}return this._y.toArray()}}