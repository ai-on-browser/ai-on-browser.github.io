import Matrix from"../util/matrix.js";export default class Sammon{constructor(t,s){this._x=t;const r=this._x.length;this._y=Matrix.randn(r,s),this._alpha=.3,this._d=Matrix.zeros(r,r);for(let s=0;s<r;s++)for(let i=s+1;i<r;i++){let r=0;for(let a=0;a<t[s].length;a++)r+=(t[s][a]-t[i][a])**2;r=Math.sqrt(r),this._d.set(s,i,r),this._d.set(i,s,r)}}fit(){const t=this._d.sum(),s=this._y.rows,r=this._y.cols;for(let i=0;i<s;i++){let a=Matrix.zeros(1,r),h=Matrix.zeros(1,r);for(let o=0;o<s;o++){if(i===o)continue;let s=0;for(let t=0;t<r;t++)s+=(this._y.at(i,t)-this._y.at(o,t))**2;if(s=Math.sqrt(s),0===s)continue;const e=(this._d.at(i,o)-s)/(this._d.at(i,o)*s),_=Matrix.sub(this._y.row(i),this._y.row(o));a.sub(Matrix.mult(_,2/t*e)),h.sub(Matrix.map(_,(r=>2/t*e*(1-r**2/s*(1/(this._d.at(i,o)-s)+1/s)))))}for(let t=0;t<r;t++)this._y.subAt(i,t,this._alpha*a.at(0,t)/Math.abs(h.at(0,t)))}return this._y.toArray()}predict(){return this._y.toArray()}}