const shuffle=function(t){for(let e=t.length-1;e>0;e--){let r=Math.floor(Math.random()*(e+1));[t[e],t[r]]=[t[r],t[e]]}return t};class IsolationTree{constructor(){this._tree={}}get c(){const t=this._n;return 2*Math.log(t-1)+.5772156649-2*(t-1)/t}_separate(t){const e=t.length;if(e<=1)return;const r=[],h=[];for(let s=0;s<t[0].length;s++){let n=1/0,o=-1/0;for(let r=0;r<e;r++)n=Math.min(n,t[r][s]),o=Math.max(o,t[r][s]);n<o&&(h.push([n,o]),r.push(s))}if(0===r.length)return;const s=Math.floor(Math.random()*r.length);return[r[s],Math.random()*(h[s][1]-h[s][0])+h[s][0]]}fit(t){this._n=t.length;const e=[[this._tree,t]];for(;e.length>0;){const[t,r]=e.pop(),h=this._separate(r);if(!h)continue;[t.feature,t.threshold]=h;const s=[],n=[];for(let e=0;e<r.length;e++)r[e][t.feature]<=t.threshold?s.push(r[e]):n.push(r[e]);e.push([t.left={},s]),e.push([t.right={},n])}}depth(t){return t.map((t=>{let e=this._tree,r=0;for(;e.left;)e=t[e.feature]<=e.threshold?e.left:e.right,r++;return r}))}}export default class IsolationForest{constructor(t=100,e=.8){this._tree_num=t,this._rate=e,this._trees=[]}fit(t){this._trees=[];const e=Math.ceil(t.length*this._rate),r=[];for(let e=0;e<t.length;r.push(e++));for(let h=0;h<this._tree_num;h++){shuffle(r);const h=[];for(let s=0;s<e;s++)h.push(t[r[s]]);const s=new IsolationTree;s.fit(h),this._trees.push(s)}}predict(t){const e=t.length,r=this._trees.map((e=>e.depth(t))),h=this._trees.reduce(((t,e)=>t+e.c),0)/this._trees.length,s=[];for(let t=0;t<e;t++){let e=0;for(let h=0;h<r.length;h++)e+=r[h][t];e/=r.length,s.push(2**(-e/h))}return s}}