import{QTableBase}from"./q_learning.js";class DPTable extends QTableBase{constructor(t,s=20,e=.9){super(t,s);let i=this._state_sizes.reduce(((t,s)=>t*s),1);this._v=Array(i).fill(0),this._gamma=e}_step_index(t,s){for(let e=0;e<s.length;e++){if(s[e]++,s[e]<t[e])return!0;s[e]=0}return!1}update(t="value"){"value"===t?this.valueIteration():this.policyIteration()}policyIteration(){const t=[].concat(this._v),s=[].concat(this._table),e=Array(this.states.length).fill(0),i=Array(this.actions.length);do{let a=[];i.fill(0);do{const{state:_,reward:h}=this._env.test(this._state_value(e),this._action_value(i)),n=this._state_index(_),[l]=this._to_position(this._state_sizes,n),o=h+this._gamma*t[l],[,r]=this._q(e,i);this._table[r]=o,a.push([o,s[r]])}while(this._step_index(this._action_sizes,i));const[_]=this._to_position(this._state_sizes,e);let h=-1/0,n=-1;for(let t=0;t<a.length;t++)a[t][1]>h&&(h=a[t][1],n=t);this._v[_]=a.reduce(((t,s,e)=>t+s[0]*(e===n?.95:.05/(a.length-1))),0)}while(this._step_index(this._state_sizes,e))}valueIteration(){const t=[].concat(this._v),s=Array(this.states.length).fill(0),e=Array(this.actions.length);do{let i=-1/0;e.fill(0);const a=this._state_value(s);do{const{state:_,reward:h}=this._env.test(a,this._action_value(e)),n=this._state_index(_),[l]=this._to_position(this._state_sizes,n),o=h+this._gamma*t[l],[,r]=this._q(s,e);this._table[r]=o,i=Math.max(o,i)}while(this._step_index(this._action_sizes,e));const[_]=this._to_position(this._state_sizes,s);this._v[_]=i}while(this._step_index(this._state_sizes,s))}}export default class DPAgent{constructor(t,s=20){this._table=new DPTable(t,s)}get_score(){return this._table.toArray()}get_action(t){return this._table.best_action(t)}update(t){this._table.update(t)}}