import{QTableBase}from"./q_learning.js";const argmax=function(t,s){return 0===t.length?-1:(t=s?t.map(s):t).indexOf(Math.max(...t))};class DPTable extends QTableBase{constructor(t,s=20,e=.9){super(t,s);let i=this._state_sizes.reduce(((t,s)=>t*s),1);this._v=Array(i).fill(0),this._gamma=e}_step_index(t,s){for(let e=0;e<s.length;e++){if(s[e]++,s[e]<t[e])return!0;s[e]=0}return!1}update(t="value"){"value"===t?this.valueIteration():this.policyIteration()}policyIteration(){const t=[].concat(this._v),s=[].concat(this._table),e=Array(this.states.length).fill(0),i=Array(this.actions.length);do{let h=[];i.fill(0);do{let[a,_,n]=this._env.test(this._state_value(e),this._action_value(i));a=this._state_index(a);const[l,o]=this._to_position(this._state_sizes,a),r=_+this._gamma*t[l],[c,u]=this._q(e,i);this._table[u]=r,h.push([r,s[u]])}while(this._step_index(this._action_sizes,i));const[n,l]=this._to_position(this._state_sizes,e),o=(_=t=>t[1],0===(a=h).length?-1:(a=_?a.map(_):a).indexOf(Math.max(...a)));this._v[n]=h.reduce(((t,s,e)=>t+s[0]*(e===o?.95:.05/(h.length-1))),0)}while(this._step_index(this._state_sizes,e));var a,_}valueIteration(){const t=[].concat(this._v),s=Array(this.states.length).fill(0),e=Array(this.actions.length);do{let i=-1/0;e.fill(0);const a=this._state_value(s);do{let[_,h,n]=this._env.test(a,this._action_value(e));_=this._state_index(_);const[l,o]=this._to_position(this._state_sizes,_),r=h+this._gamma*t[l],[c,u]=this._q(s,e);this._table[u]=r,i=Math.max(r,i)}while(this._step_index(this._action_sizes,e));const[_,h]=this._to_position(this._state_sizes,s);this._v[_]=i}while(this._step_index(this._state_sizes,s))}}export default class DPAgent{constructor(t,s=20){this._table=new DPTable(t,s)}get_score(t){return this._table.toArray()}get_action(t,s){return this._table.best_action(s)}update(t){this._table.update(t)}}