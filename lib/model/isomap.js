import{Matrix}from"../util/math.js";import MDS from"./mds.js";const warshallFloyd=t=>{const r=t.rows;for(let l=0;l<r;l++)for(let o=0;o<r;o++)for(let e=0;e<r;e++){const r=t.at(o,e),a=t.at(o,l)+t.at(l,e);r>a&&t.set(o,e,a)}};export default class Isomap{constructor(t=0){this._n=t}predict(t,r=1){const l=(t=Matrix.fromArray(t)).rows,o=t.cols,e=new Matrix(l,l);for(let r=0;r<l;r++){e._value[r*l+r]=0;for(let a=r+1;a<l;a++){let s=0;for(let l=0;l<o;l++)s+=(t.at(r,l)-t.at(a,l))**2;e._value[r*l+a]=e._value[a*l+r]=Math.sqrt(s)}}if(this._n>0){for(let t=0;t<l;t++){const r=[];for(let o=0;o<l;o++)t!==o&&r.push([e._value[t*l+o],o]);r.sort(((t,r)=>t[0]-r[0]));for(let o=this._n;o<l-1;o++)e._value[t*l+r[o][1]]=1/0}for(let t=0;t<l;t++)for(let r=t+1;r<l;r++)e._value[t*l+r]=e._value[r*l+t]=Math.min(e._value[t*l+r],e._value[r*l+t])}return warshallFloyd(e),(new MDS).predict(e,r,!0)}}