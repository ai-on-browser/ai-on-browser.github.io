var d=Object.defineProperty;var c=(_,e)=>d(_,"name",{value:e,configurable:!0});import y from"../util/matrix.js";import l from"../util/tensor.js";import m from"./neuralnetwork.js";export default class f{static{c(this,"DiffusionModel")}constructor(e,n){this._timesteps=e,this._ulayers=n,this._peDims=32,this._model=null,this._epoch=0;const a=1e-4,s=.02,i=(s-a)/(this._timesteps-1);this._beta=[a];for(let t=1;t<this._timesteps-1;t++)this._beta[t]=a+i*t;this._beta.push(s),this._alpha=[1-this._beta[0]],this._alphaCumprod=[this._alpha[0]];for(let t=1;t<this._beta.length;t++)this._alpha[t]=1-this._beta[t],this._alphaCumprod[t]=this._alphaCumprod[t-1]*this._alpha[t]}get epoch(){return this._epoch}_addNoise(e,n){const a=this._alphaCumprod[n],s=Math.sqrt(a),i=Math.sqrt(1-a),t=l.randn(e.sizes),o=e.copy();return o.broadcastOperate(t,(p,h)=>s*p+i*h),[o,t]}_build(){if(this._dataShape.length===1)this._layers=[{type:"input",name:"x"},{type:"input",name:"position_encoding"},{type:"full",out_size:this._peDims,l2_decay:.001,activation:"gelu",name:"pe"},{type:"concat",input:["x","pe"],axis:1}],this._ulayers?this._layers.push(...this._ulayers):this._layers.push({type:"full",out_size:32,l2_decay:.001,name:"c1",activation:"tanh"},{type:"full",out_size:16,l2_decay:.001,activation:"tanh"},{type:"full",out_size:32,l2_decay:.001,name:"u1",activation:"tanh"},{type:"concat",input:["u1","c1"],axis:1},{type:"full",out_size:32,l2_decay:.001,activation:"tanh"}),this._layers.push({type:"full",out_size:this._dataShape[0],l2_decay:.001},{type:"output"});else{const e=this._dataShape.length;this._layers=[{type:"input",name:"x"},{type:"input",name:"position_encoding"},{type:"full",out_size:this._peDims,l2_decay:.001,activation:"gelu"},{type:"reshape",size:[...Array(e-1).fill(1),this._peDims]},{type:"up_sampling",size:this._dataShape.slice(0,e-1),name:"pe"},{type:"concat",input:["x","pe"],axis:e}],this._ulayers?this._layers.push(...this._ulayers):this._layers.push({type:"conv",kernel:3,channel:16,padding:1,l2_decay:.001,name:"c1",activation:"relu"},{type:"max_pool",kernel:2},{type:"conv",kernel:3,channel:32,padding:1,l2_decay:.001,activation:"relu"},{type:"up_sampling",size:2,name:"u1"},{type:"concat",input:["u1","c1"],axis:e},{type:"conv",kernel:3,channel:16,padding:1,l2_decay:.001,activation:"relu"}),this._layers.push({type:"conv",kernel:1,channel:this._dataShape[e-1],l2_decay:.001},{type:"output"})}return m.fromObject(this._layers,"mse","adam")}_positionEncoding(e,n){const s=Array.from({length:n},(i,t)=>e/1e4**(2*Math.floor(t/2))/n).map((i,t)=>t%2===0?Math.sin(i):Math.cos(i));return new y(1,n,s)}fit(e,n,a,s){const i=l.fromArray(e);this._dataShape=i.sizes.slice(1),this._model||(this._model=this._build());let t=null;for(let o=0;o<n;o++){const p=Math.floor(Math.random()*this._timesteps),h=this._positionEncoding(p,this._peDims);h.repeat(i.sizes[0],0);const[r,u]=this._addNoise(i,p);t=this._model.fit({x:r,position_encoding:h},l.fromArray(u),1,a,s)}return this._epoch+=n,t}generate(e){const n=this._dataShape.concat(),a=l.randn([e,...n]);for(let s=this._timesteps-1;s>=0;s--){const i=this._positionEncoding(s,this._peDims);i.repeat(e,0);const t=this._model.calc({x:a,position_encoding:i});if(a.broadcastOperate(t,(o,p)=>1/Math.sqrt(this._alpha[s])*(o-p*this._beta[s]/Math.sqrt(1-this._alphaCumprod[s]))),s>0){const o=(1-this._alphaCumprod[s-1])/(1-this._alphaCumprod[s])*this._beta[s],p=l.randn(a.sizes,0,o);a.broadcastOperate(p,(h,r)=>h+r)}}return a.toArray()}}
