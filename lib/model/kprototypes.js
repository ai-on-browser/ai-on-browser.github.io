export default class KPrototypes{constructor(t,e){this._modes=[],this._iscat=e,this._gamma=t,this._categories=null}get size(){return this._modes.length}add(t){if(!this._categories){this._categories=[];for(let e=0;e<t[0].length;e++)this._iscat[e]&&(this._categories[e]=[...new Set(t.map((t=>t[e])))])}const e=[];for(let s=0;s<t[0].length;s++)if(this._iscat[s]){const t=Array(this._categories[s].length);let i=0;for(let e=0;e<t.length;e++)t[e]=Math.random(),i+=t[e];e[s]=t.map((t=>t/i))}else e[s]=t[Math.floor(Math.random()*t.length)][s];this._modes.push(e)}clear(){this._modes=[]}predict(t){if(0!==this._modes.length)return t.map((t=>{let e=1/0,s=-1;for(let i=0;i<this._modes.length;i++){let h=0;for(let e=0;e<t.length;e++)if(this._iscat[e])for(let s=0;s<this._modes[i][e].length;s++)this._categories[e][s]===t[e]?h+=this._gamma*(this._modes[i][e][s]-1)**2:h+=this._gamma*this._modes[i][e][s]**2;else h+=(this._modes[i][e]-t[e])**2;h<e&&(e=h,s=i)}return s}))}fit(t){if(0===this._modes.length||0===t.length)return 0;const e=this.predict(t);let s=0;for(let i=0;i<this._modes.length;i++){const h=[];for(let o=0;o<this._modes[i].length;o++)if(this._iscat[o]){h[o]=Array(this._modes[i][o].length).fill(0);let l=0;for(let s=0;s<e.length;s++)e[s]===i&&(h[o][this._categories[o].indexOf(t[s][o])]++,l++);h[o]=h[o].map((t=>0===t?0:t/l)),s+=this._gamma*Math.sqrt(this._modes[i][o].reduce(((t,e,s)=>t+(e-h[o][s])**2),0))}else{let l=0,r=0;for(let s=0;s<e.length;s++)e[s]===i&&(l+=t[s][o],r++);h[o]=l/r,s+=Math.abs(this._modes[i][o]-h[o])}this._modes[i]=h}}}