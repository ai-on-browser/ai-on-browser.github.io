import{Matrix}from"../util/math.js";class NegationNaiveBayes{constructor(){this._k=0,this._labels=[],this._rate=[]}fit(t,s){this._labels=[...new Set(s)],this._init(),this._rate=[];for(let a=0;a<this._labels.length;a++){const e=Matrix.fromArray(t.filter(((t,e)=>s[e]!==this._labels[a])));this._estimate_prob(e,a),this._rate[a]=1-e.rows/t.length}}predict(t){const s=Matrix.fromArray(t),a=[];for(let t=0;t<this._labels.length;t++){const e=this._data_prob(s,t);e.map((s=>1/(1-this._rate[t])/s)),a.push(e)}return t.map(((t,s)=>{let e=0,i=-1;for(let t=0;t<this._labels.length;t++){let r=a[t].value[s];r>e&&(e=r,i=t)}return this._labels[i]}))}}export class GaussianNegationNaiveBayes extends NegationNaiveBayes{constructor(){super(),this._means=[],this._vars=[]}_init(){this._means=[],this._vars=[]}_estimate_prob(t,s){this._means[s]=t.mean(0),this._vars[s]=t.variance(0)}_data_prob(t,s){const a=this._means[s],e=this._vars[s],i=t.copySub(a);return i.mult(i),i.div(e),i.map((t=>Math.exp(-t/2))),i.div(e.copyMap((t=>Math.sqrt(2*Math.PI*t)))),i.prod(1)}}