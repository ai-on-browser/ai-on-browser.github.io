export default class TighterPerceptron{constructor(t=0,s=0,h="perceptron"){this._beta=t,this._p=s,this._C=1,this._update=h,this._loss=(t,s)=>t===s?0:1,this._w=null,this._c=0,this._a=[]}fit(t,s){this._w||("mira"===this._update?this._w=Array(t[0].length).fill(1):this._w=Array(t[0].length).fill(0));for(let h=0;h<t.length;h++){const i=t[h].reduce(((t,s,h)=>t+s*this._w[h]),this._c);if(s[h]*i>this._beta)continue;if(this._p>0&&this._a.length>=this._p){let t=1/0,s=-1;for(let h=0;h<this._a.length;h++){const i=this._a[h],e=this._w.map(((t,s)=>t-i.a*i.y*i.x[s])),_=this._c-i.a*i.y;let a=0;for(let t=0;t<this._a.length;t++){let s=_;for(let h=0;h<this._w.length;h++)s+=e[h]*this._a[t].x[h];a+=this._loss(this._a[t].y,s<=0?-1:1)}a<t&&(t=a,s=h)}const h=this._a[s];for(let t=0;t<this._w.length;t++)this._w[t]-=h.a*h.y*h.x[t];this._c-=h.a*h.y,this._a.splice(s,1)}let e=1;if("mira"===this._update){const _=t[h].reduce(((t,s)=>t+s**2),1);e=Math.min(1,Math.max(0,-s[h]*i/_))}else if("nobias"===this._update){const _=t[h].reduce(((t,s)=>t+s**2),1);e=Math.min(this._C,Math.max(0,(1-s[h]*i)/_))}this._a.push({a:e,x:t[h],y:s[h]});for(let i=0;i<this._w.length;i++)this._w[i]+=e*s[h]*t[h][i];this._c+=e*s[h]}}predict(t){const s=[];for(let h=0;h<t.length;h++){const i=t[h].reduce(((t,s,h)=>t+s*this._w[h]),this._c);s.push(i<=0?-1:1)}return s}}