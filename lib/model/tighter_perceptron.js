export default class TighterPerceptron{constructor(t=0,i=0,s="perceptron"){this._beta=t,this._p=i,this._C=1,this._update=s,this._loss=(t,i)=>t===i?0:1}init(t,i){this._x=t,this._y=i,"mira"===this._update?this._w=Array(this._x[0].length).fill(1):this._w=Array(this._x[0].length).fill(0),this._c=0,this._a=[]}fit(){for(let t=0;t<this._x.length;t++){const i=this._x[t].reduce(((t,i,s)=>t+i*this._w[s]),this._c);if(this._y[t]*i>this._beta)continue;if(this._p>0&&this._a.length>=this._p){let t=1/0,i=-1;for(let s=0;s<this._a.length;s++){const h=this._a[s],_=this._w.map(((t,i)=>t-h.a*this._y[h.i]*this._x[h.i][i])),e=this._c-h.a*this._y[h.i];let a=0;for(let t=0;t<this._a.length;t++){let i=e;for(let s=0;s<this._w.length;s++)i+=_[s]*this._x[this._a[t].i][s];a+=this._loss(this._y[this._a[t].i],i<=0?-1:1)}a<t&&(t=a,i=s)}const s=this._a[i];for(let t=0;t<this._w.length;t++)this._w[t]-=s.a*this._y[s.i]*this._x[s.i][t];this._c-=s.a*this._y[s.i],this._a.splice(i,1)}let s=1;if("mira"===this._update){const h=this._x[t].reduce(((t,i)=>t+i**2),1);s=Math.min(1,Math.max(0,-this._y[t]*i/h))}else if("nobias"===this._update){const h=this._x[t].reduce(((t,i)=>t+i**2),1);s=Math.min(this._C,Math.max(0,(1-this._y[t]*i)/h))}this._a.push({a:s,i:t});for(let i=0;i<this._w.length;i++)this._w[i]+=s*this._y[t]*this._x[t][i];this._c+=s*this._y[t]}}predict(t){const i=[];for(let s=0;s<t.length;s++){const h=t[s].reduce(((t,i,s)=>t+i*this._w[s]),this._c);i.push(h<=0?-1:1)}return i}}