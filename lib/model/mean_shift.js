export default class MeanShift{constructor(t){this._x=null,this._centroids=null,this._h=t,this._categories=0}get categories(){return this._categories}get h(){return this._h}_distance(t,e){return Math.sqrt(t.reduce(((t,i,s)=>t+(i-e[s])**2),0))}init(t){this._x=t,this._centroids=this._x.map((t=>[].concat(t)))}predict(t){this._categories=0;const e=[];for(let i=0;i<this._centroids.length;i++){let s=i;for(let r=0;r<i;r++)if(this._distance(this._centroids[i],this._centroids[r])<t){s=e[r];break}s===i&&this._categories++,e[i]=s}return e}fit(){if(0===this._centroids.length||0===this._x.length)return;let t=!1;return this._centroids=this._centroids.map(((e,i)=>{const s=e,r=this._x.map((t=>e.reduce(((e,i,s)=>e+((i-t[s])/this._h)**2),0)<=1?1:0));let h=0;const n=Array(this._x[0].length).fill(0);for(let t=0;t<this._x.length;t++)if(r[t]){h+=r[t];for(let e=0;e<n.length;e++)n[e]+=this._x[t][e]*r[t]}const c=n.map((t=>t/h));return t||=s.some(((t,e)=>t!==c[e])),c})),t}}