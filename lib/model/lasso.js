import{Matrix}from"../util/math.js";export default class Lasso{constructor(t=.1,s="CD"){this._w=null,this._lambda=t,this._method=s}_soft_thresholding(t,s){t.map((t=>t<-s?t+s:t>s?t-s:0))}_calc_b0(t,s){let o=this._w.copy();for(let t=0;t<o.cols;t++)o.set(o.rows-1,t,0);let a=t.dot(o);a.isub(s);let l=a.sum(0);l.div(t.rows),this._w.set(this._w.rows-1,0,l)}fit(t,s){t=Matrix.fromArray(t),s=Matrix.fromArray(s),this._w||(this._w=Matrix.randn(t.cols,s.cols)),"ISTA"===this._method?this._ista(t,s):"CD"===this._method?this._cd(t,s):"LARS"===this._method&&this._lars(t,s)}_ista(t,s){let o=t.tDot(t);o.map((t=>Math.abs(t))),o=o.sum(0);const a=Math.max.apply(null,o.value)/this._lambda;let l=t.dot(this._w);l.isub(s),l=t.tDot(l),l.div(this._lambda*a),this._w.add(l),this._soft_thresholding(this._w,1/a)}_cd(t,s){for(let o=0;o<this._w.rows;o++){let a=t.col(o),l=this._w.copy();for(let t=0;t<this._w.cols;t++)l.set(o,t,0);l=t.dot(l),l.isub(s);let i=a.tDot(l);this._soft_thresholding(i,this._lambda),i.div(a.tDot(a)),this._w.set(o,0,i)}}_lars(t,s){const o=[],a=[];for(let s=0;s<t.cols;a[s]=s++);const l=Matrix.zeros(t.rows,this._w.cols),i=Matrix.zeros(this._w.rows,this._w.cols);let r=!1,h=0;for(;a.length>0;){let e=null;const c=t.tDot(s.copySub(l));r||(e=a[c.row(a).copyMap(Math.abs).argmax(0).toScaler()],o.push(e),a.splice(a.indexOf(e),1));const _=c.copyMap(Math.abs).argmax(0).toScaler(),d=c.row(o).copyMap(Math.sign),n=t.col(o).copyMult(d),w=n.tDot(n).inv(),m=1/Math.sqrt(w.sum()),p=w.sum(1);p.mult(m);const u=n.dot(p),M=t.tDot(u),f=d.copyMult(p);let b=_/m;if(h<t.cols-1){const t=Matrix.zeros(a.length,2);for(let s=0;s<a.length;s++)t.set(s,0,(_-c.at(a[s],0))/(m-M.at(a[s],0))),t.set(s,1,(_+c.at(a[s],0))/(m+M.at(a[s],0)));b=t.copyMap((t=>t<=0?1/0:t)).min()}const y=i.row(o);y.div(f),y.mult(-1),y.map((t=>t<=0?1/0:t));const g=y.min();r=!1,g<b&&(b=g,e=o[y.argmin(0).toScaler()],r=!0);const x=i.row(o);x.add(f.copyMult(b));const D=0!==e?0:1,S=Matrix.zeros(this._w.rows,this._w.cols);for(let t=0;t<o.length;t++)S.set(o[t],0,x.at(t,0));const v=2*Math.abs(t.col(D).tDot(s.copySub(t.dot(S))).toScaler())/t.rows;if(v<this._lambda){const a=2*Math.abs(t.col(D).tDot(s.copySub(t.dot(this._w))).toScaler())/t.rows;if(o.length<2&&a<this._lambda)break;const r=b*(this._lambda-a)/(v-a);for(let t=0;t<o.length;t++)i[o[t]]+=f.at(t,0)*r;l.add(u.copyMult(r)),this._w=i.copy();break}l.add(u.copyMult(b));for(let t=0;t<o.length;t++)i.addAt(o[t],0,x.at(t,0));this._w=i.copy(),r&&(o.splice(o.indexOf(e),1),a.push(e)),h=o.length}}predict(t){return(t=Matrix.fromArray(t)).dot(this._w).toArray()}importance(){return this._w.value}}