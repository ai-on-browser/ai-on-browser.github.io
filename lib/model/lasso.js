import{Matrix}from"../util/math.js";export default class Lasso{constructor(t=.1,o="CD"){this._w=null,this._lambda=t,this._method=o}_soft_thresholding(t,o){t.map((t=>t<-o?t+o:t>o?t-o:0))}_calc_b0(t,o){let s=this._w.copy();for(let t=0;t<s.cols;t++)s.set(s.rows-1,t,0);let a=t.dot(s);a.isub(o);let l=a.sum(0);l.div(t.rows),this._w.set(this._w.rows-1,0,l)}fit(t,o){if(t=Matrix.fromArray(t),o=Matrix.fromArray(o),this._w||(this._w=Matrix.randn(t.cols,o.cols)),"ISTA"===this._method){let s=t.tDot(t);s.map((t=>Math.abs(t))),s=s.sum(0);const a=Math.max.apply(null,s.value)/this._lambda;let l=t.dot(this._w);l.isub(o),l=t.tDot(l),l.div(this._lambda*a),this._w.add(l),this._soft_thresholding(this._w,1/a)}else if("CD"===this._method)for(let s=0;s<this._w.rows;s++){let a=t.col(s),l=this._w.copy();for(let t=0;t<this._w.cols;t++)l.set(s,t,0);l=t.dot(l),l.isub(o);let i=a.tDot(l);this._soft_thresholding(i,this._lambda),i.div(a.tDot(a)),this._w.set(s,0,i)}else if("LARS"===this._method){const s=[],a=[];for(let o=0;o<t.cols;a[o]=o++);const l=Matrix.zeros(t.rows,this._w.cols),i=Matrix.zeros(this._w.rows,this._w.cols);let r=!1,e=0;for(;a.length>0;){let h=null;const c=t.tDot(o.copySub(l));r||(h=a[c.row(a).copyMap(Math.abs).argmax(0).toScaler()],s.push(h),a.splice(a.indexOf(h),1));const _=c.copyMap(Math.abs).argmax(0).toScaler(),n=c.row(s).copyMap(Math.sign),d=t.col(s).copyMult(n),w=d.tDot(d).inv(),m=1/Math.sqrt(w.sum()),p=w.sum(1);p.mult(m);const u=d.dot(p),f=t.tDot(u),M=n.copyMult(p);let b=_/m;if(e<t.cols-1){const t=Matrix.zeros(a.length,2);for(let o=0;o<a.length;o++)t.set(o,0,(_-c.at(a[o],0))/(m-f.at(a[o],0))),t.set(o,1,(_+c.at(a[o],0))/(m+f.at(a[o],0)));b=t.copyMap((t=>t<=0?1/0:t)).min()}const y=i.row(s);y.div(M),y.mult(-1),y.map((t=>t<=0?1/0:t));const g=y.min();r=!1,g<b&&(b=g,h=s[y.argmin(0).toScaler()],r=!0);const x=i.row(s);x.add(M.copyMult(b));const D=0!==h?0:1,S=Matrix.zeros(this._w.rows,this._w.cols);for(let t=0;t<s.length;t++)S.set(s[t],0,x.at(t,0));const v=2*Math.abs(t.col(D).tDot(o.copySub(t.dot(S))).toScaler())/t.rows;if(v<this._lambda){const a=2*Math.abs(t.col(D).tDot(o.copySub(t.dot(this._w))).toScaler())/t.rows;if(s.length<2&&a<this._lambda)break;const r=b*(this._lambda-a)/(v-a);for(let t=0;t<s.length;t++)i[s[t]]+=M.at(t,0)*r;l.add(u.copyMult(r)),this._w=i.copy();break}l.add(u.copyMult(b));for(let t=0;t<s.length;t++)i.addAt(s[t],0,x.at(t,0));this._w=i.copy(),r&&(s.splice(s.indexOf(h),1),a.push(h)),e=s.length}}}predict(t){return(t=Matrix.fromArray(t)).dot(this._w).toArray()}importance(){return this._w.value}}