import{Matrix}from"../util/math.js";export default class Lasso{constructor(t=.1,s="CD"){this._w=null,this._lambda=t,this._method=s}_soft_thresholding(t,s){t.map((t=>t<-s?t+s:t>s?t-s:0))}_calc_b0(t,s){let o=this._w.copy();for(let t=0;t<o.cols;t++)o.set(o.rows-1,t,0);let a=t.dot(o);a.isub(s);let l=a.sum(0);l.div(t.rows),this._w.set(this._w.rows-1,0,l)}fit(t,s){if(t=Matrix.fromArray(t),s=Matrix.fromArray(s),this._w||(this._w=Matrix.randn(t.cols,s.cols)),"ISTA"===this._method){let o=t.tDot(t);o.map((t=>Math.abs(t))),o=o.sum(0);const a=Math.max.apply(null,o.value)/this._lambda;let l=t.dot(this._w);l.isub(s),l=t.tDot(l),l.div(this._lambda*a),this._w.add(l),this._soft_thresholding(this._w,1/a)}else if("CD"===this._method)for(let o=0;o<this._w.rows;o++){let a=t.col(o),l=this._w.copy();for(let t=0;t<this._w.cols;t++)l.set(o,t,0);l=t.dot(l),l.isub(s);let i=a.tDot(l);this._soft_thresholding(i,this._lambda),i.div(a.tDot(a)),this._w.set(o,0,i)}else if("LARS"===this._method){const o=[],a=[];for(let s=0;s<t.cols;a[s]=s++);const l=Matrix.zeros(t.rows,this._w.cols),i=Matrix.zeros(this._w.rows,this._w.cols);let e=!1,r=0;for(;a.length>0;){let h=null;const c=t.tDot(s.copySub(l));e||(h=a[c.row(a).copyMap(Math.abs).argmax(0).value[0]],o.push(h),a.splice(a.indexOf(h),1));const _=c.copyMap(Math.abs).argmax(0).value[0],n=c.row(o).copyMap(Math.sign),d=t.col(o).copyMult(n),w=d.tDot(d).inv(),u=1/Math.sqrt(w.sum()),m=w.sum(1);m.mult(u);const p=d.dot(m),f=t.tDot(p),M=n.copyMult(m);let b=_/u;if(r<t.cols-1){const t=Matrix.zeros(a.length,2);for(let s=0;s<a.length;s++)t.set(s,0,(_-c.at(a[s],0))/(u-f.at(a[s],0))),t.set(s,1,(_+c.at(a[s],0))/(u+f.at(a[s],0)));b=t.copyMap((t=>t<=0?1/0:t)).min()}const y=i.row(o);y.div(M),y.mult(-1),y.map((t=>t<=0?1/0:t));const g=y.min();e=!1,g<b&&(b=g,h=o[y.argmin(0).value[0]],e=!0);const x=i.row(o);x.add(M.copyMult(b));const v=0!==h?0:1,D=Matrix.zeros(this._w.rows,this._w.cols);for(let t=0;t<o.length;t++)D.set(o[t],0,x.at(t,0));const A=2*Math.abs(t.col(v).tDot(s.copySub(t.dot(D))).value[0])/t.rows;if(A<this._lambda){const a=2*Math.abs(t.col(v).tDot(s.copySub(t.dot(this._w))).value[0])/t.rows;if(o.length<2&&a<this._lambda)break;const e=b*(this._lambda-a)/(A-a);for(let t=0;t<o.length;t++)i[o[t]]+=M.at(t,0)*e;l.add(p.copyMult(e)),this._w=i.copy();break}l.add(p.copyMult(b));for(let t=0;t<o.length;t++)i.addAt(o[t],0,x.at(t,0));this._w=i.copy(),e&&(o.splice(o.indexOf(h),1),a.push(h)),r=o.length}}}predict(t){return(t=Matrix.fromArray(t)).dot(this._w).toArray()}importance(){return this._w.value}}