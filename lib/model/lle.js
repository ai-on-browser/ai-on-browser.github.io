import{Matrix}from"../util/math.js";export default class LLE{constructor(t=1){this._k=t}predict(t,o=0){const r=(t=Matrix.fromArray(t)).cols,s=t.rows,e=[];for(let t=0;t<s;e[t++]=[]);for(let o=0;o<s;o++)for(let s=0;s<o;s++){let l=0;for(let e=0;e<r;e++)l+=(t.at(o,e)-t.at(s,e))**2;e[o][s]=e[s][o]=l}const l=[];for(let t=0;t<s;t++){const o=[];for(let r=0;r<s;r++){if(r===t)continue;const s=e[t][r];if(o.length<this._k||s<o[this._k-1].dt){o.length===this._k&&o.pop(),o.push({dt:s,idx:r});for(let t=o.length-1;t>0;t--)o[t].dt<o[t-1].dt&&([o[t],o[t-1]]=[o[t-1],o[t]])}}l.push(o)}const i=Matrix.eye(s,s);for(let o=0;o<s;o++){const r=l[o].map((t=>t.idx)),s=t.row(r);s.sub(t.row(o));const e=s.dot(s.t),c=Math.floor(Math.log10(e.trace()))-3;e.add(Matrix.eye(e.rows,e.cols,10**c));const n=e.inv().sum(0);n.div(n.sum());for(let t=0;t<this._k;t++)i.subAt(o,r[t],n.value[t])}const c=i.tDot(i).eigenVectors();return c.flip(1),c.slice(1,o+1,1).toArray()}}