import{QTableBase}from"./q_learning.js";class SoftmaxPolicyGradient{constructor(t,s=20){this._params=new QTableBase(t,s),this._epoch=0}get _state_sizes(){return this._params._state_sizes}get _action_sizes(){return this._params._action_sizes}_state_index(t){return this._params._state_index(t)}_action_index(t){return this._params._action_index(t)}probability(t){t=this._params._state_index(t);const[s]=this._params._q(t),a=s.map(Math.exp),e=a.reduce(((t,s)=>t+s),0);return a.map((t=>t/e))}toArray(){return this._params.toArray()}get_action(t){const s=this.probability(t),a=Math.random();let e=0,i=-1;for(let t=0;t<s.length;t++)if(e+=s[t],a<e){i=t;break}return this._params._action_value(this._params._to_index(this._action_sizes,i))}update(t,s){const a=t.length,e=[],i={};for(const s of t){let[t,a,_]=s;a=this._state_index(a),t=this._action_index(t);const r=this._params._to_position(this._state_sizes,a)[0];e[r]=(e[r]||0)+1;const[n,o]=this._params._q(a,t);if(!i[o]){const s=this.probability(a),e=this._params._to_position(this._action_sizes,t)[0];i[o]={n:0,s:r,p:s[e]}}i[o].n++}for(const t of Object.keys(i)){const _=i[t];this._params._table[t]+=s*(_.n+_.p*e[_.s])/a}this._epoch++}}export default class PGAgent{constructor(t,s=20){this._table=new SoftmaxPolicyGradient(t,s)}get_score(){return this._table.toArray()}get_action(t){return this._table.get_action(t)}update(t,s){this._table.update(t,s)}}