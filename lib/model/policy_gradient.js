import{QTableBase}from"./q_learning.js";class SoftmaxPolicyGradient{constructor(t,s=20){this._params=new QTableBase(t,s),this._epoch=0}get _state_sizes(){return this._params._state_sizes}get _action_sizes(){return this._params._action_sizes}_state_index(t){return this._params._state_index(t)}_action_index(t){return this._params._action_index(t)}probability(t){t=this._params._state_index(t);const[s]=this._params._q(t),i=s.map(Math.exp),a=i.reduce(((t,s)=>t+s),0);return i.map((t=>t/a))}toArray(){return this._params.toArray()}get_action(t){const s=this.probability(t),i=Math.random();let a=0,e=-1;for(let t=0;t<s.length;t++)if(a+=s[t],i<a){e=t;break}return this._params._action_value(this._params._to_index(this._action_sizes,e))}update(t,s){const i=t.length,a=[],e={};for(const s of t){let[t,i]=s;i=this._state_index(i),t=this._action_index(t);const _=this._params._to_position(this._state_sizes,i)[0];a[_]=(a[_]||0)+1;const[,r]=this._params._q(i,t);if(!e[r]){const s=this.probability(i),a=this._params._to_position(this._action_sizes,t)[0];e[r]={n:0,s:_,p:s[a]}}e[r].n++}for(const t of Object.keys(e)){const _=e[t];this._params._table[t]+=s*(_.n+_.p*a[_.s])/i}this._epoch++}}export default class PGAgent{constructor(t,s=20){this._table=new SoftmaxPolicyGradient(t,s),this._history=[]}reset(){this._history=[]}get_score(){return this._table.toArray()}get_action(t){return this._table.get_action(t)}update(t,s,i,a,e){this._history.push([t,s,i]),a&&(this._table.update(this._history,e),this._history=[])}}