import Matrix from"../util/matrix.js";const Kernel={gaussian:(t=1)=>(s,i)=>{let h=s.reduce(((t,s,h)=>t+(s-i[h])**2),0);return Math.exp(-h/(2*t*t))},linear:()=>(t,s)=>t.reduce(((t,i,h)=>t+i*s[h]),0)};export default class S3VM{constructor(t,s=[]){this._b=0,this._s=3,this._gammas=null,this._rate=.1,this._C=1,this._Cs=1,this._kernel=Kernel[t](...s)}init(t,s){this._x=t.map((t=>t.concat())),this._t=s;const i=this._x.length;this._a=Matrix.randn(i,1).value,this._m=Array(this._x[0].length).fill(0);let h=0;for(let t=0;t<i;t++)if(this._t[t])this._b+=this._t[t];else{for(let s=0;s<this._x[t].length;s++)this._m[s]+=this._x[t][s];h++}this._m=this._m.map((t=>t/h));for(let t=0;t<i;t++)for(let s=0;s<this._x[t].length;s++)this._x[t][s]-=this._m[s];this._b/=this._x.length-h,this._k=[];for(let t=0;t<i;this._k[t++]=[]);for(let t=0;t<i;t++)for(let s=t;s<i;s++)this._k[t][s]=this._k[s][t]=this._kernel(this._x[t],this._x[s])}fit(){this._fit_continuation()}_fit_continuation(){const t=this._x.length;if(!this._gammas){const s=Matrix.zeros(t,t);let i=0;for(let h=0;h<t;h++){if(this._t[h])continue;const _=new Matrix(t,1,this._k[h]),e=_.dot(_.t),a=_.norm();e.div(a**3),s.add(e),i<a&&(i=a)}const[h]=s.eigenPowerIteration(),_=Math.cbrt((this._Cs*h)**2/(2*this._s)),e=1/(20*this._s*i**2);this._gammas=[];const a=11;for(let t=0;t<=10;t++)this._gammas[t]=(e/_)**(t/(a-1))*_;this._gamma_idx=0}const s=this._gammas[this._gamma_idx],i=[],h=[],_=[];for(let e=0;e<t;e++){const t=this._k[e].reduce(((t,s)=>t+s**2),0);i[e]=this._k[e].reduce(((t,s,i)=>t+this._a[i]*s),0)+this._b,h[e]=1+2*s*this._s*t,this._t[e]&&(_[e]=(this._t[e]*i[e]-1)/Math.sqrt(2*s*t))}const e=this._a.concat();for(let s=0;s<t;s++){let a;a=this._t[s]?this._C/2*this._erfc(_[s])*this._t[s]:this._Cs*(2*this._s*i[s]/h[s]**1.5)*Math.exp(-this._s*i[s]**2/h[s]);for(let i=0;i<t;i++)e[i]-=a*this._k[s][i]}const a=e.reduce(((t,s)=>t+s**2),0);this._a=this._a.map(((t,s)=>t-this._rate*e[s])),a<1e-4&&this._gamma_idx<this._gammas.length-1&&this._gamma_idx++}_erfc(t){const s=t<0?-1:1,i=Math.abs(t),h=1/(1+.3275911*i);return 1-s*(1-((((1.061405429*h-1.453152027)*h+1.421413741)*h-.284496736)*h+.254829592)*h*Math.exp(-i*i))}predict(t){const s=this._x.length;return t.map((t=>{t=t.map(((t,s)=>t-this._m[s]));let i=0;for(let h=0;h<s;h++)i+=this._a[h]*this._kernel(t,this._x[h]);return i+this._b}))}}