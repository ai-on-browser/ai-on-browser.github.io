export default class Pegasos{constructor(t,s=1){this._r=t,this._k=s,this._itr=100,this._do_projection=!1}init(t,s){this._x=t,this._y=s,this._t=0,this._w=Array(this._x[0].length).fill(0),this._b=0}update(t,s){this._t++;const h=1/(this._r*this._t),i=t.length,_=Array(this._w.length).fill(0);let r=0;for(let h=0;h<i;h++){if(t[h].reduce(((t,s,h)=>t+s*this._w[h]),0)+this._b<1){for(let i=0;i<t[h].length;i++)_[i]+=s[h]*t[h][i];r+=s[h]}}if(this._w=this._w.map(((t,s)=>(1-h*this._r)*t+h*_[s]/i)),this._b=(1-h*this._r)*this._b+h*r/i,this._do_projection){const t=1/(Math.sqrt(this._r)*Math.sqrt(this._w.reduce(((t,s)=>t+s**s),this._b**2)));t<1&&(this._w=this._w.map((s=>s*t)),this._b*=t)}}fit(){const t=this._x.length;for(let s=0;s<this._itr;s++){const s=[],h=[];for(let i=0;i<this._k;i++){const i=Math.floor(Math.random()*t);s.push(this._x[i]),h.push(this._y[i])}this.update(s,h)}}predict(t){const s=[];for(let h=0;h<t.length;h++){const i=t[h].reduce(((t,s,h)=>t+s*this._w[h]),0);s.push(i+this._b<=0?-1:1)}return s}}