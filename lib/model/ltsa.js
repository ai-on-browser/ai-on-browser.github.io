import Matrix from"../util/matrix.js";export default class LTSA{constructor(t=1){this._k=t}predict(t,o=0){const e=(t=Matrix.fromArray(t)).cols,r=t.rows,s=[];for(let o=0;o<r;o++){s[o]=[];for(let r=0;r<o;r++){let n=0;for(let s=0;s<e;s++)n+=(t.at(o,s)-t.at(r,s))**2;s[o][r]=s[r][o]=n}}const n=[];for(let t=0;t<r;t++){const o=[];for(let e=0;e<r;e++){if(e===t)continue;const r=s[t][e];if(o.length<this._k||r<o[this._k-1].dt){o.length===this._k&&o.pop(),o.push({dt:r,idx:e});for(let t=o.length-1;t>0;t--)o[t].dt<o[t-1].dt&&([o[t],o[t-1]]=[o[t-1],o[t]])}}n.push([t,...o.map((t=>t.idx))])}const l=Matrix.zeros(r,r);for(let o=0;o<r;o++){const r=t.row(n[o]),s=r.mean(0);r.sub(s);const i=r.dot(r.t).eigenVectors(),c=new Matrix(n[o].length,e+1,1/Math.sqrt(n[o].length));c.set(0,1,i.slice(0,e,1));const a=c.dot(c.t);for(let t=0;t<n[o].length;t++){const e=n[o][t];l.addAt(e,e,1+a.at(t,t));for(let r=0;r<t;r++){const s=n[o][r];l.addAt(e,s,a.at(t,r)),l.addAt(s,e,a.at(r,t))}}}const i=l.eigenVectors();return i.flip(1),i.slice(1,o+1,1).toArray()}}