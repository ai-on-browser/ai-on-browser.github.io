import Layer from"./base.js";import{Matrix}from"../../util/math.js";export default class SoftargmaxLayer extends Layer{constructor({beta:t=1e4,...s}){super(s),this._beta=t}calc(t){this._i=t,this._o=this._i.copyMap((t=>this._beta*t)),this._o.sub(this._o.max(1)),this._o.map(Math.exp),this._o.div(this._o.sum(1));const s=Matrix.zeros(1,this._o.cols);for(let t=0;t<s.cols;t++)s.set(0,t,t);return this._o.copyMult(s).sum(1)}grad(t){this._bo=new Matrix(this._o.rows,this._o.cols);for(let s=0;s<this._o.cols;s++)this._bo.set(0,s,t.copyMult(s));const s=this._i.copy();s.sub(s.max(1)),s.map(Math.exp),s.div(s.sum(1)),this._bi=new Matrix(this._o.rows,this._o.cols);for(let t=0;t<this._bo.rows;t++)for(let o=0;o<this._bo.cols;o++){const i=s.at(t,o);let h=0;for(let r=0;r<this._bo.cols;r++){const e=o===r?1-i:-i;h+=s.at(t,r)*e*this._bo.at(t,r)}this._bi.set(t,o,h)}return this._bi}}