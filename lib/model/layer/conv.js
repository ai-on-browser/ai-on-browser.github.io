import{NeuralnetworkException}from"../neuralnetwork.js";import Layer from"./base.js";import{Tensor}from"../../util/math.js";export default class ConvLayer extends Layer{constructor({kernel:t,channel:i=null,stride:s=null,padding:e=null,activation:n=null,l2_decay:h=0,l1_decay:_=0,...a}){super(a),this._in_channel=null,this._out_channel=i,this._kernel=t,this._stride=s||1,this._padding=e||0,this._w=null,n&&(this._activation_func=new NeuralnetworkLayers[n](a)),this._l2_decay=h,this._l1_decay=_}calc(t){if(Array.isArray(this._kernel)||(this._kernel=Array(t.dimension-2).fill(this._kernel)),t.dimension!==this._kernel.length+2)throw new NeuralnetworkException("Invalid kernel size",[this,t]);this._w||(this._in_channel=t.sizes[t.dimension-1],this._out_channel||(this._out_channel=2*this._in_channel),this._w=Tensor.randn([this._in_channel,...this._kernel,this._out_channel])),this._i=t;const i=[t.sizes[0],...this._kernel.map(((i,s)=>Math.ceil((t.sizes[s+1]+2*this._padding)/this._stride)+1-i)),this._out_channel];this._o=new Tensor(i);for(let s=0;s<t.sizes[0];s++)for(let e=0;e<this._in_channel;e++)for(let n=0;n<this._out_channel;n++){if(2!==this._kernel.length)throw new NeuralnetworkException("Invalid dimension.");for(let h=0;h<i[1];h++)for(let _=0;_<i[2];_++){let i=0;for(let a=0;a<this._kernel[0];a++)if(!(h-this._padding+a<0||h-this._padding+a>=t.sizes[1]))for(let l=0;l<this._kernel[1];l++)_-this._padding+l<0||_-this._padding+l>=t.sizes[2]||(i+=t.at(s,h-this._padding+a,_-this._padding+l,e)*this._w.at(e,a,l,n));this._o.set([s,h,_,n],i)}}return this._activation_func?this._activation_func.calc(this._o):this._o}grad(t){this._bo=t,this._activation_func&&(this._bo=this._activation_func.grad(t)),this._bi=new Tensor(this._i.sizes),this._dw=new Tensor(this._w.sizes);for(let i=0;i<this._i.sizes[0];i++)for(let s=0;s<this._in_channel;s++)for(let e=0;e<this._out_channel;e++){if(2!==this._kernel.length)throw new NeuralnetworkException("Invalid dimension.");for(let n=0;n<t.sizes[1];n++)for(let h=0;h<t.sizes[2];h++)for(let _=0;_<this._kernel[0];_++){const a=n-this._padding+_;if(!(a<0||a>=this._i.sizes[1]))for(let l=0;l<this._kernel[1];l++){const r=h-this._padding+l;if(r<0||r>=this._i.sizes[2])continue;const o=this._bi.at(i,a,r,s);this._bi.set([i,a,r,s],o+this._w.at(s,_,l,e)*t.at(i,n,h,e));const d=this._dw.at(s,_,l,e);this._dw.set([s,_,l,e],d+this._i.at(i,a,r,s)*this._bo.at(i,n,h,e))}}}return this._bi}update(){this._dw.reshape(this._dw.sizes[0],this._dw.length/this._dw.sizes[0]);const t=this._opt.delta("w",this._dw.toMatrix());for(let i=0;i<this._w.length;i++)this._w.value[i]-=t.value[i]}get_params(){return{w:this._w}}set_params(t){this._w=t.w.copy()}}