import Layer from"./base.js";import{Matrix,Tensor}from"../../util/math.js";export default class LSTMLayer extends Layer{constructor({size:t,return_sequences:s=!1,...i}){super(i),this._size=t,this._w_z=null,this._w_in=null,this._w_for=null,this._w_out=null,this._r_z=Matrix.randn(this._size,this._size),this._r_in=Matrix.randn(this._size,this._size),this._r_for=Matrix.randn(this._size,this._size),this._r_out=Matrix.randn(this._size,this._size),this._p_in=Matrix.randn(1,this._size),this._p_for=Matrix.randn(1,this._size),this._p_out=Matrix.randn(1,this._size),this._b_z=Matrix.zeros(1,this._size),this._b_in=Matrix.zeros(1,this._size),this._b_for=Matrix.zeros(1,this._size),this._b_out=Matrix.zeros(1,this._size),this._c0=Matrix.zeros(1,this._size),this._y0=Matrix.zeros(1,this._size),this._return_sequences=s}_sigmoid(t){return t.copyMap((t=>1/(1+Math.exp(-t))))}_grad_sigmoid(t,s){return s.copyMap((t=>t*(1-t)))}_tanh(t){return t.copyMap(Math.tanh)}_grad_tanh(t){return t.copyMap((t=>1/Math.cosh(t)**2))}calc(t){t=t.transpose(2,0,1),this._x=[];for(let s=0;s<t.sizes[0];s++)this._x[s]=t.at(s).toMatrix();this._w_z||(this._w_z=Matrix.randn(this._x[0].cols,this._size),this._w_in=Matrix.randn(this._x[0].cols,this._size),this._w_for=Matrix.randn(this._x[0].cols,this._size),this._w_out=Matrix.randn(this._x[0].cols,this._size)),this._c=[],this._y=[],this._ob=[],this._o=[],this._fb=[],this._f=[],this._ib=[],this._i=[],this._zb=[],this._z=[];for(let t=0;t<this._x.length;t++){const s=0===t?this._y0:this._y[t-1],i=0===t?this._c0:this._c[t-1],_=this._x[t].dot(this._w_z);_.add(s.dot(this._r_z)),_.add(this._b_z),this._zb[t]=_;const h=this._tanh(_);this._z[t]=h;const d=this._x[t].dot(this._w_in);d.add(s.dot(this._r_in)),d.add(this._p_in.copyMult(i)),d.add(this._b_in),this._ib[t]=d;const o=this._sigmoid(d);this._i[t]=o;const r=this._x[t].dot(this._w_for);r.add(s.dot(this._r_for)),r.add(this._p_for.copyMult(i)),r.add(this._b_for),this._fb[t]=r;const a=this._sigmoid(r);this._f[t]=a,this._c[t]=o.copyMult(h),this._c[t].add(a.copyMult(i));const e=this._x[t].dot(this._w_out);e.add(s.dot(this._r_out)),e.add(this._p_out.copyMult(this._c[t])),e.add(this._b_out),this._ob[t]=e;const n=this._sigmoid(e);this._o[t]=n,this._y[t]=this._tanh(this._c[t]),this._y[t].mult(n)}if(this._return_sequences){return Tensor.fromArray(this._y.map((t=>t.toArray()))).transpose(1,2,0)}return this._y[this._y.length-1]}grad(t){return this._grad_bptt(t)}_grad_bptt(t){const s=this._y.length;if(this._bo=Array(s),this._return_sequences){t=t.transpose(2,0,1);for(let i=0;i<s;i++)this._bo[i]=t.at(i).toMatrix()}else this._bo[s-1]=t;this._dy=[],this._do=[],this._dc=[],this._df=[],this._di=[],this._dz=[];const i=[];for(let t=s-1;t>=0;t--)this._dy[t]=this._bo[t]||Matrix.zeros(...this._dy[t+1].sizes),t<s-1&&(this._dy[t].add(this._dz[t+1].dot(this._r_z.t)),this._dy[t].add(this._di[t+1].dot(this._r_in.t)),this._dy[t].add(this._df[t+1].dot(this._r_for.t)),this._dy[t].add(this._do[t+1].dot(this._r_out.t))),this._do[t]=this._dy[t].copy(),this._do[t].mult(this._tanh(this._c[t])),this._do[t].mult(this._grad_sigmoid(this._ob[t],this._o[t])),this._dc[t]=this._dy[t].copy(),this._dc[t].mult(this._o[t]),this._dc[t].mult(this._grad_tanh(this._c[t])),this._dc[t].add(this._p_out.copyMult(this._do[t])),t<s-1&&(this._dc[t].add(this._p_in.copyMult(this._di[t+1])),this._dc[t].add(this._p_for.copyMult(this._df[t+1])),this._dc[t].add(this._dc[t+1].copyMult(this._f[t+1]))),this._df[t]=this._dc[t].copy(),this._df[t].mult(0===t?this._c0:this._c[t-1]),this._df[t].mult(this._grad_sigmoid(this._fb[t],this._f[t])),this._di[t]=this._dc[t].copy(),this._di[t].mult(this._z[t]),this._di[t].mult(this._grad_sigmoid(this._ib[t],this._i[t])),this._dz[t]=this._dc[t].copy(),this._dz[t].mult(this._i[t]),this._dz[t].mult(this._grad_tanh(this._zb[t])),i[t]=this._dz[t].dot(this._w_z.t),i[t].add(this._di[t].dot(this._w_in.t)),i[t].add(this._df[t].dot(this._w_for.t)),i[t].add(this._do[t].dot(this._w_out.t));return Tensor.fromArray(i.map((t=>t.toArray()))).transpose(1,2,0)}update(){this._update_bptt()}_update_bptt(){const t=this._y.length,s=this._x[0].rows,i=Matrix.zeros(...this._w_z.sizes),_=Matrix.zeros(...this._w_in.sizes),h=Matrix.zeros(...this._w_out.sizes),d=Matrix.zeros(...this._w_for.sizes),o=Matrix.zeros(1,this._size),r=Matrix.zeros(1,this._size),a=Matrix.zeros(1,this._size),e=Matrix.zeros(1,this._size),n=Matrix.zeros(1,this._size);for(let z=0;z<t;z++){const t=this._x[z].tDot(this._dz[z]);t.div(s),i.add(t);const c=this._x[z].tDot(this._di[z]);c.div(s),_.add(c);const u=this._x[z].tDot(this._do[z]);u.div(s),h.add(u);const p=this._x[z].tDot(this._df[z]);p.div(s),d.add(p),o.add(this._dz[z].mean(0)),r.add(this._di[z].mean(0)),a.add(this._do[z].mean(0)),e.add(this._df[z].mean(0));const l=this._dc[z].copyMult(this._do[z]);n.add(l.mean(0))}this._w_z.sub(this._opt.delta("w_z",i)),this._w_in.sub(this._opt.delta("w_i",_)),this._w_out.sub(this._opt.delta("w_o",h)),this._w_for.sub(this._opt.delta("w_f",d)),this._b_z.sub(this._opt.delta("b_z",o)),this._b_in.sub(this._opt.delta("b_i",r)),this._b_out.sub(this._opt.delta("b_o",a)),this._b_for.sub(this._opt.delta("b_f",e)),this._p_out.sub(this._opt.delta("p_o",n));const z=Matrix.zeros(this._size,this._size),c=Matrix.zeros(this._size,this._size),u=Matrix.zeros(this._size,this._size),p=Matrix.zeros(this._size,this._size),l=Matrix.zeros(1,this._size),M=Matrix.zeros(1,this._size);for(let i=0;i<t-1;i++){const t=this._y[i].tDot(this._dz[i+1]);t.div(s),z.add(t);const _=this._y[i].tDot(this._di[i+1]);_.div(s),c.add(_);const h=this._y[i].tDot(this._do[i+1]);h.div(s),u.add(h);const d=this._y[i].tDot(this._df[i+1]);d.div(s),p.add(d);const o=this._dc[i].copyMult(this._di[i+1]);l.add(o.mean(0));const r=this._dc[i].copyMult(this._df[i+1]);M.add(r.mean(0))}this._r_z.sub(this._opt.delta("r_z",z)),this._r_in.sub(this._opt.delta("r_i",c)),this._r_out.sub(this._opt.delta("r_o",u)),this._r_for.sub(this._opt.delta("r_f",p)),this._p_in.sub(this._opt.delta("p_i",l)),this._p_for.sub(this._opt.delta("p_f",M))}}