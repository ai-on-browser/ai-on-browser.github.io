import{Matrix}from"../../util/math.js";import NeuralNetwork from"../neuralnetwork.js";import{FlowLayer}from"./base.js";export default class AdditiveCoupling extends FlowLayer{constructor({d:t=null,...e}){super(e),this._d=t,this._m=null}calc(t){this._d||(this._d=Math.floor(t.cols/2)),this._m||(this._m=NeuralNetwork.fromObject([{type:"input"},{type:"full",out_size:20,activation:"leaky_relu"},{type:"full",out_size:t.cols-this._d,activation:"leaky_relu"}],null,"adam")),this._o=t.copy();const e=Matrix.zeros(...t.sizes);return e.set(0,this._d,this._m.calc(t.slice(0,this._d,1))),this._o.add(e),this._o}inverse(t){this._o=t.copy();const e=Matrix.zeros(...t.sizes);return e.set(0,this._d,this._m.calc(t.slice(0,this._d,1))),this._o.sub(e),this._o}jacobianDeterminant(){return 1}grad(t){const e=t.copy(),s=Matrix.zeros(...t.sizes),i=this._m.grad(t.slice(this._d,null,1));return s.set(0,0,i),e.add(s),e}update(t){this._m.update(t.lr)}toObject(){throw"Cannot make object! (not implemented)"}}AdditiveCoupling.registLayer();