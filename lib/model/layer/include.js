import NeuralNetwork from"../neuralnetwork.js";import Layer from"./base.js";import Matrix from"../../util/matrix.js";export default class IncludeLayer extends Layer{constructor({net:t,input_to:r=null,train:i=!0,...e}){super(e),this._model=t instanceof NeuralNetwork?t:NeuralNetwork.fromObject(t),this._input_to=r,this._train=i,this._org_i=null,this._org_t=null}bind({input:t,supervisor:r}){this._org_i=t,this._org_t=r}calc(t){if(!(this._org_i instanceof Matrix)&&this._input_to){const r=t;(t=this._org_i)[this._input_to]=r}return this._model.calc(t)}grad(t){return this._model.grad(t)}update(t){this._train&&this._model.update(t.lr)}toObject(){return{type:"include",net:this._model.toObject(),input_to:this._input_to,train:this._train}}}IncludeLayer.registLayer();