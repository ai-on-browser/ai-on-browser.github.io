import Layer from"./base.js";import{Matrix,Tensor}from"../../util/math.js";export default class GRULayer extends Layer{constructor({size:t,return_sequences:s=!1,w_z:_=null,w_r:i=null,w_h:h=null,u_z:r=null,u_r:a=null,u_h:d=null,b_z:e=null,b_r:o=null,b_h:u=null,...n}){super(n),this._size=t,this._w_z=_?Matrix.fromArray(_):null,this._w_r=i?Matrix.fromArray(i):null,this._w_h=h?Matrix.fromArray(h):null,this._u_z=r?Matrix.fromArray(r):Matrix.randn(this._size,this._size),this._u_r=a?Matrix.fromArray(a):Matrix.randn(this._size,this._size),this._u_h=d?Matrix.fromArray(d):Matrix.randn(this._size,this._size),this._b_z=e?Matrix.fromArray(e):Matrix.zeros(1,this._size),this._b_r=o?Matrix.fromArray(o):Matrix.zeros(1,this._size),this._b_h=u?Matrix.fromArray(u):Matrix.zeros(1,this._size),this._s0=Matrix.zeros(1,this._size),this._return_sequences=s}_sigmoid(t){return t.copyMap((t=>1/(1+Math.exp(-t))))}_grad_sigmoid(t){return t.copyMap((t=>t*(1-t)))}_tanh(t){return t.copyMap(Math.tanh)}_grad_tanh(t){return t.copyMap((t=>1-t**2))}calc(t){t=t.transpose(1,0,2),this._x=[];for(let s=0;s<t.sizes[0];s++)this._x[s]=t.at(s).toMatrix();this._w_z||(this._w_z=Matrix.randn(this._x[0].cols,this._size)),this._w_r||(this._w_r=Matrix.randn(this._x[0].cols,this._size)),this._w_h||(this._w_h=Matrix.randn(this._x[0].cols,this._size)),this._h=[],this._s=[],this._z=[],this._r=[];for(let t=0;t<this._x.length;t++){const s=0===t?this._s0:this._s[t-1],_=this._x[t].dot(this._w_z);_.add(s.dot(this._u_z)),_.add(this._b_h);const i=this._sigmoid(_);this._z[t]=i;const h=this._x[t].dot(this._w_r);h.add(s.dot(this._u_r)),h.add(this._b_r);const r=this._sigmoid(h);this._r[t]=r;const a=this._x[t].dot(this._w_h);a.add(r.copyMult(s).dot(this._u_h)),a.add(this._b_h);const d=this._tanh(a);this._h[t]=d,this._s[t]=i.copyIsub(1),this._s[t].mult(d),this._s[t].add(i.copyMult(s))}if(this._return_sequences){return Tensor.fromArray(this._s.map((t=>t.toArray()))).transpose(1,0,2)}return this._s[this._s.length-1]}grad(t){return this._grad_bptt(t)}_grad_bptt(t){const s=this._s.length;if(this._bo=Array(s),this._return_sequences){t=t.transpose(1,0,2);for(let _=0;_<s;_++)this._bo[_]=t.at(_).toMatrix()}else this._bo[s-1]=t;this._dy=[],this._dr=[],this._dz=[],this._dh=[];const _=[];for(let t=s-1;t>=0;t--){const i=0===t?this._s0:this._s[t-1];this._dy[t]=this._bo[t]||Matrix.zeros(1,1),t<s-1&&(this._dy[t].add(this._dz[t+1].dot(this._u_z.t)),this._dy[t].add(this._dr[t+1].dot(this._u_r.t)),this._dy[t].add(this._dh[t+1].dot(this._u_h.t).copyMult(this._r[t+1])),this._dy[t].add(this._z[t+1].copyMult(this._dy[t+1]))),this._dz[t]=i.copyMult(this._dy[t]),this._dz[t].sub(this._h[t].copyMult(this._dy[t])),this._dz[t].mult(this._grad_sigmoid(this._z[t])),this._dh[t]=this._z[t].copyIsub(1),this._dh[t].mult(this._dy[t]),this._dh[t].mult(this._grad_tanh(this._h[t])),this._dr[t]=this._dh[t].dot(this._u_h.t),this._dr[t].mult(i),this._dr[t].mult(this._grad_sigmoid(this._r[t])),_[t]=this._dh[t].dot(this._w_h.t),_[t].add(this._dz[t].dot(this._w_z.t)),_[t].add(this._dr[t].dot(this._w_r.t))}return Tensor.fromArray(_.map((t=>t.toArray()))).transpose(1,0,2)}update(t){this._update_bptt(t)}_update_bptt(t){const s=this._s.length,_=this._x[0].rows,i=Matrix.zeros(...this._w_r.sizes),h=Matrix.zeros(...this._w_z.sizes),r=Matrix.zeros(...this._w_h.sizes),a=Matrix.zeros(1,this._size),d=Matrix.zeros(1,this._size),e=Matrix.zeros(1,this._size);for(let t=0;t<s;t++){const s=this._x[t].tDot(this._dr[t]);s.div(_),i.add(s);const o=this._x[t].tDot(this._dz[t]);o.div(_),h.add(o);const u=this._x[t].tDot(this._dh[t]);u.div(_),r.add(u),a.add(this._dr[t].mean(0)),d.add(this._dz[t].mean(0)),e.add(this._dh[t].mean(0))}this._w_r.sub(t.delta("w_r",i)),this._w_z.sub(t.delta("w_z",h)),this._w_h.sub(t.delta("w_h",r)),this._b_r.sub(t.delta("b_r",a)),this._b_z.sub(t.delta("b_z",d)),this._b_h.sub(t.delta("b_h",e));const o=Matrix.zeros(this._size,this._size),u=Matrix.zeros(this._size,this._size),n=Matrix.zeros(this._size,this._size);for(let t=0;t<s-1;t++){const s=this._s[t].tDot(this._dr[t+1]);s.div(_),o.add(s);const i=this._s[t].tDot(this._dz[t+1]);i.div(_),u.add(i);const h=this._s[t].tDot(this._dh[t+1]);h.div(_),n.add(h)}this._u_r.sub(t.delta("u_r",o)),this._u_z.sub(t.delta("u_z",u)),this._u_h.sub(t.delta("u_h",n))}toObject(){return{type:"gru",size:this._size,return_sequences:this._return_sequences,w_z:this._w_z?.toArray(),w_r:this._w_r?.toArray(),w_h:this._w_h?.toArray(),u_z:this._u_z.toArray(),u_r:this._u_r.toArray(),u_h:this._u_h.toArray(),b_z:this._b_z.toArray(),b_r:this._b_r.toArray(),b_h:this._b_h.toArray()}}}GRULayer.registLayer("gru");