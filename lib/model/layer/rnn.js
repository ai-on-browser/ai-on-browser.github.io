import Layer from"./base.js";import{Matrix,Tensor}from"../../util/math.js";import ActivationLayer from"./activation.js";export default class RNNLayer extends Layer{constructor({size:t,out_size:i=null,activation:_="tanh",recurrent_activation:s="sigmoid",return_sequences:h=!1,w_xh:r=null,w_hh:a=null,w_hy:e=null,b_xh:o=null,b_hh:n=null,b_hy:c=null,activation_params:u={},recurrent_activation_params:b={},...d}){super(d),this._size=t,this._out_size=i||t,this._w_xh=r?Matrix.fromArray(r):null,this._w_hh=a?Matrix.fromArray(a):Matrix.randn(t,t),this._w_hy=e?Matrix.fromArray(e):Matrix.randn(t,this._out_size),this._b_xh=o?Matrix.fromArray(o):Matrix.zeros(1,t),this._b_hh=n?Matrix.fromArray(n):Matrix.zeros(1,t),this._b_hy=c?Matrix.fromArray(c):Matrix.zeros(1,this._out_size),this._z0=Matrix.zeros(1,this._out_size),this._activation=_,_&&(this._activation_func=new ActivationLayer({activation:_,...u})),this._recurrent_activation=s,s&&(this._recurrent_activation_func=new ActivationLayer({activation:s,...b})),this._return_sequences=h}calc(t){t=t.transpose(1,0,2),this._i=[];for(let i=0;i<t.sizes[0];i++)this._i[i]=t.at(i).toMatrix();this._w_xh||(this._w_xh=Matrix.randn(this._i[0].cols,this._size)),this._o=[],this._z=[],this._u=[],this._v=[];for(let t=0;t<this._i.length;t++){this._z[t]=this._i[t].dot(this._w_xh);const i=0===t?this._z0:this._z[t-1];this._z[t].add(i.dot(this._w_hh)),this._z[t].add(this._b_xh),this._z[t].add(this._b_hh),this._recurrent_activation_func&&(this._u[t]=this._z[t],this._z[t]=this._recurrent_activation_func.calc(this._z[t])),this._o[t]=this._z[t].dot(this._w_hy),this._o[t].add(this._b_hy),this._activation_func&&(this._v[t]=this._o[t],this._o[t]=this._activation_func.calc(this._o[t]))}if(this._return_sequences){return Tensor.fromArray(this._o.map((t=>t.toArray()))).transpose(1,0,2)}return this._o[this._o.length-1]}grad(t){return this._grad_bptt(t)}_grad_bptt(t){const i=this._o.length;if(this._bo=Array(i),this._return_sequences){t=t.transpose(1,0,2);for(let _=0;_<i;_++)this._bo[_]=t.at(_).toMatrix()}else this._bo[i-1]=t;this._activation_func&&(this._bo=this._bo.map(((t,i)=>t?(this._activation_func.calc(this._v[i]),this._activation_func.grad(t)):t))),this._bi=Array(i),this._bi[i-1]=this._bo[i-1].dot(this._w_hy.t),this._recurrent_activation_func&&(this._recurrent_activation_func.calc(this._u[i-1]),this._bi[i-1]=this._recurrent_activation_func.grad(this._bi[i-1]));for(let t=i-2;t>=0;t--)this._bi[t]=this._bi[t+1].dot(this._w_hh.t),this._bo[t]&&this._bi[t].add(this._bo[t].dot(this._w_hy.t)),this._recurrent_activation_func&&(this._recurrent_activation_func.calc(this._u[t]),this._bi[t]=this._recurrent_activation_func.grad(this._bi[t]));return Tensor.fromArray(this._bi.map((t=>t.toArray()))).transpose(1,0,2)}update(t){this._update_bptt(t)}_update_bptt(t){const i=this._o.length,_=Matrix.zeros(...this._w_xh.sizes),s=Matrix.zeros(1,this._size);for(let t=0;t<i;t++){const i=this._i[t].tDot(this._bi[t]);i.div(this._i[t].rows),_.add(i),s.add(this._bi[t].mean(0))}_.div(i),s.div(i),this._w_xh.sub(t.delta("w_xh",_)),this._b_xh.sub(t.delta("b_xh",s));const h=Matrix.zeros(this._size,this._size),r=Matrix.zeros(1,this._size);for(let t=0;t<i-1;t++){const i=this._z[t].tDot(this._bi[t+1]);i.div(this._z[t].rows),h.add(i),r.add(this._bi[t+1].mean(0))}h.div(i-1),r.div(i-1),this._w_hh.sub(t.delta("w_hh",h)),this._b_hh.sub(t.delta("b_hh",r));const a=Matrix.zeros(this._size,this._out_size),e=Matrix.zeros(1,this._out_size);for(let t=0;t<i;t++)if(this._bo[t]){const i=this._z[t].tDot(this._bo[t]);i.div(this._z[t].rows),a.add(i),e.add(this._bo[t].mean(0))}a.div(i),e.div(i),this._w_hy.sub(t.delta("w_hy",a)),this._b_hy.sub(t.delta("b_hy",e))}toObject(){return{type:"rnn",out_size:this._size,return_sequences:this._return_sequences,w_xh:this._w_xh?.toArray(),w_hh:this._w_hh.toArray(),w_hy:this._w_hy.toArray(),b_xh:this._b_xh.toArray(),b_hh:this._b_hh.toArray(),b_hy:this._b_hy.toArray(),activation:this._activation,recurrent_activation:this._recurrent_activation,activation_params:this._activation_func?.toObject(),recurrent_activation_params:this._recurrent_activation_func?.toObject()}}}RNNLayer.registLayer("rnn");