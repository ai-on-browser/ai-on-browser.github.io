import{Matrix}from"../../util/math.js";import{NeuralnetworkException}from"../neuralnetwork.js";const layerClasses={};export default class Layer{constructor({optimizer:e=null}){this._opt=e}static fromObject(e){const t=layerClasses[e.type];if(!t)throw new NeuralnetworkException(`Invalid layer type: ${e.type}`);return new t(e)}static registLayer(e,t){t||=this,e||t===Layer||(e=this.name.substr(0,this.name.length-5).replace(/[A-Z]/g,(e=>"_"+e.toLowerCase())).slice(1),t=this),layerClasses[e]=t}bind(e){}calc(e){throw new NeuralnetworkException("Not impleneted",this)}grad(e){throw new NeuralnetworkException("Not impleneted",this)}update(){}toObject(){for(const e of Object.keys(layerClasses))if(this instanceof layerClasses[e])return{type:e};return{}}}export class LossLayer extends Layer{calc(e){return e}grad(){return new Matrix(1,1,1)}}