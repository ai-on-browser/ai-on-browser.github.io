import Matrix from"../util/matrix.js";import{KMeans}from"./kmeans.js";export default class XMeans{constructor(){this._centroids=[],this._init_k=2}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(t,s){return Math.sqrt(t.reduce(((t,e,r)=>t+(e-s[r])**2),0))}clear(){this._centroids=[]}fit(t,s=-1){let e=null;0===this._centroids.length?(e=this._split_cluster(t,this._init_k),s--):e=this._create_clusters(this,t);const r=[];for(;e.length>0&&(s<0||s-- >0);){const t=[];for(;e.length>0;){const s=e.shift();if(s.size<=3){r.push(s.centroid);continue}const[o,i]=this._split_cluster(s.data),c=Math.sqrt(o.centroid.reduce(((t,s,e)=>t+(s-i.centroid[e])**2),0)/(o.cov.det()+i.cov.det())),n=.5/(1/(1+Math.exp(-1.7*c))),l=s.cols*(s.cols+3)/2;-2*(s.size*Math.log(n)+o.llh+i.llh)+2*l*Math.log(s.size)<s.bic?t.push(o,i):r.push(s.centroid)}e=t}e.length>0&&r.push(...e.map((t=>t.centroid))),this._centroids=r}_split_cluster(t,s=2){const e=new KMeans;for(let r=0;r<s;r++)e.add(t);for(;e.fit(t)>0;);return this._create_clusters(e,t)}_create_clusters(t,s){const e=t.size,r=t.predict(s),o=[];for(let t=0;t<e;o[t++]=[]);s.forEach(((t,s)=>o[r[s]].push(t)));const i=[];for(let s=0;s<e;s++){const e=Matrix.fromArray(o[s]),r=e.cov(),c=r.inv(),n=e.mean(0);let l=Math.log(1/Math.sqrt((2*Math.PI)**e.cols*r.det()))*e.rows;for(let t=0;t<e.rows;t++){const s=e.row(t);s.sub(n),l-=s.dot(c).dot(s.t).toScaler()/2}const h=e.cols*(e.cols+3)/2;i[s]={size:o[s].length,cols:e.cols,data:o[s],cov:r,centroid:t.centroids[s],llh:l,bic:-2*l+h*Math.log(o[s].length)}}return i}predict(t){if(0!==this._centroids.length)return t.map((t=>{let s=1/0,e=-1;for(let r=0;r<this._centroids.length;r++){const o=this._distance(t,this._centroids[r]);o<s&&(s=o,e=r)}return e}))}}