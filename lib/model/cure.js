import Matrix from"../util/matrix.js";export default class CURE{constructor(t){this._c=t,this._a=.2,this._root=null}_distance(t,e){return Math.sqrt(t.reduce(((t,r,n)=>t+(r-e[n])**2),0))}fit(t){const e=[],r=[];for(t.forEach(((n,s)=>{e.push({point:n,index:s,repr:[n],distance:0,get leafs(){return[this]}}),r[s]=t.map((t=>this._distance(n,t)))}));e.length>1;){let t=0,n=1,s=1/0;const l=e.length;for(let e=0;e<l;e++)for(let i=e+1;i<l;i++)r[e][i]<s&&(t=e,n=i,s=r[e][i]);const i=[...e[t].leafs.map((t=>t.point)),...e[n].leafs.map((t=>t.point))],o=[];let c=Math.floor(Math.random()*i.length);for(let t=0;t<Math.min(i.length,this._c);t++){let t=0,e=-1;for(let r=0;r<i.length;r++){if(o.includes(r))continue;const n=this._distance(i[r],i[c]);n>t&&(t=n,e=r)}o.push(e),c=e}const h=[],a=Matrix.fromArray(i).mean(0).value;for(let t=0;t<o.length;t++){h[t]=i[o[t]].concat();for(let e=0;e<a.length;e++)h[t][e]=this._a*a[e]+(1-this._a)*h[t][e]}for(let s=0;s<l;s++){if(s===t||s===n){r[t][s]=0;continue}let l=1/0;const i=e[s];for(let t=0;t<i.repr.length;t++)for(let e=0;e<h.length;e++){const r=this._distance(i.repr[t],h[e]);r<l&&(l=r)}r[s][t]=r[t][s]=l,r[s].splice(n,1)}r[t].splice(n,1),r.splice(n,1),e[t]={repr:h,distance:s,children:[e[t],e[n]],get leafs(){return[...this.children[0].leafs,...this.children[1].leafs]}},e.splice(n,1)}this._root=e[0]}getClusters(t){const e=[this._root];for(;e.length<t;){let t=0,r=-1;for(let n=0;n<e.length;n++){const s=e[n];s.children&&s.distance>t&&(r=n,t=s.distance)}if(-1===r)break;const n=e[r];e.splice(r,1,n.children[0],n.children[1])}return e}predict(t){const e=[],r=this.getClusters(t);for(let t=0;t<r.length;t++){const n=r[t].leafs;for(let r=0;r<n.length;r++)e[n[r].index]=t}return e}}