export default class MinmaxNormalization{constructor(i=0,_=1){this._min=i,this._max=_}fit(i){if(Array.isArray(i[0])){this._d_min=Array(i[0].length).fill(1/0),this._d_max=Array(i[0].length).fill(-1/0);for(let _=0;_<i.length;_++)for(let t=0;t<i[_].length;t++)this._d_min[t]=Math.min(this._d_min[t],i[_][t]),this._d_max[t]=Math.max(this._d_max[t],i[_][t]);for(let i=0;i<this._d_min.length;i++)this._d_min[i]===this._d_max[i]&&(this._d_max[i]+=1)}else this._d_min=i.reduce(((i,_)=>Math.min(i,_)),1/0),this._d_max=i.reduce(((i,_)=>Math.max(i,_)),-1/0),this._d_min===this._d_max&&(this._d_max+=1)}predict(i){return i.map((i=>Array.isArray(i)?Array.isArray(this._d_min)?i.map(((i,_)=>(i-this._d_min[_])/(this._d_max[_]-this._d_min[_]))):i.map((i=>(i-this._d_min)/(this._d_max-this._d_min))):Array.isArray(this._d_min)?(i-this._d_min[0])/(this._d_max[0]-this._d_min[0]):(i-this._d_min)/(this._d_max-this._d_min)))}}