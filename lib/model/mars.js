var I=Object.defineProperty;var w=(D,t)=>I(D,"name",{value:t,configurable:!0});import d from"../util/matrix.js";class z{static{w(this,"Term")}constructor(t=[],e=[],s=[]){this._s=t,this._t=e,this._v=s}prod(t,e,s){return new z(this._s.concat(t),this._t.concat(e),this._v.concat(s))}calc(t){let e=1;for(let s=0;s<this._s.length;s++)e*=Math.max(0,this._s[s]*(t[this._v[s]]-this._t[s]));return e}}export default class j{static{w(this,"MultivariateAdaptiveRegressionSplines")}constructor(t){this._mmax=t,this._b=[new z],this._a=null}fit(t,e){const s=t.length,_=t[0].length;e=d.fromArray(e);let c=d.ones(s,1),f=1/0,m=null;for(;this._b.length<=this._mmax;){let i=null,a=null;for(let r=0;r<this._b.length;r++)for(let h=0;h<_;h++)for(let l=0;l<s;l++){if(this._b[r].calc(t[l])===0)continue;const n=t[l][h],p=this._b[r].prod(1,n,h),u=this._b[r].prod(-1,n,h),o=d.resize(c,s,c.cols+2);for(let b=0;b<s;b++)o.set(b,o.cols-2,p.calc(t[b])),o.set(b,o.cols-1,u.calc(t[b]));const M=o.tDot(o).solve(o.tDot(e)),k=o.dot(M);k.sub(e);const y=k.norm();y<f&&(i={m:r,v:h,t:n},a=o,m=M,f=y)}this._b.push(this._b[i.m].prod(1,i.t,i.v),this._b[i.m].prod(-1,i.t,i.v)),c=a,this._a=m}let v=this._b,A=c,g=this._b;for(let i=this._b.length-1;i>=1;i--){let a=1/0;const r=A,h=g;for(let l=1;l<=i;l++){const n=r.copy();n.remove(l,1);const p=n.tDot(n).solve(n.tDot(e)),u=n.dot(p);u.sub(e);const o=u.norm();o<a&&(a=o,A=n,g=h.concat(),g.splice(l,1)),o<f&&(f=o,m=p,v=h.concat(),v.splice(l,1))}}this._a=m,this._b=v}predict(t){const e=t.length,s=d.ones(e,this._b.length);for(let _=0;_<e;_++)for(let c=0;c<this._b.length;c++)s.set(_,c,this._b[c].calc(t[_]));return s.dot(this._a).toArray()}}
