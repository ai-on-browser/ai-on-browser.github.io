import Matrix from"../util/matrix.js";import{DecisionTreeRegression}from"./decision_tree.js";export class GBDT{constructor(t=1,s=1,r=0){this._trees=[],this._r=[],this._maxd=t,this._srate=s,this._lr=r}get size(){return this._trees.length}_sample(t){const s=Array.from({length:t},((t,s)=>s));for(let r=t-1;r>0;r--){let t=Math.floor(Math.random()*(r+1));[s[r],s[t]]=[s[t],s[r]]}return s.slice(0,Math.ceil(t*this._srate))}init(t,s){this._x=t,this._y=Matrix.fromArray(s),this._loss=this._y.copy()}fit(){const t=new DecisionTreeRegression,s=this._sample(this._x.length);t.init(s.map((t=>this._x[t])),this._loss.row(s).toArray());for(let s=0;s<this._maxd;s++)t.fit();this._trees.push(t);const r=Matrix.fromArray(t.predict(this._x));let i=this._lr;if(!i){const t=r.tDot(r),s=this._loss.cols;t.add(Matrix.eye(s,s,1e-8));i=t.solve(r.tDot(this._loss)).diag().reduce(((t,s)=>t+s),0)/s}this._r.push(i),r.mult(i),this._loss.sub(r)}predict(t){const s=this._trees.map((s=>Matrix.fromArray(s.predict(t)))),r=Matrix.zeros(t.length,this._y.cols);for(let t=0;t<s.length;t++)s[t].mult(this._r[t]),r.add(s[t]);return r.toArray()}}export class GBDTClassifier extends GBDT{constructor(t=1,s=1,r=0){super(t,s,r)}init(t,s){this._x=t,this._cls=[...new Set(s)],this._y=Matrix.zeros(s.length,this._cls.length);for(let t=0;t<this._y.rows;t++)this._y.set(t,this._cls.indexOf(s[t]),1);this._loss=this._y.copy()}predict(t){const s=this._trees.map((s=>Matrix.fromArray(s.predict(t)))),r=Matrix.zeros(t.length,this._y.cols);for(let t=0;t<s.length;t++)s[t].mult(this._r[t]),r.add(s[t]);return r.argmax(1).value.map((t=>this._cls[t]))}}