import Matrix from"../util/matrix.js";import{PCA}from"./pca.js";export default class ICA{constructor(){this._w=null,this._alpha=.1}fit(t){const r=(t=Matrix.fromArray(t)).cols;this._w||(this._w=Matrix.zeros(r,r)),t=t.copySub(t.mean(0));const o=new PCA;o.fit(t);const s=Matrix.fromArray(o.predict(t)),a=[];for(let t=0;t<r;t++){let o=Matrix.randn(r,1);if(t>0){const r=this._w.slice(0,t),s=r.dot(o);r.mult(s),o.sub(r.sum(0).t)}o.div(o.norm());let i=1e4;for(;i-- >0;){const r=s.dot(o),i=r.copyMap((t=>Math.tanh(t*this._alpha))),c=s.copyMult(i).mean(0).t,h=r.copyMap((t=>this._alpha*(1-Math.tanh(this._alpha*t)**2))),e=o.copyMult(h.mean()),l=c.copySub(e);if(t>0){const t=this._w.row(a),r=t.dot(l);t.mult(r),l.sub(t.sum(0).t)}l.div(l.norm());const n=o.copyMult(l);if(Math.abs(Math.abs(n.sum())-1)<1e-12)break;o=l}this._w.set(t,0,o.t),a.push(t)}}predict(t,r=0){t=Matrix.fromArray(t);let o=this._w.t;return r>0&&r<o.cols&&(o=o.resize(o.rows,r)),t.dot(o).toArray()}}