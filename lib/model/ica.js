import{Matrix}from"../util/math.js";import{PCA}from"./pca.js";export default class ICA{constructor(){this._w=null,this._alpha=.1}fit(t){const o=(t=Matrix.fromArray(t)).cols;this._w||(this._w=Matrix.zeros(o,o)),t=t.copySub(t.mean(0));const r=new PCA;r.fit(t);const s=Matrix.fromArray(r.predict(t)),a=[];for(let t=0;t<o;t++){let r=Matrix.randn(o,1);if(t>0){const o=this._w.slice(0,t),s=o.dot(r);o.mult(s.t),r.sub(o.sum(0).t)}r.div(r.norm());let i=1e4;for(;i-- >0;){const o=s.dot(r),i=o.copyMap((t=>Math.tanh(t*this._alpha))),c=s.copyMult(i).mean(0).t,h=o.copyMap((t=>this._alpha*(1-Math.tanh(this._alpha*t)**2))),e=r.copyMult(h.mean()),l=c.copySub(e);if(t>0){const t=this._w.row(a),o=t.dot(l);t.mult(o.t),l.sub(t.sum(0).t)}l.div(l.norm());const n=r.copyMult(l);if(Math.abs(Math.abs(n.sum())-1)<1e-12)break;r=l}this._w.set(t,0,r.t),a.push(t)}}predict(t,o=0){t=Matrix.fromArray(t);let r=this._w.t;return o>0&&o<r.cols&&(r=r.resize(r.rows,o)),t.dot(r).toArray()}}