import{Matrix}from"../util/math.js";import{PCA}from"./pca.js";export default class ICA{constructor(){this._w=null,this._alpha=.1}fit(t){const o=(t=Matrix.fromArray(t)).cols,s=t.cols;t.rows;this._w||(this._w=Matrix.zeros(s,s)),t=t.copySub(t.mean(0));const r=new PCA;r.fit(t);const a=Matrix.fromArray(r.predict(t)),i=[];for(let t=0;t<o;t++){let o=Matrix.randn(s,1);if(t>0){const s=this._w.slice(0,t),r=s.dot(o);s.mult(r.t),o.sub(s.sum(0).t)}o.div(o.norm());let r=1e4;for(;r-- >0;){const s=a.dot(o),r=s.copyMap((t=>Math.tanh(t*this._alpha))),c=a.copyMult(r).mean(0).t,h=s.copyMap((t=>this._alpha*(1-Math.tanh(this._alpha*t)**2))),l=o.copyMult(h.mean()),e=c.copySub(l);if(t>0){const t=this._w.row(i),o=t.dot(e);t.mult(o.t),e.sub(t.sum(0).t)}e.div(e.norm());const n=o.copyMult(e);if(Math.abs(Math.abs(n.sum())-1)<1e-12)break;o=e}this._w.set(t,0,o.t),i.push(t)}}predict(t,o=0){t=Matrix.fromArray(t);let s=this._w.t;return o>0&&o<s.cols&&(s=s.resize(s.rows,o)),t.dot(s).toArray()}}