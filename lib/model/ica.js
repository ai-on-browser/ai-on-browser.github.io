import Matrix from"../util/matrix.js";import{PCA}from"./pca.js";export default class ICA{constructor(){this._w=null,this._alpha=.1}fit(t){const r=(t=Matrix.fromArray(t)).cols;this._w||(this._w=Matrix.zeros(r,r)),t=Matrix.sub(t,t.mean(0));const a=new PCA;a.fit(t);const s=Matrix.fromArray(a.predict(t)),i=[];for(let t=0;t<r;t++){let a=Matrix.randn(r,1);if(t>0){const r=this._w.slice(0,t),s=r.dot(a);r.mult(s),a.sub(r.sum(0).t)}a.div(a.norm());let o=1e4;for(;o-- >0;){const r=s.dot(a),o=Matrix.map(r,(t=>Math.tanh(t*this._alpha))),m=Matrix.mult(s,o).mean(0).t,h=Matrix.map(r,(t=>this._alpha*(1-Math.tanh(this._alpha*t)**2))),n=Matrix.mult(a,h.mean()),e=Matrix.sub(m,n);if(t>0){const t=this._w.row(i),r=t.dot(e);t.mult(r),e.sub(t.sum(0).t)}e.div(e.norm());const l=Matrix.mult(a,e);if(Math.abs(Math.abs(l.sum())-1)<1e-12)break;a=e}this._w.set(t,0,a.t),i.push(t)}}predict(t,r=0){t=Matrix.fromArray(t);const a=this._w.t;return r>0&&r<a.cols&&a.resize(a.rows,r),t.dot(a).toArray()}}