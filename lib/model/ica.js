var g=Object.defineProperty;var u=(e,t)=>g(e,"name",{value:t,configurable:!0});import s from"../util/matrix.js";import{PCA as v}from"./pca.js";export default class y{static{u(this,"ICA")}constructor(t=null){this._w=null,this._alpha=.1,this._rd=t??0}fit(t){t=s.fromArray(t);const o=t.cols;this._w||(this._w=s.zeros(o,o)),t=s.sub(t,t.mean(0));const m=new v;m.fit(t);const l=s.fromArray(m.predict(t)),_=1e-12,w=[];for(let i=0;i<o;i++){let r=s.randn(o,1);if(i>0){const a=this._w.slice(0,i),h=a.dot(r);a.mult(h),r.sub(a.sum(0).t)}r.div(r.norm());let d=1e4;for(;d-- >0;){const a=l.dot(r),h=s.map(a,n=>Math.tanh(n*this._alpha)),f=s.mult(l,h).mean(0).t,p=s.map(a,n=>this._alpha*(1-Math.tanh(this._alpha*n)**2)),b=s.mult(r,p.mean()),c=s.sub(f,b);if(i>0){const n=this._w.row(w),M=n.dot(c);n.mult(M),c.sub(n.sum(0).t)}c.div(c.norm());const A=s.mult(r,c);if(Math.abs(Math.abs(A.sum())-1)<_)break;r=c}this._w.set(i,0,r.t),w.push(i)}}predict(t){t=s.fromArray(t);const o=this._w.t;return this._rd>0&&this._rd<o.cols&&o.resize(o.rows,this._rd),t.dot(o).toArray()}}
