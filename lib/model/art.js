class L2{constructor(t=.5){this._beta=t}similarity(t,s){return 1/(Math.sqrt(s.reduce(((s,e,i)=>s+(e-t[i])**2),0))+1e-12)}update(t,s){return s?s.map(((s,e)=>this._beta*s+(1-this._beta)*t[e])):t.concat()}}export default class ART{constructor(t=1,s="l2"){"l2"===s&&(this._method=new L2),this._t=t,this._protos=[]}get size(){return this._protos.length}fit(t){const s=[];for(let e=0;e<t.length;e++)if(0===this._protos.length)this._protos[0]=this._method.update(t[e],null),s[e]=0;else{const i=this._protos.map((s=>this._method.similarity(s,t[e]))),o=Math.max(...i);if(o>=this._t){const h=i.indexOf(o);this._protos[h]=this._method.update(t[e],this._protos[h]),s[e]=h}else s[e]=this.size,this._protos[this.size]=this._method.update(t[e],null)}return s}predict(t){const s=[];for(let e=0;e<t.length;e++){const i=this._protos.map((s=>this._method.similarity(s,t[e]))),o=Math.max(...i);if(o>=this._t){const t=i.indexOf(o);s[e]=t}else s[e]=-1}return s}}