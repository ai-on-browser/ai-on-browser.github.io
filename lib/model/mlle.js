import Matrix from"../util/matrix.js";export default class MLLE{constructor(t=1){this._k=t}predict(t,s=0){const o=Matrix.fromArray(t),r=o.cols,e=o.rows,i=[],l=[];for(let t=0;t<e;i[t++]=[]);for(let t=0;t<e;t++){for(let s=t+1;s<e;s++){let e=0;for(let i=0;i<r;i++)e+=(o.at(t,i)-o.at(s,i))**2;i[t][s]=i[s][t]=e}const s=[];for(let o=0;o<e;o++){if(o===t)continue;const r=i[t][o];if(s.length<this._k||r<s[this._k-1].dt){s.length===this._k&&s.pop(),s.push({dt:r,idx:o});for(let t=s.length-1;t>0;t--)s[t].dt<s[t-1].dt&&([s[t],s[t-1]]=[s[t-1],s[t]])}}l.push(s)}const n=[],c=[],h=[],u=[];for(let t=0;t<e;t++){const r=o.row(l[t].map((t=>t.idx)));r.sub(o.row(t));const e=r.dot(r.t),[i,d]=e.eigen();n.push(d),c.push(i);const f=i.slice(s).reduce(((t,s)=>t+s),0)/i.slice(0,s).reduce(((t,s)=>t+s),0);u.push(f);const a=r.norm();for(let t=0;t<this._k;t++)e.addAt(t,t,1e-8*a);const m=e.inv().sum(1);m.div(m.sum()),h.push(m)}u.sort(((t,s)=>t-s));const d=u.length%2==1?u[(u.length-1)/2]:(u[u.length/2]+u[u.length/2+1])/2,f=Matrix.zeros(e,e);for(let t=0;t<e;t++){let o=-1;const r=[c[t][0]];for(let s=1;s<this._k;s++)r[s]=r[s-1]+c[t][s];for(let t=1;t<this._k-s&&!((r[this._k-1]-r[this._k-t-1])/r[this._k-t-1]>=d);t++)o=t;const i=n[t].slice(this._k-o,null,1),u=i.sum(0).norm(),a=i.sum(0);a.isub(u),a.div(a.norm());const m=Matrix.eye(o,o);m.sub(Matrix.mult(a.dot(a.t),2));const p=i.dot(m);p.add(Matrix.mult(h[t],1-u));const k=Matrix.zeros(e,o);for(let s=0;s<this._k;s++)k.set(l[t][s].idx,0,p.row(s));for(let s=0;s<o;s++)k.subAt(t,s,1);f.sub(k.dot(k.t))}const a=f.eigenVectors();return a.flip(1),a.slice(1,s+1,1).toArray()}}