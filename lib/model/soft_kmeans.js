export default class SoftKMeans{constructor(t=1){this._beta=t,this._c=[]}_distance(t,s){return Math.sqrt(t.reduce(((t,i,e)=>t+(i-s[e])**2),0))}init(t){this._x=t}add(){let t=null;for(;;){const s=Math.floor(Math.random()*this._x.length);if(t=this._x[s],this._c.every((s=>this._distance(t,s)>0)))break}this._c.push(t.concat())}_responsibility(){const t=[];for(let s=0;s<this._x.length;s++){let i=0;const e=[];for(let t=0;t<this._c.length;t++)e[t]=Math.exp(-this._beta*this._distance(this._c[t],this._x[s])),i+=e[t];t.push(e.map((t=>t/i)))}return t}fit(){const t=this._responsibility();for(let s=0;s<this._c.length;s++){const i=Array(this._c[s].length).fill(0);let e=0;for(let h=0;h<t.length;h++){for(let e=0;e<this._x[h].length;e++)i[e]+=t[h][s]*this._x[h][e];e+=t[h][s]}this._c[s]=i.map((t=>t/e))}}predict(){return this._responsibility()}}