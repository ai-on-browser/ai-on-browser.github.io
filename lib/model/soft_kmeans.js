import{Matrix}from"../util/math.js";export default class SoftKMeans{constructor(t=1){this._beta=t,this._c=[]}_distance(t,i){return Math.sqrt(t.reduce(((t,s,e)=>t+(s-i[e])**2),0))}init(t){this._x=t}add(){let t=null;for(;;){const i=Math.floor(Math.random()*this._x.length);if(t=this._x[i],this._c.every((i=>this._distance(t,i)>0)))break}this._c.push(t.concat())}_responsibility(){const t=[];for(let i=0;i<this._x.length;i++){let s=0;const e=[];for(let t=0;t<this._c.length;t++)e[t]=Math.exp(-this._beta*this._distance(this._c[t],this._x[i])),s+=e[t];t.push(e.map((t=>t/s)))}return t}fit(){const t=this._responsibility();for(let i=0;i<this._c.length;i++){const s=Array(this._c[i].length).fill(0);let e=0;for(let h=0;h<t.length;h++){for(let e=0;e<this._x[h].length;e++)s[e]+=t[h][i]*this._x[h][e];e+=t[h][i]}this._c[i]=s.map((t=>t/e))}}predict(){return Matrix.fromArray(this._responsibility()).argmax(1).value}}