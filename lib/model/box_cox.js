export default class BoxCox{constructor(t=null){this._lambda=t,this._lambda_cand=[];for(let t=0;t<=200;t++)this._lambda_cand.push((t-100)/10)}_cdf(t){return 1/(1+Math.exp(-1.7*t))}_ppf(t){if(t>=1)return 1/0;if(.5===t)return 0;if(t<.5)return-this._ppf(1-t);let r=0,a=null,s=1;let l=1e4;for(;l-- >0;){const l=this._cdf(s);if(Math.abs(l-t)<1e-8)return s;t<l?(a=s,s=(s+r)/2):(r=s,s=null===a?2*s:(s+a)/2)}throw"loop converged"}_j(t,r){const a=t.length,s=t.map((t=>this._t(t,r)));s.sort(((t,r)=>t-r));const l=s.reduce(((t,r)=>t+r),0)/a,e=Math.sqrt(s.reduce(((t,r)=>t+(r-l)**2),0)/a);let i=0;for(let t=0;t<a;t++)i+=(this._ppf((t+.5)/a)-(s[t]-l)/e)**2;return i}_t(t,r){return 0===r?Math.log(t):(t**r-1)/r}fit(t){const r=[];if(Array.isArray(t[0]))for(let a=0;a<t[0].length;a++)r[a]=t.map((t=>t[a]));else r[0]=t;this._lambda=[];for(let t=0;t<r.length;t++){let a=1/0,s=0;for(const l of this._lambda_cand){const e=this._j(r[t],l);e<a&&(a=e,s=l)}this._lambda.push(s)}}predict(t){return t.map((t=>Array.isArray(t)?Array.isArray(this._lambda)?t.map(((t,r)=>this._t(t,this._lambda[r]))):t.map((t=>this._t(t,this._lambda))):Array.isArray(this._lambda)?this._t(t,this._lambda[0]):this._t(t,this._lambda)))}}