import Matrix from"../util/matrix.js";export class Ridge{constructor(t=.1){this._w=null,this._lambda=t}fit(t,r){t=Matrix.fromArray(t),r=Matrix.fromArray(r);const s=t.tDot(t);for(let t=0;t<s.rows;t++)s.addAt(t,t,this._lambda);this._w=s.solve(t.t).dot(r)}predict(t){return(t=Matrix.fromArray(t)).dot(this._w).toArray()}importance(){return this._w.value}}export class MulticlassRidge{constructor(t=.1){this._w=null,this._lambda=t,this._classes=[]}get categories(){return this._classes}fit(t,r){t=Matrix.fromArray(t),this._classes=[...new Set(r)];const s=new Matrix(r.length,this._classes.length,-1);for(let t=0;t<r.length;t++)s.set(t,this._classes.indexOf(r[t]),1);const e=t.tDot(t);for(let t=0;t<e.rows;t++)e.addAt(t,t,this._lambda);this._w=e.solve(t.t).dot(s)}predict(t){return(t=Matrix.fromArray(t)).dot(this._w).argmax(1).value.map((t=>this._classes[t]))}importance(){return this._w.toArray()}}export class KernelRidge{constructor(t=.1,r="gaussian"){this._w=null,this._x=null,this._lambda=t,this._kernel=null,"function"==typeof r?this._kernel=(t,s)=>r(t.value,s.value):"gaussian"===r&&(this._kernel=(t,r,s=1)=>{const e=Matrix.sub(t,r).reduce(((t,r)=>t+r*r),0);return Math.exp(-e/s**2)})}fit(t,r){t=Matrix.fromArray(t),r=Matrix.fromArray(r);const s=new Matrix(t.rows,t.rows);this._x=[];for(let r=0;r<t.rows;r++){this._x.push(t.row(r)),s.set(r,r,this._kernel(this._x[r],this._x[r])+this._lambda);for(let t=0;t<r;t++){const e=this._kernel(this._x[r],this._x[t]);s.set(r,t,e),s.set(t,r,e)}}this._w=s.solve(r)}predict(t){t=Matrix.fromArray(t);const r=new Matrix(t.rows,this._x.length);for(let s=0;s<t.rows;s++){const e=t.row(s);for(let t=0;t<this._x.length;t++){const i=this._kernel(e,this._x[t]);r.set(s,t,i)}}return r.dot(this._w).toArray()}importance(){return this._w.value}}