var h=Object.defineProperty;var l=(a,t)=>h(a,"name",{value:t,configurable:!0});import o from"../util/matrix.js";export class Ridge{static{l(this,"Ridge")}constructor(t=.1){this._w=null,this._lambda=t}fit(t,s){t=o.fromArray(t),s=o.fromArray(s);const i=t.tDot(t);for(let r=0;r<i.rows;r++)i.addAt(r,r,this._lambda);this._w=i.solve(t.t).dot(s)}predict(t){return t=o.fromArray(t),t.dot(this._w).toArray()}importance(){return this._w.value}}export class MulticlassRidge{static{l(this,"MulticlassRidge")}constructor(t=.1){this._w=null,this._lambda=t,this._classes=[]}get categories(){return this._classes}fit(t,s){t=o.fromArray(t),this._classes=[...new Set(s)];const i=new o(s.length,this._classes.length,-1);for(let e=0;e<s.length;e++)i.set(e,this._classes.indexOf(s[e]),1);const r=t.tDot(t);for(let e=0;e<r.rows;e++)r.addAt(e,e,this._lambda);this._w=r.solve(t.t).dot(i)}predict(t){return t=o.fromArray(t),t.dot(this._w).argmax(1).value.map(s=>this._classes[s])}importance(){return this._w.toArray()}}const _={gaussian:l(({s:a=1})=>(t,s)=>{const i=o.sub(t,s).reduce((r,e)=>r+e*e,0);return Math.exp(-i/a**2)},"gaussian")};export class KernelRidge{static{l(this,"KernelRidge")}constructor(t=.1,s="gaussian"){this._w=null,this._x=null,this._lambda=t,this._kernel=null,typeof s=="function"?this._kernel=(i,r)=>s(i.value,r.value):(typeof s=="string"&&(s={name:s}),this._kernel=_[s.name](s))}fit(t,s){t=o.fromArray(t),s=o.fromArray(s);const i=new o(t.rows,t.rows);this._x=[];for(let r=0;r<t.rows;r++){this._x.push(t.row(r)),i.set(r,r,this._kernel(this._x[r],this._x[r])+this._lambda);for(let e=0;e<r;e++){const n=this._kernel(this._x[r],this._x[e]);i.set(r,e,n),i.set(e,r,n)}}this._w=i.solve(s)}predict(t){t=o.fromArray(t);const s=new o(t.rows,this._x.length);for(let i=0;i<t.rows;i++){const r=t.row(i);for(let e=0;e<this._x.length;e++){const n=this._kernel(r,this._x[e]);s.set(i,e,n)}}return s.dot(this._w).toArray()}importance(){return this._w.value}}
