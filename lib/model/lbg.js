import Matrix from"../util/matrix.js";import{KMeans}from"./kmeans.js";export default class LBG{constructor(){this._centroids=[]}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(t,r){return Math.sqrt(t.reduce(((t,s,e)=>t+(s-r[e])**2),0))}clear(){this._centroids=[]}fit(t){const r=Matrix.fromArray(t);if(0===this._centroids.length)return void(this._centroids=r.mean(0).toArray());const s=[],e=Matrix.div(Matrix.sub(r.max(0),r.min()),100).value;for(const t of this._centroids){const r=t.concat(),i=t.concat();for(let t=0;t<e.length;t++)r[t]+=e[t],i[t]-=e[t];s.push(r,i)}const i=new KMeans;for(i._centroids=s;i.fit(t)>0;)this._centroids=i.centroids}predict(t){if(0!==this._centroids.length)return t.map((t=>{let r=1/0,s=-1;for(let e=0;e<this._centroids.length;e++){const i=this._distance(t,this._centroids[e]);i<r&&(r=i,s=e)}return s}))}}