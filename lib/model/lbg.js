var l=Object.defineProperty;var f=(d,e)=>l(d,"name",{value:e,configurable:!0});import c from"../util/matrix.js";import{KMeans as _}from"./kmeans.js";export default class m{static{f(this,"LBG")}constructor(){this._centroids=[]}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(e,i){return Math.sqrt(e.reduce((n,r,t)=>n+(r-i[t])**2,0))}clear(){this._centroids=[]}fit(e){const i=c.fromArray(e);if(this._centroids.length===0){this._centroids=i.mean(0).toArray();return}const n=[],r=c.div(c.sub(i.max(0),i.min()),100).value;for(const o of this._centroids){const h=o.concat(),a=o.concat();for(let s=0;s<r.length;s++)h[s]+=r[s],a[s]-=r[s];n.push(h,a)}const t=new _;for(t._centroids=n;t.fit(e)>0;)this._centroids=t.centroids}predict(e){if(this._centroids.length===0)throw new Error("Call fit before predict.");return e.map(i=>{let n=1/0,r=-1;for(let t=0;t<this._centroids.length;t++){const o=this._distance(i,this._centroids[t]);o<n&&(n=o,r=t)}return r})}}
