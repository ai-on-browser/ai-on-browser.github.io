import Matrix from"../util/matrix.js";import{KMeans}from"./kmeans.js";export default class LBG{constructor(){this._centroids=[]}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(t,r){return Math.sqrt(t.reduce(((t,e,i)=>t+(e-r[i])**2),0))}clear(){this._centroids=[]}fit(t){const r=Matrix.fromArray(t);if(0===this._centroids.length)return void(this._centroids=r.mean(0).toArray());const e=[],i=Matrix.div(Matrix.sub(r.max(0),r.min()),100).value;for(const t of this._centroids){const r=t.concat(),s=t.concat();for(let t=0;t<i.length;t++)r[t]+=i[t],s[t]-=i[t];e.push(r,s)}const s=new KMeans;for(s._centroids=e;s.fit(t)>0;)this._centroids=s.centroids}predict(t){if(0===this._centroids.length)throw new Error("Call fit before predict.");return t.map((t=>{let r=1/0,e=-1;for(let i=0;i<this._centroids.length;i++){const s=this._distance(t,this._centroids[i]);s<r&&(r=s,e=i)}return e}))}}