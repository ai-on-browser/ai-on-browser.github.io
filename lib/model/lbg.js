import{Matrix}from"../util/math.js";import{KMeansModel}from"./kmeans.js";const argmin=function(t,n){return 0===t.length?-1:(t=n?t.map(n):t).indexOf(Math.min(...t))};export default class LBG{constructor(){this._centroids=[]}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(t,n){return Math.sqrt(t.reduce(((t,r,e)=>t+(r-n[e])**2),0))}clear(){this._centroids=[]}fit(t){const n=Matrix.fromArray(t);if(0===this._centroids.length)return void(this._centroids=n.mean(0).toArray());const r=[],e=n.max(0).copySub(n.min()).copyDiv(100).value;for(const t of this._centroids){const n=t.concat(),i=t.concat();for(let t=0;t<e.length;t++)n[t]+=e[t],i[t]-=e[t];r.push(n,i)}const i=new KMeansModel;for(i._centroids=r;i.fit(t)>0;)this._centroids=i.centroids}predict(t){if(0!==this._centroids.length)return t.map((t=>{return n=this._centroids,r=n=>this._distance(t,n),0===n.length?-1:(n=r?n.map(r):n).indexOf(Math.min(...n));var n,r}))}}