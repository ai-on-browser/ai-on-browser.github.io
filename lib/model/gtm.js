var z=Object.defineProperty;var u=(d,h)=>z(d,"name",{value:h,configurable:!0});import o from"../util/matrix.js";export default class y{static{u(this,"GTM")}constructor(h,e,i=20,t=10){this.in_size=h,this.out_size=e,this._k=i,this._lambda=.001,this._w=null,this._b=1,this._init_method="PCA",this._fit_method="mean",this._epoch=0,this._z=this._make_grid(Array(e).fill(this._k)),this._t=this._make_grid(Array(e).fill(t))}_make_grid(h){const e=[],i=Array(h.length).fill(0);do{e.push(i.map((t,s)=>2*t/(h[s]-1)-1));for(let t=h.length-1;t>=0&&(i[t]++,!(i[t]<h[t]));t--)i[t]=0}while(i.reduce((t,s)=>t+s,0)>0);return e}_phi(h,e=null,i=Math.SQRT2){if(e===null){const t=[];for(let s=0;s<this._t.length;s++)t.push(this._phi(h,s,i));return t}return Math.exp(-this._t[e].reduce((t,s,n)=>t+(s-h[n])**2,0)/(2*i**2))}_prob(h,e){const i=[],s=o.fromArray(this._phi(e)).tDot(this._w).value,n=(this._b/(2*Math.PI))**(h[0].length/2);for(let r=0;r<h.length;r++){const c=s.reduce((a,p,m)=>a+(p-h[r][m])**2,0);i[r]=n*Math.exp(-this._b*c/2)}return i}probability(h){const e=Array(h.length).fill(0);for(let i=0;i<this._z.length;i++){const t=this._prob(h,this._z[i]);for(let s=0;s<t.length;s++)e[s]+=t[s]}return e.map(i=>i/this._z.length)}responsibility(h){const e=new o(h.length,this._z.length);for(let t=0;t<this._z.length;t++){const s=this._prob(h,this._z[t]);for(let n=0;n<s.length;n++)e.set(n,t,s[n])}const i=e.sum(1);for(let t=0;t<h.length;t++)if(i.at(t,0)===0){i.set(t,0,1);for(let s=0;s<this._z.length;s++)e.set(t,s,1/this._z.length)}return e.div(i),e}fit(h){const e=h,i=e.length,t=this.in_size;if(!this._w){if(this._init_method==="random")this._w=o.randn(this._t.length,t);else if(this._init_method==="PCA"){const l=new o(i,t,h),_=l.cov(),[g,b]=_.eigen(),f=new o(1,g.length,g.map(w=>Math.sqrt(w)));f.repeat(this._t.length,0),f.mult(l.block(0,0,this._t.length,g.length)),this._w=f.dot(b.t)}}const s=this.responsibility(e),n=o.fromArray(this._z.map(l=>this._phi(l))),r=o.mult(n,s.sum(0).t).tDot(n);r.add(o.eye(r.cols,r.cols,this._lambda/this._b));const c=o.fromArray(e),a=r.solve(n.tDot(s.tDot(c))),p=new o(i,this._z.length),m=n.dot(a);for(let l=0;l<i;l++){const _=o.sub(m,c.row(l));_.mult(_),p.set(l,0,_.sum(1).t)}this._b=i*t/o.mult(s,p).sum(),this._w=a.slice(0,this._t.length),this._epoch++}predictIndex(h){return this.responsibility(h).argmax(1).value}predict(h){const e=this.responsibility(h);if(this._fit_method==="mode")return e.argmax(1).value.map(i=>this._z[i]);{e.div(e.sum(1));const i=[];for(let t=0;t<h.length;t++){const s=Array(this._z[0].length).fill(0);for(let n=0;n<this._z.length;n++)for(let r=0;r<s.length;r++)s[r]+=this._z[n][r]*e.at(t,n);i.push(s)}return i}}}
