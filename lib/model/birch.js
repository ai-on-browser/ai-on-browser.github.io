var o=Object.defineProperty;var a=(f,t)=>o(f,"name",{value:t,configurable:!0});import{KMeanspp as p}from"./kmeans.js";class l{static{a(this,"CFTree")}constructor(t=10,s=.2,h=1/0){this._b=t,this._l=h,this._t=s,this._datas=[],this._children=[],this._parent=null}get size(){return this._datas.length}get length(){return this._children.length}get depth(){return this.isLeaf()?1:this._children.reduce((t,s)=>Math.max(t,s.depth+1),-1/0)}get cf(){if(this._cf)return this._cf;if(this.isLeaf()){const t=this._datas.length;if(t===0)this._cf={n:0,ls:null,ss:0};else{const s=Array(this._datas[0].length).fill(0);let h=0;for(let i=0;i<t;i++)for(let e=0;e<this._datas[i].length;e++)s[e]+=this._datas[i][e],h+=this._datas[i][e]**2;this._cf={n:t,ls:s,ss:h}}}else{this._cf={n:this._children[0].cf.n,ls:this._children[0].cf.ls.concat(),ss:this._children[0].cf.ss};for(let t=1;t<this.length;t++){const s=this._children[t].cf;this._cf.n+=s.n,this._cf.ss+=s.ss;for(let h=0;h<s.ls.length;h++)this._cf.ls[h]+=s.ls[h]}}return this._cf}get r(){if(this._r)return this._r;if(this.isLeaf()){const t=this._datas.length;if(t<=1)this._r=1/0;else{let s=0;for(let h=0;h<t;h++){const i=this._datas[h];for(let e=0;e<h;e++)s+=2*this._datas[e].reduce((n,r,_)=>n+(r-i[_])**2,0)}this._r=Math.sqrt(s/(t*(t-1)))}}else this._r=this._children.reduce((t,s)=>Math.max(t,s.r),-1/0);return this._r}get c(){return this.cf.ls.map(t=>t/this.cf.n)}at(t){return this._children[t]}isRoot(){return this._parent===null}isLeaf(){return this._children.length===0}push(t){if(this._cf=null,this._r=null,!this.isLeaf()){let s=1/0,h=-1;for(let i=0;i<this.length;i++){const e=this._children[i].c,n=t.reduce((r,_,c)=>r+(_-e[c])**2,0);n<s&&(s=n,h=i)}this._children[h].push(t),this._children.length>=this._b&&this._separate();return}this._datas.push(t),!(this._datas.length<=2)&&(this._datas.length>=this._l||this.r>this._t)&&this._separate()}_separate(){const t=this.isLeaf()?this._datas:this._children.map(i=>i.c),s=new p;for(s.add(t),s.add(t);s.fit(t)>0;);const h=s.predict(t);if(this.isLeaf())if(this.isRoot()){const i=new l(this._b,this._t,this._l);i._datas=t.filter((n,r)=>h[r]===0),i._parent=this;const e=new l(this._b,this._t,this._l);e._datas=t.filter((n,r)=>h[r]===1),e._parent=this,this._children=[i,e],this._datas=null}else{const i=new l(this._b,this._t,this._l);i._datas=t.filter((e,n)=>h[n]===1),i._parent=this._parent,this._parent._children.push(i),this._datas=t.filter((e,n)=>h[n]===0)}else if(this.isRoot()){const i=new l(this._b,this._t,this._l);i._children=this._children.filter((n,r)=>h[r]===0),i._children.forEach(n=>n._parent=i),i._parent=this;const e=new l(this._b,this._t,this._l);e._children=this._children.filter((n,r)=>h[r]===1),e._children.forEach(n=>n._parent=e),e._parent=this,this._children=[i,e]}else{const i=new l(this._b,this._t,this._l);i._children=this._children.filter((e,n)=>h[n]===1),i._children.forEach(e=>e._parent=i),i._parent=this._parent,this._parent._children.push(i),this._children=this._children.filter((e,n)=>h[n]===0)}}}export default class u{static{a(this,"BIRCH")}constructor(t,s=10,h=.2,i=1/0){this._k=t,this._tree=new l(s,h,i)}fit(t){for(let s=0;s<t.length;s++)this._tree.push(t[s])}predict(t){if(this._tree.isLeaf())return Array(t.length).fill(0);const s=this._tree._children.map(h=>h.c);return t.map(h=>{let i=1/0,e=-1;for(let n=0;n<s.length;n++){const r=h.reduce((_,c,d)=>_+(c-s[n][d])**2,0);r<i&&(i=r,e=n)}return e})}}
