export default class COF{constructor(t){this._k=t}_distance(t,e){return Math.sqrt(t.reduce(((t,l,n)=>t+(l-e[n])**2),0))}predict(t){const e=[];for(let l=0;l<t.length;l++){e[l]=[],e[l][l]=0;for(let n=0;n<l;n++){const s=this._distance(t[l],t[n]);e[l][n]=e[n][l]=s}}const l=[],n=[];for(let s=0;s<t.length;s++){const t=e[s].map(((t,e)=>[t,e]));t.sort(((t,e)=>t[0]-e[0]));const o=t.slice(1,this._k+1).map((t=>t[1]));n[s]=o.concat();const r=[s],c=[];for(let t=0;t<this._k;t++){let t=[-1,-1],l=1/0;for(let n=0;n<r.length;n++)for(let s=0;s<o.length;s++)e[r[n]][o[s]]<l&&(l=e[r[n]][o[s]],t=[n,s]);r.push(o[t[1]]),c.push([r[t[0]],o[t[1]]]),o.splice(t[1],1)}const h=c.length+1;let f=0;for(let t=0;t<c.length;t++)f+=2/h*(h-t-1)*e[c[t][0]][c[t][1]];l[s]=f/(h-1)}const s=[];for(let t=0;t<l.length;t++){let e=0;for(let s=0;s<n[t].length;s++)e+=l[n[t][s]];s[t]=n[t].length*l[t]/e}return s}}