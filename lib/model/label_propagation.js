import Matrix from"../util/matrix.js";export default class LabelPropagation{constructor(t="rbf",s=.1,i=1/0){this._k=i,this._sigma=s,this._affinity=t}_affinity_matrix(t){const s=t.rows,i=Matrix.zeros(s,s);for(let r=0;r<s;r++)for(let a=r+1;a<s;a++){let s=Matrix.sub(t.row(r),t.row(a)).norm();i.set(r,a,s),i.set(a,r,s)}const r=Matrix.zeros(s,s);if(this._k>=s)r.fill(1);else if(this._k>0){for(let t=0;t<s;t++){const s=i.row(t).value.map(((t,s)=>[t,s]));s.sort(((t,s)=>t[0]-s[0]));for(let i=1;i<Math.min(this._k+1,s.length);i++)r.set(t,s[i][1],1)}r.add(r.t),r.div(2)}return"rbf"===this._affinity?Matrix.map(i,((t,s)=>r.at(s)>0?Math.exp(-(t**2)/this._sigma**2):0)):"knn"===this._affinity?Matrix.map(r,(t=>t>0?1:0)):void 0}init(t,s){const i=(t=Matrix.fromArray(t)).rows;this._y=s;const r=new Set;for(let t=0;t<i;t++)null!=this._y[t]&&r.add(this._y[t]);this._classes=[...r],this._w=this._affinity_matrix(t),this._probs=Matrix.zeros(i,this._classes.length);for(let t=0;t<i;t++)null!=this._y[t]&&this._probs.set(t,this._classes.indexOf(this._y[t]),1)}fit(){const t=this._w.dot(this._probs);t.div(t.sum(1));for(let s=0;s<this._y.length;s++)null==this._y[s]&&this._probs.set(s,0,t.row(s))}predict(){return this._probs.argmax(1).value.map((t=>this._classes[t]))}}