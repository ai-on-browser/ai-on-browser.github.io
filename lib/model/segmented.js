import Matrix from"../util/matrix.js";export default class SegmentedRegression{constructor(t=3){this._b=null,this._seg=t,this._r=40}fit(t,e){t=t.map((t=>t[0])),e=Matrix.fromArray(e);const s=t.length;let r=1/0,n=-1/0;for(let e=0;e<s;e++)r=Math.min(r,t[e]),n=Math.max(n,t[e]);const o=[];for(let t=0;t<this._r;t++)o.push(r+t*(n-r)/this._r);o.push(n);const l=Array.from({length:this._seg-1},((t,e)=>e));let h=1/0,i=null,a=null;const g=Matrix.ones(s,l.length+2);for(let e=0;e<s;e++)g.set(e,1,t[e]);do{for(let e=0;e<s;e++){const s=t[e];for(let t=0;t<l.length;t++)g.set(e,t+2,Math.max(0,s-o[l[t]]))}const r=g.tDot(g).solve(g.tDot(e)),n=g.dot(r);n.sub(e);const _=n.norm();_<h&&(h=_,i=r,a=l.map((t=>o[t])))}while(this._next_idx(l,o.length));this._w=i,this._seps=a}_next_idx(t,e){for(let s=t.length-1;s>=0;s--)if(t[s]++,t[s]<=e-t.length+s){for(let e=s+1;e<t.length;e++)t[e]=t[s]+e-s;break}return t[t.length-1]<e}predict(t){const e=t.length,s=new Matrix(e,this._seps.length+2);for(let r=0;r<e;r++){const e=t[r][0];s.set(r,0,1),s.set(r,1,e);for(let t=0;t<this._seps.length;t++)s.set(r,t+2,Math.max(0,e-this._seps[t]))}return s.dot(this._w).toArray()}}