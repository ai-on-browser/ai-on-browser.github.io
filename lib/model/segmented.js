var M=Object.defineProperty;var w=(m,t)=>M(m,"name",{value:t,configurable:!0});import g from"../util/matrix.js";export default class k{static{w(this,"SegmentedRegression")}constructor(t=3){this._b=null,this._seg=t,this._r=40}fit(t,i){t=t.map(s=>s[0]),i=g.fromArray(i);const e=t.length;let n=1/0,l=-1/0;for(let s=0;s<e;s++)n=Math.min(n,t[s]),l=Math.max(l,t[s]);const o=[];for(let s=0;s<this._r;s++)o.push(n+s*(l-n)/this._r);o.push(l);const _=Array.from({length:this._seg-1},(s,f)=>f);let p=1/0,x=null,u=null;const r=g.ones(e,_.length+2);for(let s=0;s<e;s++)r.set(s,1,t[s]);do{for(let h=0;h<e;h++){const b=t[h];for(let c=0;c<_.length;c++)r.set(h,c+2,Math.max(0,b-o[_[c]]))}const f=r.tDot(r).solve(r.tDot(i)),a=r.dot(f);a.sub(i);const d=a.norm();d<p&&(p=d,x=f,u=_.map(h=>o[h]))}while(this._next_idx(_,o.length));this._w=x,this._seps=u}_next_idx(t,i){for(let e=t.length-1;e>=0;e--)if(t[e]++,t[e]<=i-t.length+e){for(let n=e+1;n<t.length;n++)t[n]=t[e]+n-e;break}return t[t.length-1]<i}predict(t){const i=t.length,e=new g(i,this._seps.length+2);for(let n=0;n<i;n++){const l=t[n][0];e.set(n,0,1),e.set(n,1,l);for(let o=0;o<this._seps.length;o++)e.set(n,o+2,Math.max(0,l-this._seps[o]))}return e.dot(this._w).toArray()}}
