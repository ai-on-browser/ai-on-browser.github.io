var m=Object.defineProperty;var f=(l,s)=>m(l,"name",{value:s,configurable:!0});import p from"../util/matrix.js";import{KMeans as M}from"./kmeans.js";const v=[[.514,.578,.683,.779,.926],[.528,.591,.704,.815,.969],[.546,.616,.735,.861,1.021],[.559,.631,.754,.884,1.047],[.576,.656,.787,.918,1.092]],w=f((l,s)=>{l.sort((c,h)=>c-h);const t=l.length,e=l.reduce((c,h)=>c+h,0)/t,i=l.reduce((c,h)=>c+(h-e)**2,0)/(t-1),n=Math.sqrt(i),r=l.map(c=>(c-e)/n).map(c=>1/(1+Math.exp(-1.7*c)));let u=0;for(let c=0;c<t;c++)u+=(2*(c+1)-1)*(Math.log(r[c])+Math.log(1-r[t-c-1]));const d=(-t-u/t)*(1+4/t-25/t**2),_=v[t<=10?0:t<=20?1:t<=50?2:t<=100?3:4][s===15?0:s===10?1:s===5?2:s===2.5?3:s===1?4:-1];return d<=_},"AndersonDarling");export default class z{static{f(this,"GMeans")}constructor(){this._centroids=[],this._init_k=2}get centroids(){return this._centroids}get size(){return this._centroids.length}_distance(s,t){return Math.sqrt(s.reduce((e,i,n)=>e+(i-t[n])**2,0))}clear(){this._centroids=[]}fit(s,t=-1){let e=null;this._centroids.length===0?(e=this._split_cluster(s,this._init_k),t--):e=this._create_clusters(this,s);const i=[];for(;e.length>0&&(t<0||t-- >0);){const n=[];for(;e.length>0;){const o=e.shift();if(o.size<=3){i.push(o.centroid);continue}const r=p.fromArray(o.data),[u,a]=r.cov().eigenPowerIteration();a.mult(Math.sqrt(2*u/Math.PI));const d=p.mult(a,2),_=r.dot(d);if(_.div(d.norm()),w(_.value,5))i.push(o.centroid);else{const[h,g]=this._split_cluster(o.data);n.push(h,g)}}e=n}e.length>0&&i.push(...e.map(n=>n.centroid)),this._centroids=i}_split_cluster(s,t=2){const e=new M;for(let i=0;i<t;i++)e.add(s);for(;e.fit(s)>0;);return this._create_clusters(e,s)}_create_clusters(s,t){const e=s.size,i=s.predict(t),n=[];for(let r=0;r<e;n[r++]=[]);t.forEach((r,u)=>n[i[u]].push(r));const o=[];for(let r=0;r<e;r++)o[r]={size:n[r].length,data:n[r],centroid:s.centroids[r]};return o}predict(s){if(this._centroids.length===0)throw new Error("Call fit before predict.");return s.map(t=>{let e=1/0,i=-1;for(let n=0;n<this._centroids.length;n++){const o=this._distance(t,this._centroids[n]);o<e&&(e=o,i=n)}return i})}}
