export default class KernelizedPegasos{constructor(t,s="gaussian"){switch(this._r=t,s){case"gaussian":this._s=1,this._kernel=(t,s)=>Math.exp(-(t.reduce(((t,i,h)=>t+(i-s[h])**2),0)**2)/this._s**2);break;case"polynomial":this._d=2,this._kernel=(t,s)=>(1+t.reduce(((t,i,h)=>t+i*s[h])))**this._d}}init(t,s){this._x=t,this._y=s,this._t=0,this._a=Array(this._x.length).fill(0)}fit(){for(let t=0;t<this._x.length;t++){this._t++;const s=1/(this._r*this._t);let i=0;for(let s=0;s<this._x.length;s++)i+=this._a[s]*this._y[s]*this._kernel(this._x[t],this._x[s]);this._y[t]*s*i<1&&this._a[t]++}}predict(t){const s=[];for(let i=0;i<t.length;i++){let h=0;for(let s=0;s<this._x.length;s++)h+=this._a[s]*this._y[s]*this._kernel(t[i],this._x[s]);s.push(h<=0?-1:1)}return s}}