export default class RandomForest{constructor(t,e=.8,s,r=null){this._trees=[],this._treenum=t,this._samplingRate=e,this._treeclass=s,this._tree_class_args=r||[]}get depth(){return Math.max(...this._trees.map((t=>t.depth)))}_sample(t){const e=[];for(let s=0;s<t;s++)e[s]=s;for(let s=t-1;s>0;s--){const t=Math.floor(Math.random()*(s+1));[e[s],e[t]]=[e[t],e[s]]}return e.slice(0,Math.ceil(t*this._samplingRate))}init(t,e){this._trees=[];for(let s=0;s<this._treenum;s++){const s=this._sample(t.length),r=[],h=[];for(let i=0;i<s.length;i++)r.push(t[s[i]]),h.push(e[s[i]]);const i=new this._treeclass(...this._tree_class_args);i.init(r,h),this._trees.push(i)}}fit(){this._trees.forEach((t=>t.fit()))}predict_prob(t){const e=this._trees.map((e=>e.predict_prob(t))),s=[];for(let r=0;r<t.length;r++){const t=new Map;for(let s=0;s<e.length;s++)e[s][r].forEach(((e,s)=>{t.set(s,(t.get(s)||0)+e)}));t.forEach(((s,r)=>{t.set(r,s/e.length)})),s.push(t)}return s}predict(t){if(this._trees[0].predict_prob){return this.predict_prob(t).map((t=>{let e=0,s=-1;return t.forEach(((t,r)=>{t>e&&(e=t,s=r)})),s}))}{const e=this._trees.map((e=>e.predict(t))),s=[];for(let r=0;r<t.length;r++)s.push(e.reduce(((t,e)=>t+e[r]),0)/e.length);return s}}}