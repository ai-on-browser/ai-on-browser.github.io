import{DecisionTreeClassifier,DecisionTreeRegression}from"./decision_tree.js";class RandomForest{constructor(e,t=.8,r,s=null){this._samplingRate=t,this._trees=[];for(let t=0;t<e;t++){const e=new r(...s||[]);this._trees.push(e)}}get depth(){return Math.max(...this._trees.map((e=>e.depth)))}_sample(e){const t=Array.from({length:e},((e,t)=>t));for(let r=e-1;r>0;r--){const e=Math.floor(Math.random()*(r+1));[t[r],t[e]]=[t[e],t[r]]}return t.slice(0,Math.ceil(e*this._samplingRate))}init(e,t){for(let r=0;r<this._trees.length;r++){const s=this._sample(e.length),o=[],i=[];for(let r=0;r<s.length;r++)o.push(e[s[r]]),i.push(t[s[r]]);this._trees[r].init(o,i)}}fit(){this._trees.forEach((e=>e.fit()))}predict_prob(e){const t=this._trees.map((t=>t.predict_prob(e))),r=[];for(let s=0;s<e.length;s++){const e=new Map;for(let r=0;r<t.length;r++)t[r][s].forEach(((t,r)=>{e.set(r,(e.get(r)||0)+t)}));e.forEach(((r,s)=>{e.set(s,r/t.length)})),r.push(e)}return r}}export class RandomForestClassifier extends RandomForest{constructor(e,t=.8,r="CART"){super(e,t,DecisionTreeClassifier,[r])}predict(e){return this.predict_prob(e).map((e=>{let t=0,r=-1;return e.forEach(((e,s)=>{e>t&&(t=e,r=s)})),r}))}}export class RandomForestRegressor extends RandomForest{constructor(e,t=.8){super(e,t,DecisionTreeRegression)}predict(e){const t=this._trees.map((t=>t.predict(e))),r=[];for(let s=0;s<e.length;s++)r.push(t.reduce(((e,t)=>e+t[s]),0)/t.length);return r}}