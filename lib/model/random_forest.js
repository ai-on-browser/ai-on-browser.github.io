var a=Object.defineProperty;var h=(c,t)=>a(c,"name",{value:t,configurable:!0});import{DecisionTreeClassifier as f,DecisionTreeRegression as m}from"./decision_tree.js";class l{static{h(this,"RandomForest")}constructor(t,s=.8,r,e=null){this._samplingRate=s,this._trees=[];for(let o=0;o<t;o++){const i=new r(...e||[]);this._trees.push(i)}}get depth(){return Math.max(...this._trees.map(t=>t.depth))}_sample(t){const s=Array.from({length:t},(r,e)=>e);for(let r=t-1;r>0;r--){const e=Math.floor(Math.random()*(r+1));[s[r],s[e]]=[s[e],s[r]]}return s.slice(0,Math.ceil(t*this._samplingRate))}init(t,s){for(let r=0;r<this._trees.length;r++){const e=this._sample(t.length),o=[],i=[];for(let n=0;n<e.length;n++)o.push(t[e[n]]),i.push(s[e[n]]);this._trees[r].init(o,i)}}fit(){this._trees.forEach(t=>t.fit())}predict_prob(t){const s=this._trees.map(e=>e.predict_prob(t)),r=[];for(let e=0;e<t.length;e++){const o=new Map;for(let i=0;i<s.length;i++)s[i][e].forEach((n,p)=>{o.set(p,(o.get(p)||0)+n)});o.forEach((i,n)=>{o.set(n,i/s.length)}),r.push(o)}return r}}export class RandomForestClassifier extends l{static{h(this,"RandomForestClassifier")}constructor(t,s=.8,r="CART"){super(t,s,f,[r])}predict(t){return this.predict_prob(t).map(r=>{let e=0,o=-1;return r.forEach((i,n)=>{i>e&&(e=i,o=n)}),o})}}export class RandomForestRegressor extends l{static{h(this,"RandomForestRegressor")}constructor(t,s=.8){super(t,s,m)}predict(t){const s=this._trees.map(e=>e.predict(t)),r=[];for(let e=0;e<t.length;e++)r.push(s.reduce((o,i)=>o+i[e],0)/s.length);return r}}
