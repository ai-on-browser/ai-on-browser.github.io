import{DecisionTreeClassifier,DecisionTreeRegression}from"./decision_tree.js";class RandomForest{constructor(e,t=.8,s,r=null){this._samplingRate=t,this._trees=[];for(let t=0;t<e;t++){const e=new s(...r||[]);this._trees.push(e)}}get depth(){return Math.max(...this._trees.map((e=>e.depth)))}_sample(e){const t=[];for(let s=0;s<e;s++)t[s]=s;for(let s=e-1;s>0;s--){const e=Math.floor(Math.random()*(s+1));[t[s],t[e]]=[t[e],t[s]]}return t.slice(0,Math.ceil(e*this._samplingRate))}init(e,t){for(let s=0;s<this._trees.length;s++){const r=this._sample(e.length),o=[],i=[];for(let s=0;s<r.length;s++)o.push(e[r[s]]),i.push(t[r[s]]);this._trees[s].init(o,i)}}fit(){this._trees.forEach((e=>e.fit()))}predict_prob(e){const t=this._trees.map((t=>t.predict_prob(e))),s=[];for(let r=0;r<e.length;r++){const e=new Map;for(let s=0;s<t.length;s++)t[s][r].forEach(((t,s)=>{e.set(s,(e.get(s)||0)+t)}));e.forEach(((s,r)=>{e.set(r,s/t.length)})),s.push(e)}return s}}export class RandomForestClassifier extends RandomForest{constructor(e,t=.8,s="CART"){super(e,t,DecisionTreeClassifier,[s])}predict(e){return this.predict_prob(e).map((e=>{let t=0,s=-1;return e.forEach(((e,r)=>{e>t&&(t=e,s=r)})),s}))}}export class RandomForestRegressor extends RandomForest{constructor(e,t=.8){super(e,t,DecisionTreeRegression)}predict(e){const t=this._trees.map((t=>t.predict(e))),s=[];for(let r=0;r<e.length;r++)s.push(t.reduce(((e,t)=>e+t[r]),0)/t.length);return s}}