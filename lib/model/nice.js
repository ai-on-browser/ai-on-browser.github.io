import NeuralNetwork from"./neuralnetwork.js";import{FlowLayer}from"./layer/base.js";import ReverseLayer from"./layer/reverse.js";import{Matrix}from"../util/math.js";export default class NICE{constructor(e,t){const r=[{type:"input"}];for(let t=0;t<e;t++)r.push({type:"reverse",axis:1}),r.push({type:"additive_coupling"});r.push({type:"output"}),this._model=NeuralNetwork.fromObject(r,null,t),this._epoch=0,this._p=e=>e.copyMap((e=>Math.exp(-(e**2)/2)/Math.sqrt(2*Math.PI)))}get epoch(){return this._epoch}fit(e,t,r,o){for(let a=0;a<t;a++)for(let t=0;t<e.length;t+=o){const a=Math.min(e.length,t+o),s=this._model.calc(e.slice(t,a));this._model.grad(s),this._model.update(r)}this._epoch+=t}predict(e){return this._model.calc(e).toArray()}generate(e){e=Matrix.fromArray(e);for(let t=this._model._graph.size-1;t>=0;t--){const r=this._model._graph.nodes[t];r.layer instanceof FlowLayer?e=r.layer.inverse(e):r.layer instanceof ReverseLayer&&(e=r.layer.calc(e))}return e.toArray()}}