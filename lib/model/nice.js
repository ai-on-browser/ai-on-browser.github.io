import NeuralNetwork from"./neuralnetwork.js";import{FlowLayer}from"./layer/base.js";import ReverseLayer from"./layer/reverse.js";import Matrix from"../util/matrix.js";export default class NICE{constructor(e,r){const t=[{type:"input"}];for(let r=0;r<e;r++)t.push({type:"reverse",axis:1}),t.push({type:"additive_coupling"});t.push({type:"output"}),this._model=NeuralNetwork.fromObject(t,null,r),this._epoch=0,this._p=e=>e.copyMap((e=>Math.exp(-(e**2)/2)/Math.sqrt(2*Math.PI)))}get epoch(){return this._epoch}fit(e,r,t,o){for(let a=0;a<r;a++)for(let r=0;r<e.length;r+=o){const a=Math.min(e.length,r+o),s=this._model.calc(e.slice(r,a));this._model.grad(s),this._model.update(t)}this._epoch+=r}predict(e){return this._model.calc(e).toArray()}generate(e){e=Matrix.fromArray(e);for(let r=this._model._graph.size-1;r>=0;r--){const t=this._model._graph.nodes[r];t.layer instanceof FlowLayer?e=t.layer.inverse(e):t.layer instanceof ReverseLayer&&(e=t.layer.calc(e))}return e.toArray()}}