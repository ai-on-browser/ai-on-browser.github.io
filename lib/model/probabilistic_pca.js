import Matrix from"../util/matrix.js";export default class ProbabilisticPCA{constructor(t="analysis",s){this._method=t,this._rd=s}fit(t){t=Matrix.fromArray(t),"analysis"===this._method?this._analysis(t):"em"===this._method?this._em(t):"bayes"===this._method&&this._bayes(t)}_analysis(t){this._m=t.mean(0);const s=t.cov(),[i,a]=s.eigen();this._sigma=0;for(let t=this._rd;t<i.length;t++)this._sigma+=i[t]/(i.length-this._rd);const h=i.slice(0,this._rd).map((t=>Math.sqrt(t-this._sigma)));this._w=a.slice(0,this._rd,1).dot(Matrix.diag(h))}_em(t){this._w||(this._w=Matrix.eye(t.cols,this._rd),this._sigma=0,this._m=t.mean(0)),t=Matrix.sub(t,this._m);const s=this._w.tDot(this._w);s.add(Matrix.eye(this._rd,this._rd,this._sigma));const i=s.inv(),a=t.dot(this._w).dot(i.t),h=Matrix.mult(i,this._sigma*t.rows);h.add(a.tDot(a)),this._w=t.tDot(a).dot(h.inv()),this._sigma=(Matrix.mult(t,t).sum()-2*Matrix.mult(a,t.dot(this._w)).sum()+Matrix.mult(h,this._w.tDot(this._w).t).sum())/(t.rows*t.cols)}_bayes(t){this._w||(this._w=Matrix.eye(t.cols,this._rd),this._sigma=0,this._m=t.mean(0),this._alpha=Matrix.ones(1,this._rd).value),t=Matrix.sub(t,this._m);const s=this._w.tDot(this._w);s.add(Matrix.eye(this._rd,this._rd,this._sigma));const i=s.inv(),a=t.dot(this._w).dot(i.t),h=Matrix.mult(i,this._sigma*t.rows);h.add(a.tDot(a));const _=Matrix.diag(this._alpha);_.mult(this._sigma),this._w=t.tDot(a).dot(Matrix.add(h,_).inv()),this._sigma=(Matrix.mult(t,t).sum()-2*Matrix.mult(a,t.dot(this._w)).sum()+Matrix.mult(h,this._w.tDot(this._w).t).sum())/(t.rows*t.cols),this._alpha=Matrix.mult(this._w,this._w).sum(0).value.map((s=>t.cols/s))}predict(t){(t=Matrix.fromArray(t)).sub(this._m);const s=this._w.tDot(this._w),i=this._w.cols;return s.add(Matrix.eye(i,i,this._sigma)),t.dot(this._w).dot(s.inv()).toArray()}}