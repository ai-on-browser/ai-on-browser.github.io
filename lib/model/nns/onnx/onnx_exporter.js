var P=Object.defineProperty;var y=(z,t)=>P(z,"name",{value:t,configurable:!0});import m from"./onnx_pb.js";export{default as onnx}from"./onnx_pb.js";import*as w from"./layer/index.js";export default class c{static{y(this,"ONNXExporter")}static createONNXModel(){const t=new m.ModelProto;t.setProducerName("ai-on-browser/data-analysis-models"),t.setProducerVersion("0.23.0"),t.setIrVersion(9);const s=new m.OperatorSetIdProto;s.setDomain(""),s.setVersion(19),t.addOpsetImport(s);const n=new m.GraphProto;return n.setName("graph"),t.setGraph(n),t}static getLayerExporter(t){return t=t.toLowerCase(),w[t]?w[t]:(console.error(`Unimplemented layer ${t}.`),null)}static dump(t){const s=c.createONNXModel(),n=[],p=new Set;for(const e of t)n.push({...e}),e.name&&p.add(e.name);for(let e=0;e<n.length;e++){if(!n[e].name){const i=`_${n[e].type}`;let o=i,r=1;for(;p.has(o);)o=i+"_"+r,r++;n[e].name=o,p.add(o)}e>0&&!n[e].input&&(n[e].input=n[e-1].name)}const a={};for(const e of n){const i=c.getLayerExporter(e.type);if(i==null)continue;const o=i.export(s,e,a),r=Array.isArray(e.input)?e.input:[e.input];if(a[e.name]={type:m.TensorProto.DataType.Float,...a[r[0]],...o},!o?.size&&r.length>1){let l=a[e.name].size;for(let u=1;u<r.length;u++){const d=a[r[u]].size,f=Math.max(d.length,l.length);l=Array.from({length:f},(I,h)=>{const g=l[l.length-f+h],x=d[d.length-f+h];return g==null||x==null?null:Math.max(g,x)})}a[e.name].size=l}}return s.serializeBinary()}}
