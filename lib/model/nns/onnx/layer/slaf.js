import{onnx as a}from"../onnx_exporter.js";export default{export(l,t){const i=t.n??3,m=Array.isArray(t.a)?t.a:Array(i).fill(t.a??1),u=Array.isArray(t.input)?t.input[0]:t.input,d=l.getGraph(),s=new a.TensorProto;s.setName(t.name+"_a0"),s.setDataType(a.TensorProto.DataType.FLOAT),s.setDimsList([1]),s.setFloatDataList([m[0]]),d.addInitializer(s);const r=new a.NodeProto;r.setOpType("Sum"),r.addInput(t.name+"_a0"),r.addOutput(t.name);let _=u;for(let e=1;e<i;e++){const o=new a.TensorProto;o.setName(t.name+`_a${e}`),o.setDataType(a.TensorProto.DataType.FLOAT),o.setDimsList([1]),o.setFloatDataList([m[e]]),d.addInitializer(o);const n=new a.NodeProto;if(n.setOpType("Mul"),e===1)n.addInput(u);else{const p=new a.NodeProto;p.setOpType("Mul"),p.addInput(u),p.addInput(_),p.addOutput(t.name+`_pow${e}`),_=t.name+`_pow${e}`,n.addInput(t.name+`_pow${e}`),d.addNode(p)}n.addInput(t.name+`_a${e}`),n.addOutput(t.name+`_${e}`),d.addNode(n),r.addInput(t.name+`_${e}`)}d.addNode(r)}};
