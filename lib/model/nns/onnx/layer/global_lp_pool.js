import{onnx as n}from"../onnx_exporter.js";export default{export(y,t,T){const m=y.getGraph(),l=Array.isArray(t.input)?t.input[0]:t.input,e=T[l].size.concat(),r=new n.NodeProto;r.setOpType("GlobalLpPool");const d=new n.AttributeProto;d.setName("p"),d.setType(n.AttributeProto.AttributeType.INT),d.setI(t.p??2),r.addAttribute(d);const p=Array(e.length).fill(1);if(p[0]=e[0],t.channel_dim===1)r.addInput(l),r.addOutput(t.name),p[1]=e[1];else if(t.channel_dim==null||t.channel_dim===-1){const a=new n.NodeProto;a.setOpType("Transpose"),a.addInput(l),a.addOutput(t.name+"_t1");const s=new n.AttributeProto;s.setName("perm"),s.setType(n.AttributeProto.AttributeType.INTS);const c=Array.from(e,(h,A)=>A-1);c[0]=0,c[1]=e.length-1,s.setIntsList(c),a.addAttribute(s),m.addNode(a),r.addInput(t.name+"_t1"),r.addOutput(t.name+"_gap");const o=new n.NodeProto;o.setOpType("Transpose"),o.addInput(t.name+"_gap"),o.addOutput(t.name);const i=new n.AttributeProto;i.setName("perm"),i.setType(n.AttributeProto.AttributeType.INTS);const u=Array.from(e,(h,A)=>A+1);u[0]=0,u[u.length-1]=1,i.setIntsList(u),o.addAttribute(i),m.addNode(o),p[e.length-1]=e[e.length-1]}else throw new Error(`Not implemented value of attribute 'channel_dim' ${t.channel_dim}.`);return m.addNode(r),{size:p}}};
