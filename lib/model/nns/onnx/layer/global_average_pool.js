import{onnx as n}from"../onnx_exporter.js";export default{export(A,t,h){const u=A.getGraph(),m=Array.isArray(t.input)?t.input[0]:t.input,e=h[m].size.concat(),r=new n.NodeProto;r.setOpType("GlobalAveragePool");const o=Array(e.length).fill(1);if(o[0]=e[0],t.channel_dim===1)r.addInput(m),r.addOutput(t.name),o[1]=e[1];else if(t.channel_dim==null||t.channel_dim===-1){const a=new n.NodeProto;a.setOpType("Transpose"),a.addInput(m),a.addOutput(t.name+"_t1");const p=new n.AttributeProto;p.setName("perm"),p.setType(n.AttributeProto.AttributeType.INTS);const l=Array.from(e,(_,c)=>c-1);l[0]=0,l[1]=e.length-1,p.setIntsList(l),a.addAttribute(p),u.addNode(a),r.addInput(t.name+"_t1"),r.addOutput(t.name+"_gap");const d=new n.NodeProto;d.setOpType("Transpose"),d.addInput(t.name+"_gap"),d.addOutput(t.name);const s=new n.AttributeProto;s.setName("perm"),s.setType(n.AttributeProto.AttributeType.INTS);const i=Array.from(e,(_,c)=>c+1);i[0]=0,i[i.length-1]=1,s.setIntsList(i),d.addAttribute(s),u.addNode(d),o[e.length-1]=e[e.length-1]}else throw new Error(`Not implemented value of attribute 'channel_dim' ${t.channel_dim}.`);return u.addNode(r),{size:o}}};
