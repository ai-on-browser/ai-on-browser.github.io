import{onnx as t}from"../onnx_exporter.js";const y=[t.TensorProto.DataType.UINT8,t.TensorProto.DataType.UINT16,t.TensorProto.DataType.UINT32,t.TensorProto.DataType.UINT64];export default{export(u,n,T){if(!Array.isArray(n.input))throw new Error(`Invalid attribute 'input' value ${n.input}.`);const p=u.getGraph(),d=new t.AttributeProto;d.setName("direction"),d.setType(t.AttributeProto.AttributeType.STRING),d.setS(new TextEncoder().encode("RIGHT"));const o=new t.NodeProto;if(n.input.length===1){o.setOpType("Identity"),o.addInput(n.input[0]),o.addOutput(n.name),p.addNode(o);return}const a=[];for(const r of n.input)if(y.includes(T[r].type))a.push(r);else{const e=new t.NodeProto;e.setOpType("Cast"),e.addInput(r),e.addOutput(`${n.name}_${r}_cast`);const i=new t.AttributeProto;i.setName("to"),i.setType(t.AttributeProto.AttributeType.INT),i.setI(t.TensorProto.DataType.UINT32),e.addAttribute(i),p.addNode(e),a.push(`${n.name}_${r}_cast`)}let s=a[0];for(let r=1;r<a.length-1;r++){const e=new t.NodeProto;e.setOpType("BitShift"),e.addInput(s),e.addInput(a[r]),e.addOutput(s=n.name+`_bitshift_${r-1}`),e.addAttribute(d),p.addNode(e)}return o.setOpType("BitShift"),o.addInput(s),o.addInput(a.at(-1)),o.addAttribute(d),o.addOutput(n.name),p.addNode(o),{type:t.TensorProto.DataType.UINT32}}};
