import{onnx as e}from"../onnx_exporter.js";import{getConstNodeName as c}from"../utils.js";export default{export(I,t){const l=c(I,0),O=c(I,1),n=new e.TensorProto;n.setName(t.name+"_alpha"),n.setDataType(e.TensorProto.DataType.FLOAT),n.setDimsList([1]),n.setFloatDataList([t.alpha??1]);const p=new e.TensorProto;p.setName(t.name+"_t"),p.setDataType(e.TensorProto.DataType.FLOAT),p.setDimsList([1]),p.setFloatDataList([t.t??.1]);const o=new e.NodeProto;o.setOpType("Sub"),o.addInput(O),o.addInput(t.name+"_t"),o.addOutput(t.name+"_1-t");const T=Array.isArray(t.input)?t.input[0]:t.input,s=new e.NodeProto;s.setOpType("Mul"),s.addInput(T),s.addInput(t.name+"_1-t"),s.addOutput(t.name+"_(1-t)*v");const u=new e.NodeProto;u.setOpType("Add"),u.addInput(t.name+"_(1-t)*v"),u.addInput(O),u.addOutput(t.name+"_1+(1-t)*v");const i=new e.NodeProto;i.setOpType("Reciprocal"),i.addInput(t.name+"_1-t"),i.addOutput(t.name+"_1/(1-t)");const r=new e.NodeProto;r.setOpType("Pow"),r.addInput(t.name+"_1+(1-t)*v"),r.addInput(t.name+"_1/(1-t)"),r.addOutput(t.name+"_pow");const _=new e.NodeProto;_.setOpType("Sub"),_.addInput(t.name+"_pow"),_.addInput(O),_.addOutput(t.name+"_sub");const m=new e.NodeProto;m.setOpType("Mul"),m.addInput(t.name+"_sub"),m.addInput(t.name+"_alpha"),m.addOutput(t.name+"_mul_alpha");const N=new e.NodeProto;N.setOpType("Greater"),N.addInput(T),N.addInput(l),N.addOutput(t.name+"_posneg");const a=new e.NodeProto;a.setOpType("Where"),a.addInput(t.name+"_posneg"),a.addInput(T),a.addInput(t.name+"_mul_alpha"),a.addOutput(t.name);const d=I.getGraph();d.addInitializer(n),d.addInitializer(p),d.addNode(o),d.addNode(s),d.addNode(u),d.addNode(i),d.addNode(r),d.addNode(_),d.addNode(m),d.addNode(N),d.addNode(a)}};
