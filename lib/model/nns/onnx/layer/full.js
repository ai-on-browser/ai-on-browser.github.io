import{onnx as i}from"../onnx_exporter.js";import m from"../../../../util/matrix.js";import y from"../onnx_exporter.js";export default{export(u,t,d){const c=Array.isArray(t.input)?t.input[0]:t.input,r=u.getGraph(),a=new i.NodeProto;a.setOpType("Gemm"),a.addInput(c);let o=typeof t.out_size=="string"?null:t.out_size;if(typeof t.w=="string")a.addInput(t.w);else if(t.w){const n=t.name+"_w";a.addInput(n);const e=new i.TensorProto;e.setName(n),e.setDataType(i.TensorProto.DataType.FLOAT);const s=m.fromArray(t.w);e.setDimsList(s.sizes),e.setFloatDataList(s.value),r.addInitializer(e),o==null&&(o=s.sizes.at(-1))}else throw new Error("Require attribute 'w'");if(typeof t.b=="string")a.addInput(t.b);else{const n=t.name+"_b";a.addInput(n);const e=new i.TensorProto;if(e.setName(n),e.setDataType(i.TensorProto.DataType.FLOAT),t.b){const s=m.fromArray(t.b);e.setDimsList(s.sizes),e.setFloatDataList(s.value)}else e.setDimsList([1,t.out_size]),e.setFloatDataList(Array(t.out_size).fill(0));r.addInitializer(e)}if(r.addNode(a),t.activation){const n=t.name+"_a";a.addOutput(n);const e=typeof t.activation=="string"?{type:t.activation,input:n,name:t.name}:{...t.activation,input:n,name:t.name};y.getLayerExporter(e.type).export(u,e)}else a.addOutput(t.name);const l=Array.isArray(t.input)?t.input[0]:t.input,p=d[l].size.concat();return p[p.length-1]=o,{size:p}}};
