import{onnx as r}from"../onnx_exporter.js";import m from"../../../../util/matrix.js";import f from"../onnx_exporter.js";export default{export(p,t,u){const d=Array.isArray(t.input)?t.input[0]:t.input,i=p.getGraph(),a=new r.NodeProto;if(a.setOpType("Gemm"),a.addInput(d),typeof t.w=="string")a.addInput(t.w);else if(t.w){const n=t.name+"_w";a.addInput(n);const e=new r.TensorProto;e.setName(n),e.setDataType(r.TensorProto.DataType.FLOAT);const s=m.fromArray(t.w);e.setDimsList(s.sizes),e.setFloatDataList(s.value),i.addInitializer(e)}else throw new Error("Require attribute 'w'");if(typeof t.b=="string")a.addInput(t.b);else{const n=t.name+"_b";a.addInput(n);const e=new r.TensorProto;if(e.setName(n),e.setDataType(r.TensorProto.DataType.FLOAT),t.b){const s=m.fromArray(t.b);e.setDimsList(s.sizes),e.setFloatDataList(s.value)}else e.setDimsList([1,t.out_size]),e.setFloatDataList(Array(t.out_size).fill(0));i.addInitializer(e)}if(i.addNode(a),t.activation){const n=t.name+"_a";a.addOutput(n);const e=typeof t.activation=="string"?{type:t.activation,input:n,name:t.name}:{...t.activation,input:n,name:t.name};f.getLayerExporter(e.type).export(p,e)}else a.addOutput(t.name);const c=Array.isArray(t.input)?t.input[0]:t.input,y=typeof t.out_size=="string"?u[t.out_size].size.at(-1):t.out_size,o=u[c].size.concat();return o[o.length-1]=y,{size:o}}};
