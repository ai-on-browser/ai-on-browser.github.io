import{onnx as d}from"../onnx_exporter.js";import{getConstNodeName as I}from"../utils.js";export default{export(y,t){const n=y.getGraph(),m=Array.isArray(t.input)?t.input[0]:t.input,_=Array.isArray(t.a)?t.a:Array((t.m??2)+1).fill(t.a??.1),i=Array.isArray(t.b)?t.b:Array(t.n??2).fill(t.b??0);let N=m;for(let e=2;e<Math.max(_.length,i.length+1);e++){const a=new d.NodeProto;a.setOpType("Mul"),a.addInput(m),a.addInput(N),a.addOutput(N=t.name+`_pow${e}`),n.addNode(a)}const o=new d.NodeProto;o.setOpType("Sum"),n.addNode(o);const p=new d.TensorProto;p.setName(t.name+"_a0"),p.setDataType(d.TensorProto.DataType.FLOAT),p.setDimsList([1]),p.setFloatDataList([_[0]]),n.addInitializer(p),o.addInput(t.name+"_a0");for(let e=1;e<_.length;e++){const a=new d.TensorProto;a.setName(t.name+`_a${e}`),a.setDataType(d.TensorProto.DataType.FLOAT),a.setDimsList([1]),a.setFloatDataList([_[e]]),n.addInitializer(a);const s=new d.NodeProto;s.setOpType("Mul"),s.addInput(e===1?m:t.name+`_pow${e}`),s.addInput(t.name+`_a${e}`),s.addOutput(t.name+`_mul_a${e}`),n.addNode(s),o.addInput(t.name+`_mul_a${e}`)}if(i.length===0){o.addOutput(t.name);return}o.addOutput(t.name+"_a");const l=new d.NodeProto;l.setOpType("Sum"),l.addOutput(t.name+"_b"),n.addNode(l);for(let e=0;e<i.length;e++){const a=new d.TensorProto;a.setName(t.name+`_b${e}`),a.setDataType(d.TensorProto.DataType.FLOAT),a.setDimsList([1]),a.setFloatDataList([i[e]]),n.addInitializer(a);const s=new d.NodeProto;s.setOpType("Mul"),s.addInput(e===0?m:t.name+`_pow${e+1}`),s.addInput(t.name+`_b${e}`),s.addOutput(t.name+`_mul_b${e}`),n.addNode(s),l.addInput(t.name+`_mul_b${e}`)}const T=new d.NodeProto;T.setOpType("Abs"),T.addInput(t.name+"_b"),T.addOutput(t.name+"_abs"),n.addNode(T);const O=I(y,1),r=new d.NodeProto;r.setOpType("Add"),r.addInput(O),r.addInput(t.name+"_abs"),r.addOutput(t.name+"_add"),n.addNode(r);const u=new d.NodeProto;u.setOpType("Div"),u.addInput(t.name+"_a"),u.addInput(t.name+"_add"),u.addOutput(t.name),n.addNode(u)}};
