var P=Object.defineProperty;var I=(T,e)=>P(T,"name",{value:e,configurable:!0});import{onnx as n}from"../onnx_exporter.js";export default{export(T,e,A){const r=T.getGraph(),m=Array.isArray(e.input)?e.input[0]:e.input,u=A[m].size.concat(),s=new n.NodeProto;if(s.setOpType("BatchNormalization"),e.channel_dim===1)s.addInput(m),s.addOutput(e.name);else if(e.channel_dim==null||e.channel_dim===-1){const t=new n.NodeProto;t.setOpType("Transpose"),t.addInput(m),t.addOutput(e.name+"_t1");const a=new n.AttributeProto;a.setName("perm"),a.setType(n.AttributeProto.AttributeType.INTS);const d=Array.from(u,(N,f)=>f-1);d[0]=0,d[1]=u.length-1,a.setIntsList(d),t.addAttribute(a),r.addNode(t),s.addInput(e.name+"_t1"),s.addOutput(e.name+"_ap");const i=new n.NodeProto;i.setOpType("Transpose"),i.addInput(e.name+"_ap"),i.addOutput(e.name);const p=new n.AttributeProto;p.setName("perm"),p.setType(n.AttributeProto.AttributeType.INTS);const c=Array.from(u,(N,f)=>f+1);c[0]=0,c[c.length-1]=1,p.setIntsList(c),i.addAttribute(p),r.addNode(i)}else throw new Error(`Not implemented value of attribute 'channel_dim' ${e.channel_dim}.`);const l=new n.AttributeProto;l.setName("training_mode"),l.setType(n.AttributeProto.AttributeType.INT),l.setI(0),s.addAttribute(l);const _=e.channel_dim===1?1:u.length-1;if(typeof e.scale=="string")s.addInput(e.scale);else{if(!Array.isArray(e.scale)&&u[_]==null)throw new Error("Size of channel dim must be specified if scale is scalar.");const t=Array.isArray(e.scale)?e.scale:Array(u[_]).fill(e.scale??1),a=new n.TensorProto;a.setName(e.name+"_scale"),a.setDataType(n.TensorProto.DataType.FLOAT),a.setDimsList([t.length]),a.setFloatDataList(t),r.addInitializer(a),s.addInput(e.name+"_scale")}if(typeof e.offset=="string")s.addInput(e.offset);else{if(!Array.isArray(e.offset)&&u[_]==null)throw new Error("Size of channel dim must be specified if offset is scalar.");const t=Array.isArray(e.offset)?e.offset:Array(u[_]).fill(e.offset??0),a=new n.TensorProto;a.setName(e.name+"_offset"),a.setDataType(n.TensorProto.DataType.FLOAT),a.setDimsList([t.length]),a.setFloatDataList(t),r.addInitializer(a),s.addInput(e.name+"_offset")}let o=null;const y=I(()=>{if(o)return;const t=Array.from(u,(a,d)=>d);t.splice(_,1),o=new n.TensorProto,o.setName(e.name+"_reduce_axis"),o.setDataType(n.TensorProto.DataType.INT64),o.setDimsList([t.length]),o.setInt64DataList(t),r.addInitializer(o)},"readyReduceAxisTensor");if(typeof e.input_mean=="string")s.addInput(e.input_mean);else if(e.input_mean){const t=new n.TensorProto;t.setName(e.name+"_input_mean"),t.setDataType(n.TensorProto.DataType.FLOAT),t.setDimsList([e.input_mean.length]),t.setFloatDataList(e.input_mean),r.addInitializer(t),s.addInput(e.name+"_input_mean")}else{y();const t=new n.NodeProto;t.setOpType("ReduceMean"),t.addInput(m),t.addInput(e.name+"_reduce_axis"),t.addOutput(e.name+"_input_mean");const a=new n.AttributeProto;a.setName("keepdims"),a.setType(n.AttributeProto.AttributeType.INT),a.setI(0),t.addAttribute(a),r.addNode(t),s.addInput(e.name+"_input_mean")}if(typeof e.input_var=="string")s.addInput(e.input_var);else if(e.input_var){const t=new n.TensorProto;t.setName(e.name+"_input_var"),t.setDataType(n.TensorProto.DataType.FLOAT),t.setDimsList([e.input_var.length]),t.setFloatDataList(e.input_var),r.addInitializer(t),s.addInput(e.name+"_input_var")}else{y();const t=new n.AttributeProto;t.setName("keepdims"),t.setType(n.AttributeProto.AttributeType.INT),t.setI(0);const a=new n.NodeProto;a.setOpType("ReduceMean"),a.addInput(m),a.addInput(e.name+"_reduce_axis"),a.addOutput(e.name+"_input_var_mean"),r.addNode(a);const d=new n.NodeProto;d.setOpType("Sub"),d.addInput(m),d.addInput(e.name+"_input_var_mean"),d.addOutput(e.name+"_input_var_sub"),r.addNode(d);const i=new n.NodeProto;i.setOpType("Mul"),i.addInput(e.name+"_input_var_sub"),i.addInput(e.name+"_input_var_sub"),i.addOutput(e.name+"_input_var_mul"),r.addNode(i);const p=new n.NodeProto;p.setOpType("ReduceMean"),p.addInput(e.name+"_input_var_mul"),p.addInput(e.name+"_reduce_axis"),p.addOutput(e.name+"_input_var"),p.addAttribute(t),r.addNode(p),s.addInput(e.name+"_input_var")}r.addNode(s)}};
