import{onnx as e}from"../onnx_exporter.js";export default{export(N,t,P){const m=N.getGraph(),T=Array.isArray(t.input)?t.input[0]:t.input,c=P[T].size.concat(),r=new e.NodeProto;if(r.setOpType("LRN"),t.channel_dim===1)r.addInput(T),r.addOutput(t.name);else if(t.channel_dim==null||t.channel_dim===-1){const n=new e.NodeProto;n.setOpType("Transpose"),n.addInput(T),n.addOutput(t.name+"_t1");const p=new e.AttributeProto;p.setName("perm"),p.setType(e.AttributeProto.AttributeType.INTS);const l=Array.from(c,(h,y)=>y-1);l[0]=0,l[1]=c.length-1,p.setIntsList(l),n.addAttribute(p),m.addNode(n),r.addInput(t.name+"_t1"),r.addOutput(t.name+"_gap");const a=new e.NodeProto;a.setOpType("Transpose"),a.addInput(t.name+"_gap"),a.addOutput(t.name);const u=new e.AttributeProto;u.setName("perm"),u.setType(e.AttributeProto.AttributeType.INTS);const A=Array.from(c,(h,y)=>y+1);A[0]=0,A[A.length-1]=1,u.setIntsList(A),a.addAttribute(u),m.addNode(a)}else throw new Error(`Not implemented value of attribute 'channel_dim' ${t.channel_dim}.`);if(t.n==null)throw new Error("Require attribute 'n'");const s=new e.AttributeProto;s.setName("size"),s.setType(e.AttributeProto.AttributeType.INT),s.setI(t.n),r.addAttribute(s);const o=new e.AttributeProto;o.setName("alpha"),o.setType(e.AttributeProto.AttributeType.FLOAT),o.setF(t.alpha??1e-4),r.addAttribute(o);const d=new e.AttributeProto;d.setName("beta"),d.setType(e.AttributeProto.AttributeType.FLOAT),d.setF(t.beta??.75),r.addAttribute(d);const i=new e.AttributeProto;i.setName("bias"),i.setType(e.AttributeProto.AttributeType.FLOAT),i.setF(t.k??2),r.addAttribute(i),m.addNode(r)}};
