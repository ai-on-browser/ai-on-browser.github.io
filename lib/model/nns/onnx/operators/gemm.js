import"../onnx_importer.js";import{loadTensor as m,loadAttribute as y}from"../utils.js";import o from"../../../../util/matrix.js";export default{import(b,u){const e={alpha:1,beta:1};for(const r of u.getAttributeList())e[r.getName()]=y(r);const a=u.getInputList(),i=[];let l=a[0];e.transA&&i.push({type:"transpose",input:[l],name:l+="_t",axis:[1,0]});const t={};for(const r of b.getGraph().getInitializerList())if(r.getName()===a[1])t.w=o.fromArray(m(r)),e.transB&&(t.w=t.w.t),t.w.mult(e.alpha),t.w=t.w.toArray();else if(r.getName()===a[2]){const p=m(r);Array.isArray(p)?Array.isArray(p[0])?(t.b=o.fromArray(p),t.b.mult(e.beta),t.b=t.b.toArray()):t.b=[p.map(f=>f*e.beta)]:t.b=p*e.beta}let s=a[1];t.w||(e.transB&&(i.push({type:"transpose",input:[s],name:a[1]+"_t",axis:[1,0]}),s=a[1]+"_t"),e.alpha!==1&&(i.push({type:"const",value:[e.alpha],name:a[1]+"_alpha"}),i.push({type:"mult",input:[s,a[1]+"_alpha"],name:a[1]+"_mul_a"}),s=a[1]+"_mul_a"));let n=a[2];return n&&!t.b&&e.beta!==1&&(i.push({type:"const",value:[e.beta],name:a[2]+"_beta"}),i.push({type:"mult",input:[n,a[2]+"_beta"],name:a[2]+"_mul_b"}),n=a[2]+"_mul_b"),i.push({type:"full",input:[l],name:u.getOutputList()[0],w:t.w||s,b:t.b||n}),i}};
