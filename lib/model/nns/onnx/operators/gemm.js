import"../onnx_importer.js";import{loadTensor as l,loadAttribute as y}from"../utils.js";import o from"../../../../util/matrix.js";export default{import(b,m){const a={alpha:1,beta:1};for(const i of m.getAttributeList())a[i.getName()]=y(i);const e=m.getInputList(),r=[];let u=e[0];a.transA&&r.push({type:"transpose",input:[u],name:u+="_t",axis:[1,0]});const t={};for(const i of b.getGraph().getInitializerList())if(i.getName()===e[1])t.w=o.fromArray(l(i)),a.transB&&(t.w=t.w.t),t.w.mult(a.alpha),t.w=t.w.toArray();else if(i.getName()===e[2]){const p=l(i);Array.isArray(p)?Array.isArray(p[0])?(t.b=o.fromArray(p),t.b.mult(a.beta),t.b=t.b.toArray()):t.b=[p.map(f=>f*a.beta)]:t.b=p*a.beta}let s=e[1];t.w||(a.transB&&(r.push({type:"transpose",input:[s],name:e[1]+"_t",axis:[1,0]}),s=e[1]+"_t"),a.alpha!==1&&(r.push({type:"mult",input:[s,a.alpha],name:e[1]+"_mul_a"}),s=e[1]+"_mul_a"));let n=e[2];return n&&!t.b&&a.beta!==1&&(r.push({type:"mult",input:[n,a.beta],name:e[2]+"_mul_b"}),n=e[2]+"_mul_b"),r.push({type:"full",input:[u],name:m.getOutputList()[0],w:t.w||s,b:t.b||n}),r}};
