import Layer,{NeuralnetworkLayerException}from"./base.js";import Tensor from"../../../util/tensor.js";export default class GlobalMaxPoolLayer extends Layer{constructor({channel_dim:i=-1,...s}){if(super(s),this._channel_dim=i,-1!==this._channel_dim&&1!==this._channel_dim)throw new NeuralnetworkLayerException("Invalid channel dimension.")}_index(i,s,e){return-1===this._channel_dim?[i,...e,s]:[i,s,...e]}calc(i){this._i=i;const s=i.sizes.slice(1),e=Array(i.sizes.length).fill(1);e[0]=i.sizes[0],-1===this._channel_dim?(e[i.dimension-1]=i.sizes[i.dimension-1],s.pop()):1===this._channel_dim&&(e[1]=i.sizes[1],s.splice(0,1));const n=-1===this._channel_dim?i.sizes[i.dimension-1]:i.sizes[1];this._o=new Tensor(e);for(let e=0;e<i.sizes[0];e++)for(let t=0;t<n;t++){const n=Array(i.dimension-2).fill(0);let o=-1/0;do{const l=i.at(this._index(e,t,n));o<l&&(o=l);for(let i=0;i<n.length&&(n[i]++,!(n[i]<s[i]));i++)n[i]=0}while(n.some((i=>i>0)));this._o.set(this._index(e,t,Array(i.dimension-2).fill(0)),o)}return this._o}grad(i){this._bo=i,this._bi=new Tensor(this._i.sizes);const s=this._i.sizes.slice(1);-1===this._channel_dim?s.pop():1===this._channel_dim&&s.splice(0,1);const e=-1===this._channel_dim?this._i.sizes[this._i.dimension-1]:this._i.sizes[1];for(let i=0;i<this._i.sizes[0];i++)for(let n=0;n<e;n++){const e=Array(this._i.dimension-2).fill(0);let t=-1/0,o=null;do{const l=this._i.at(this._index(i,n,e));t<l&&(t=l,o=e.concat());for(let i=0;i<e.length&&(e[i]++,!(e[i]<s[i]));i++)e[i]=0}while(e.some((i=>i>0)));this._bi.set(this._index(i,n,o),this._bo.at(this._index(i,n,e)))}return this._bi}toObject(){return{type:"global_max_pool",channel_dim:this._channel_dim}}}GlobalMaxPoolLayer.registLayer();