var n=Object.defineProperty;var _=(o,e)=>n(o,"name",{value:e,configurable:!0});import z from"./base.js";import t from"../../../util/tensor.js";import a from"../../../util/matrix.js";export default class h extends z{static{_(this,"ReshapeLayer")}constructor({size:e,...i}){super(i),this._size=e}calc(e){if(this._in_size=e.sizes.concat(),typeof this._size=="string"){const s=this.graph.getNode(this._size).lastOutputSize;this._out_size=s}else this._out_size=this._size;(this._out_size.length===1||this._in_size.slice(1).reduce((s,r)=>s*r,1)===this._out_size.reduce((s,r)=>s*r,1))&&(this._out_size=[e.sizes[0],...this._out_size]);const i=this._out_size.length===2?e.copy():t.fromArray(e.copy());return i.reshape(...this._out_size),i instanceof t&&i.dimension===2?i.toMatrix():i}grad(e){let i=e.copy();return i instanceof a&&this._in_size.length>2&&(i=t.fromArray(i)),i.reshape(...this._in_size),i instanceof t&&this._in_size.length===2&&(i=i.toMatrix()),i}toObject(){return{type:"reshape",size:this._size}}}h.registLayer();
