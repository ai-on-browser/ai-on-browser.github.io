import Layer from"./base.js";import Tensor from"../../../util/tensor.js";import Matrix from"../../../util/matrix.js";export default class ReshapeLayer extends Layer{constructor({size:e,...s}){super(s),this._size=e}calc(e){if(this._in_size=e.sizes.concat(),"string"==typeof this._size){const e=this.graph.getNode(this._size).lastOutputSize;this._out_size=e}else this._out_size=this._size;1!==this._out_size.length&&this._in_size.slice(1).reduce(((e,s)=>e*s),1)!==this._out_size.reduce(((e,s)=>e*s),1)||(this._out_size=[e.sizes[0],...this._out_size]);const s=2===this._out_size.length?e.copy():Tensor.fromArray(e.copy());return s.reshape(...this._out_size),s instanceof Tensor&&2===s.dimension?s.toMatrix():s}grad(e){let s=e.copy();return s instanceof Matrix&&this._in_size.length>2&&(s=Tensor.fromArray(s)),s.reshape(...this._in_size),s instanceof Tensor&&2===this._in_size.length&&(s=s.toMatrix()),s}toObject(){return{type:"reshape",size:this._size}}}ReshapeLayer.registLayer();