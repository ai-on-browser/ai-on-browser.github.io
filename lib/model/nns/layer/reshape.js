var h=Object.defineProperty;var n=(o,s)=>h(o,"name",{value:s,configurable:!0});import z from"./base.js";import t from"../../../util/tensor.js";import a from"../../../util/matrix.js";export default class _ extends z{static{n(this,"ReshapeLayer")}constructor({size:s,...e}){super(e),this._size=s}get dependentLayers(){const s=[];return typeof this._size=="string"&&s.push(this._size),s}calc(s){if(this._in_size=s.sizes.concat(),typeof this._size=="string"){const i=this.graph.getNode(this._size).lastOutputSize;this._out_size=i}else this._out_size=this._size;(this._out_size.length===1||this._in_size.slice(1).reduce((i,r)=>i*r,1)===this._out_size.reduce((i,r)=>i*r,1))&&(this._out_size=[s.sizes[0],...this._out_size]);const e=this._out_size.length===2?s.copy():t.fromArray(s.copy());return e.reshape(...this._out_size),e instanceof t&&e.dimension===2?e.toMatrix():e}grad(s){let e=s.copy();return e instanceof a&&this._in_size.length>2&&(e=t.fromArray(e)),e.reshape(...this._in_size),e instanceof t&&this._in_size.length===2&&(e=e.toMatrix()),e}toObject(){return{type:"reshape",size:this._size}}}_.registLayer();
