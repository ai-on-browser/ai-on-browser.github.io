var o=Object.defineProperty;var h=(a,s)=>o(a,"name",{value:s,configurable:!0});import c from"./base.js";import l from"../../../util/matrix.js";import n from"../../../util/tensor.js";export default class _ extends c{static{h(this,"MeanLayer")}constructor({axis:s=-1,keepdims:r=!0,...t}){super(t),this._axis=null,typeof s=="string"?this._axisname=s:this._axis=typeof s=="number"?[s]:s,this._keepdims=r}calc(s){if(this._axisname&&(this._axis=this.graph.getNode(this._axisname).outputValue.toArray()),this._axis.includes(-1))this._size=Array(s.dimension).fill(1);else{this._size=s.sizes.concat();for(let i=0;i<this._axis.length;i++)this._size[this._axis[i]]=1}if(this._i=s,!this._keepdims&&this._axis.includes(-1))return new n([],s.reduce((i,e)=>i+e,0)/s.length);!this._keepdims&&s instanceof l&&(s=n.fromArray(s));const r=this._axis.includes(-1)?s.length:this._axis.reduce((i,e)=>i*s.sizes[e],1),t=s.reduce((i,e)=>i+e,0,this._axis,this._keepdims);return t.map(i=>i/r),t}grad(s){s.reshape(...this._size);const r=this._axis.includes(-1)?this._i.length:this._axis.reduce((i,e)=>i*this._i.sizes[e],1),t=this._i.copy();return t.broadcastOperate(s,(i,e)=>e/r),t}toObject(){return{type:"mean",axis:this._axisname||this._axis,keepdims:this._keepdims}}}_.registLayer();
