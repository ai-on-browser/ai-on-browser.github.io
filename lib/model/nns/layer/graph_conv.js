var v=Object.defineProperty;var u=(c,e)=>v(c,"name",{value:e,configurable:!0});import r from"./base.js";import d from"../../../util/matrix.js";export default class f extends r{static{u(this,"GraphConvolutionalLayer")}constructor({out_size:e,w:a=null,b:t=null,activation:i=null,l2_decay:s=0,l1_decay:_=0,...o}){super(o),this._out_size=e,this._w=null,typeof a=="string"?this._wname=a:a&&(this._w=d.fromArray(a)),this._b=null,typeof t=="string"?this._bname=t:t&&(this._b=d.fromArray(t)),typeof i=="string"?this._activation=r.fromObject({type:i}):i&&(this._activation=r.fromObject(i)),this._l2_decay=s,this._l1_decay=_,this._aggregate="mean"}calc(e){this._wname&&(this._w=this.graph.getNode(this._wname).outputValue,this._out_size||(this._out_size=this._w.sizes.at(-1))),this._bname&&(this._b=this.graph.getNode(this._bname).outputValue),this._w||(this._w=d.randn(e.value[0].nodes[0].sizes.at(-1),this._out_size)),this._b||(this._b=d.zeros(1,this._out_size)),this._i=e,this._cum=[],this._o=e.copy();for(let a=0;a<e.length;a++){const t=e.value[a].copy(),i=e.value[a].copy();for(let s=0;s<t.order;s++){const _=e.value[a].getNode(s).copy(),o=e.value[a].adjacencies(s,!0,"in");for(let h=0;h<o.length;h++)_.add(e.value[a].getNode(o[h]));this._aggregate==="mean"&&_.div(o.length+1),i.nodes[s]=_;let n=_.dot(this._w);n.broadcastOperate(this._b,(h,l)=>h+l),this._activation&&(n=this._activation.calc(n)),t.nodes[s]=n}this._cum[a]=i,this._o.value[a]=t}return this._o}grad(e){if(this._activation)for(let t=0;t<e.length;t++)for(let i=0;i<e.value[t].order;i++)e.value[t].nodes[i]=this._activation.grad(e.value[t].nodes[i]);this._dw=null,this._db=null,this._bi=this._i.copy();for(let t=0;t<this._bi.length;t++){const i=this._i.value[t].copy();for(let s=0;s<this._bi.value[t].order;s++)i.nodes[s]=this._i.value[t].nodes[s].copy(),i.nodes[s].fill(0);this._bi.value[t]=i}let a=0;for(let t=0;t<e.length;t++)for(let i=0;i<e.value[t].order;i++){const s=this._cum[t].nodes[i].tDot(e.value[t].nodes[i]),_=e.value[t].nodes[i].sum(0);this._dw?(this._dw.add(s),this._db.add(_)):(this._dw=s,this._db=_),a++;const o=e.value[t].nodes[i].dot(this._w.t),n=this._bi.value[t].adjacencies(i,!0,"in");this._aggregate==="mean"&&o.div(n.length+1),this._bi.value[t].nodes[i].broadcastOperate(o,(h,l)=>h+l);for(let h=0;h<n.length;h++)this._bi.value[t].nodes[n[h]].broadcastOperate(o,(l,g)=>l+g)}if(this._dw.div(a),this._l2_decay>0||this._l1_decay>0)for(let t=0;t<this._dw.rows;t++)for(let i=0;i<this._dw.cols;i++){const s=this._w.at(t,i);this._dw.addAt(t,i,s*this._l2_decay+Math.sign(s)*this._l1_decay)}if(this._db.div(a),this._wname||this._bname){const t={};return this._wname&&(t[this._wname]=this._dw),this._bname&&(t[this._bname]=this._db),[this._bi,t]}return this._bi}update(e){this._wname||this._w.sub(e.delta("w",this._dw)),this._bname||this._b.sub(e.delta("b",this._db))}toObject(){return{type:"graph_conv",out_size:this._out_size,w:this._wname||this._w?.toArray(),b:this._bname||this._b?.toArray(),activation:this._activation?.toObject(),l2_decay:this._l2_decay,l1_decay:this._l1_decay}}}f.registLayer("graph_conv");
