import Layer from"./base.js";import Matrix from"../../../util/matrix.js";import Tensor from"../../../util/tensor.js";export default class ArgmaxLayer extends Layer{constructor({axis:s=-1,keepdims:i=!0,...t}){super(t),this._axis=s,this._keepdims=i}calc(s){!this._keepdims&&s instanceof Matrix&&(s=Tensor.fromArray(s)),this._i=s;const i=this._axis<0?this._axis+s.dimension:this._axis;return this._o=this._i.reduce(((s,t,e)=>s[0]<t?[t,e[i]]:s),[-1/0,-1],i,this._keepdims),this._o.map((s=>s[1])),this._o}grad(s){const i=this._axis<0?this._axis+this._i.dimension:this._axis;if(this._bo=s.copy(),this._bo.dimension!==this._i.dimension){const s=this._bo.sizes.concat();s.splice(i,0,1),this._bo.reshape(...s)}this._bo.repeat(this._i.sizes[i],i);const t=Array(this._i.dimension).fill(1);t[i]=this._i.sizes[i];const e=new Tensor(t,Array.from({length:this._i.sizes[i]},((s,i)=>i)));this._bo.broadcastOperate(e,((s,i)=>s*i));const o=this._i.copy(),r=o.reduce(((s,i)=>Math.max(s,i)),-1/0,i,!0);o.broadcastOperate(r,((s,i)=>s-i)),o.map(Math.exp);const a=o.reduce(((s,i)=>s+i),0,i,!0);o.broadcastOperate(a,((s,i)=>s/i)),this._bi=this._bo.copy();const h=Array(this._i.dimension).fill(0);do{for(let s=0;s<this._i.sizes[i];s++){h[i]=s;const t=o.at(h);let e=0;const r=h.concat();for(let a=0;a<this._i.sizes[i];a++){r[i]=a;const h=s===a?1-t:-t;e+=o.at(r)*h*this._bo.at(r)}this._bi.set(h,e)}for(let s=0;s<h.length;s++)if(s!==i){if(h[s]++,h[s]<this._i.sizes[s])break;h[s]=0}else h[s]=0}while(h.some((s=>s>0)));return this._bi}toObject(){return{type:"argmax",axis:this._axis,keepdims:this._keepdims}}}ArgmaxLayer.registLayer();