var a=Object.defineProperty;var o=(_,i)=>a(_,"name",{value:i,configurable:!0});import r from"../../../util/matrix.js";import n from"../../../util/tensor.js";import d from"./base.js";export default class l extends d{static{o(this,"EmbeddingLayer")}constructor({size:i=512,embeddings:s={},...t}){super(t),this._size=i,this._v=s}calc(i){this._i=i;const s=[...i.sizes,this._size],t=s.length===2?new r(...s):new n(s);for(let e=0;e<i.length;e++){this._v[i.value[e]]||(this._v[i.value[e]]=r.randn(1,this._size));for(let h=0;h<this._size;h++)t.value[e*this._size+h]=this._v[i.value[e]].at(0,h)}return t}grad(i){this._dw={};for(let t=0;t<this._i.length;t++)for(let e=0;e<this._size;e++)this._dw[this._i.value[t]]||(this._dw[this._i.value[t]]=r.zeros(1,this._size)),this._dw[this._i.value[t]].add(new r(1,this._size,i.value.slice(t*this._size,(t+1)*this._size)));const s=this._i.copy();return s.fill(0),s}update(i){for(const s of Object.keys(this._dw))this._v[s].sub(i.delta(s,this._dw[s]))}toObject(){return{type:"embedding",size:this._size,embeddings:this._v}}}l.registLayer();
