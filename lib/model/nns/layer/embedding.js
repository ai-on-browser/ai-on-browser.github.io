import Matrix from"../../../util/matrix.js";import Tensor from"../../../util/tensor.js";import Layer from"./base.js";export default class EmbeddingLayer extends Layer{constructor({size:i=512,embeddings:t={},...e}){super(e),this._size=i,this._v=t}calc(i){this._i=i;const t=[...i.sizes,this._size],e=2===t.length?new Matrix(...t):new Tensor(t);for(let t=0;t<i.length;t++){this._v[i.value[t]]||(this._v[i.value[t]]=Matrix.randn(1,this._size));for(let s=0;s<this._size;s++)e.value[t*this._size+s]=this._v[i.value[t]].at(0,s)}return e}grad(i){this._dw={};for(let t=0;t<this._i.length;t++)for(let e=0;e<this._size;e++)this._dw[this._i.value[t]]||(this._dw[this._i.value[t]]=Matrix.zeros(1,this._size)),this._dw[this._i.value[t]].add(new Matrix(1,this._size,i.value.slice(t*this._size,(t+1)*this._size)));const t=this._i.copy();return t.fill(0),t}update(i){for(const t of Object.keys(this._dw))this._v[t].sub(i.delta(t,this._dw[t]))}toObject(){return{type:"embedding",size:this._size,embeddings:this._v}}}EmbeddingLayer.registLayer();