var O=Object.defineProperty;var b=(u,i)=>O(u,"name",{value:i,configurable:!0});import p from"../../../util/tensor.js";import g from"./base.js";export default class y extends g{static{b(this,"LayerNormalizationLayer")}constructor({axis:i=-1,epsilon:c=1e-12,scale:h=1,offset:r=0,...o}){super(o),this._axis=i,this._epsilon=c,this._scale=null,typeof h=="string"?this._scalename=h:this._scale=h,this._offset=null,typeof r=="string"?this._offsetname=r:this._offset=r}get dependentLayers(){const i=[];return this._scalename&&i.push(this._scalename),this._offsetname&&i.push(this._offsetname),i}get mean(){return this._mean}get invStdDev(){return this._invStdDev}calc(i){const c=this._axis<0?i.dimension+this._axis:this._axis,h=[];for(let s=c;s<i.dimension;s++)h.push(s);const r=h.map(s=>i.sizes[s]);this._scalename?(this._scale=this.graph.getNode(this._scalename).outputValue,this._scale.reshape(...r)):typeof this._scale=="number"?this._scale=new p(r,this._scale):Array.isArray(this._scale)&&(this._scale=p.fromArray(this._scale),this._scale.reshape(...r)),this._offsetname?(this._offset=this.graph.getNode(this._offsetname).outputValue,this._offset.reshape(...r)):typeof this._offset=="number"?this._offset=new p(r,this._offset):Array.isArray(this._offset)&&(this._offset=p.fromArray(this._offset),this._offset.reshape(...r));const o=h.reduce((s,_)=>s*i.sizes[_],1),a=i.reduce((s,_)=>s+_/o,0,h,!0);this._xc=i.copy(),this._xc.broadcastOperate(a,(s,_)=>s-_),this._var=this._xc.reduce((s,_)=>s+_**2/o,0,h,!0),this._xh=this._xc.copy(),this._xh.broadcastOperate(this._var,(s,_)=>s/Math.sqrt(_+this._epsilon));const n=this._xh.copy();return n.broadcastOperate(this._scale,(s,_)=>s*_),n.broadcastOperate(this._offset,(s,_)=>s+_),this._mean=a,this._invStdDev=this._var.copy(),this._invStdDev.map(s=>1/Math.sqrt(s+this._epsilon)),n}grad(i){this._bo=i;const c=this._bo.copy();c.broadcastOperate(this._scale,(t,e)=>t*e);const h=this._xc.copy();h.broadcastOperate(c,(t,e)=>t*e);const r=this._axis<0?this._bo.dimension+this._axis:this._axis,o=[];for(let t=r;t<this._bo.dimension;t++)o.push(t);const a=o.reduce((t,e)=>t*i.sizes[e],1),n=h.reduce((t,e)=>t+e/a,0,o,!0),s=this._xc.copy();s.broadcastOperate(this._var,(t,e)=>t/(e+this._epsilon)),s.broadcastOperate(n,(t,e)=>t*e),s.broadcastOperate(c,(t,e)=>e-t),s.broadcastOperate(this._var,(t,e)=>t/Math.sqrt(e+this._epsilon));const _=s.reduce((t,e)=>t+e/a,0,o,!0);if(s.broadcastOperate(_,(t,e)=>t-e),this._scalename||this._offsetname){const t=Array.from({length:r},(l,f)=>f),e=t.reduce((l,f)=>l*i.sizes[f],1),m={};if(this._scalename){const l=this._bo.reduce((f,d,x)=>f+d*this._xh.at(x)/e,0,t);m[this._scalename]=l}if(this._offsetname){const l=this._bo.reduce((f,d)=>f+d/e,0,t);m[this._offsetname]=l}return[s,m]}return s}update(i){if(this._scalename&&this._offsetname)return;const c=this._axis<0?this._bo.dimension+this._axis:this._axis,h=Array.from({length:c},(o,a)=>a),r=h.reduce((o,a)=>o*this._bo.sizes[a],1);if(!this._offsetname){const o=this._bo.reduce((a,n)=>a+n/r,0,h);this._offset.broadcastOperate(i.delta("offset",o),(a,n)=>a-n)}if(!this._scalename){const o=this._bo.reduce((a,n,s)=>a+n*this._xh.at(s)/r,0,h);this._scale.broadcastOperate(i.delta("scale",o),(a,n)=>a-n)}}toObject(){return{type:"layer_normalization",axis:this._axis,epsilon:this._epsilon,scale:this._scalename||this._scale.toArray?.()||this._scale,offset:this._offsetname||this._offset.toArray?.()||this._offset}}}y.registLayer();
