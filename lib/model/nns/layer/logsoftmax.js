var d=Object.defineProperty;var c=(h,t)=>d(h,"name",{value:t,configurable:!0});import l from"./base.js";export default class _ extends l{static{c(this,"LogSoftmaxLayer")}constructor({axis:t=-1,...e}){super(e),this._axis=t}calc(t){const e=this._axis<0?this._axis+t.dimension:this._axis;this._s=t.copy();const i=this._s.reduce((a,o)=>Math.max(a,o),-1/0,e,!0);this._s.broadcastOperate(i,(a,o)=>a-o),this._s.map(Math.exp);const s=this._s.reduce((a,o)=>a+o,0,e,!0);return this._s.broadcastOperate(s,(a,o)=>a/o),this._o=this._s.copy(),this._o.map(Math.log),this._o}grad(t){this._bi=t.copy();const e=this._axis<0?this._axis+t.dimension:this._axis,i=Array(t.dimension).fill(0);do{for(let s=0;s<t.sizes[e];s++){i[e]=s;const a=this._s.at(i);let o=0;const n=i.concat();for(let r=0;r<t.sizes[e];r++){n[e]=r;const x=s===r?1-a:-a;o+=x*t.at(n)}this._bi.set(i,o)}for(let s=0;s<i.length;s++){if(s===e){i[s]=0;continue}if(i[s]++,i[s]<t.sizes[s])break;i[s]=0}}while(i.some(s=>s>0));return this._bi}toObject(){return{type:"log_softmax",axis:this._axis}}}_.registLayer();
