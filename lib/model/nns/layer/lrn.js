var m=Object.defineProperty;var c=(o,t)=>m(o,"name",{value:t,configurable:!0});import p,{NeuralnetworkLayerException as f}from"./base.js";export default class d extends p{static{c(this,"LRNLayer")}constructor({alpha:t=1e-4,beta:s=.75,k:e=2,n:h,channel_dim:_=-1,...n}){if(super(n),this._alpha=t,this._beta=s,this._k=e,this._n=h,this._channel_dim=_,this._channel_dim!==-1&&this._channel_dim!==1)throw new f("Invalid channel dimension.")}_index(t,s,e){return this._channel_dim===-1?[t,...e,s]:[t,s,...e]}calc(t){this._i=t;const s=this._channel_dim===-1?t.sizes[t.dimension-1]:t.sizes[1],e=[Math.floor((this._n-1)/2),Math.ceil((this._n-1)/2)];this._s=t.copy();const h=this._channel_dim===-1?1:2;for(let n=0;n<t.sizes[0];n++){const a=Array(t.dimension-2).fill(0);do{for(let i=0;i<s;i++){let l=0;for(let r=Math.max(0,i-e[0]);r<Math.min(s,i+e[1]+1);r++)l+=t.at(this._index(n,r,a))**2;this._s.set(this._index(n,i,a),this._k+this._alpha*l)}for(let i=0;i<a.length&&(a[i]++,!(a[i]<t.sizes[i+h]));i++)a[i]=0}while(a.some(i=>i>0))}const _=this._s.copy();return _.broadcastOperate(t,(n,a)=>a/n**this._beta),_}grad(t){const s=this._i.copy();return s.broadcastOperate(this._s,(e,h)=>h**-this._beta-2*this._beta*e**2*h**(-this._beta-1)*this._alpha),s.broadcastOperate(t,(e,h)=>e*h),s}toObject(){return{type:"lrn",alpha:this._alpha,beta:this._beta,k:this._k,n:this._n,channel_dim:this._channel_dim}}}d.registLayer("lrn");
