import Layer from"./base.js";import Matrix from"../../../util/matrix.js";import Tensor from"../../../util/tensor.js";export default class VarLayer extends Layer{constructor({axis:s=-1,keepdims:i=!0,...e}){super(e),this._axis=null,"string"==typeof s?this._axisname=s:this._axis="number"==typeof s?[s]:s,this._keepdims=i}calc(s){if(this._axisname&&(this._axis=this.graph.getNode(this._axisname).outputValue.toArray()),this._axis.includes(-1))this._size=Array(s.dimension).fill(1);else{this._size=s.sizes.concat();for(let s=0;s<this._axis.length;s++)this._size[this._axis[s]]=1}if(this._i=s,!this._keepdims&&this._axis.includes(-1))return this._m=s.reduce(((s,i)=>s+i),0)/s.length,new Tensor([],s.reduce(((s,i)=>s+(i-this._m)**2),0)/s.length);!this._keepdims&&s instanceof Matrix&&(s=Tensor.fromArray(s));const i=this._axis.includes(-1)?s.length:this._axis.reduce(((i,e)=>i*s.sizes[e]),1);this._m=s.reduce(((s,i)=>s+i),0,this._axis,!0),this._m.map((s=>s/i));const e=s.copy();e.broadcastOperate(this._m,((s,i)=>s-i));const t=e.reduce(((s,i)=>s+i**2),0,this._axis,this._keepdims);return t.map((s=>s/i)),t}grad(s){s.reshape(...this._size);const i=this._axis.includes(-1)?this._i.length:this._axis.reduce(((s,i)=>s*this._i.sizes[i]),1),e=this._i.copy();return e.broadcastOperate(this._m,((s,e)=>2*(s-e)/i)),e.broadcastOperate(s,((s,i)=>s*i)),e}toObject(){return{type:"variance",axis:this._axis,keepdims:this._keepdims}}}VarLayer.registLayer("variance");