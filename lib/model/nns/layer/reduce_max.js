import Layer from"./base.js";import Matrix from"../../../util/matrix.js";import Tensor from"../../../util/tensor.js";export default class ReduceMaxLayer extends Layer{constructor({axis:e=-1,keepdims:s=!0,...t}){super(t),this._axis="number"==typeof e?[e]:e,this._keepdims=s}calc(e){const s="string"==typeof this._axis?this.graph.getNode(this._axis).outputValue.toArray():this._axis;if(s.includes(-1))this._size=Array(e.dimension).fill(1);else{this._size=e.sizes.concat();for(let e=0;e<s.length;e++)this._size[s[e]]=1}if(this._i=e,!this._keepdims&&s.includes(-1))return this._o=e.reduce(((e,s)=>Math.max(e,s)),-1/0),new Tensor([],this._o);if(!this._keepdims&&e instanceof Matrix&&(e=Tensor.fromArray(e)),this._o=e.reduce(((e,s)=>Math.max(e,s)),-1/0,s,!0),!this._keepdims){const e=this._o.copy();return e.reshape(...e.sizes.filter(((e,t)=>!s.includes(t)))),e}return this._o}grad(e){e.reshape(...this._size);const s=this._i.copy();return s.broadcastOperate(this._o,((e,s)=>s===e?1:0)),s.broadcastOperate(e,((e,s)=>e*s)),s}toObject(){return{type:"reduce_max",axis:this._axis,keepdims:this._keepdims}}}ReduceMaxLayer.registLayer();