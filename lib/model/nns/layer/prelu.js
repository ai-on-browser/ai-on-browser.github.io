import Layer from"./base.js";import Tensor from"../../../util/tensor.js";export default class ParametricReLULayer extends Layer{constructor({a:t=.25,...a}){super(a),this._a=null,this._da=0,"string"==typeof t?this._aname=t:Array.isArray(t)?(this._a=Tensor.fromArray(t),this._da=this._a.copy(),this._da.fill(0)):this._a=t}calc(t){return this._i=t,this._o=t.copy(),this._aname&&(this._a=this.graph.getNode(this._aname).outputValue),this._o.broadcastOperate(this._a,((t,a)=>t>0?t:a*t)),this._o}grad(t){const a=this._i.copy();if(a.broadcastOperate(this._a,((t,a)=>t>0?1:a)),a.broadcastOperate(t,((t,a)=>t*a)),"number"==typeof this._a){this._da0=0;for(let a=0;a<this._i.length;a++)this._i.value[a]<0&&(this._da0+=t.value[a]*this._i.value[a])}else{this._da0=this._a.copy(),this._da0.fill(0);const a=this._i.dimension-this._a.dimension,i=Array(this._i.dimension).fill(0);do{const s=this._i.at(i);s>0&&this._da0.operateAt(i.slice(a),(a=>a+s*t.at(i)));for(let t=0;t<i.length&&(i[t]++,!(i[t]<this._i.sizes[t]));t++)i[t]=0}while(i.some((t=>t>0)))}return this._aname?[a,{[this._aname]:this._da0}]:a}update(t){this._aname||("number"==typeof this._a?(this._da=.1*this._da+t.lr*this._da0/this._i.length,this._a-=this._da):(this._da.broadcastOperate(this._da0,((a,i)=>.1*a+t.lr*i/this._i.length)),this._a.broadcastOperate(this._da,((t,a)=>t-a))))}toObject(){return{type:"prelu",a:this._aname||this._a}}}ParametricReLULayer.registLayer("prelu");