var m=Object.defineProperty;var a=(r,i)=>m(r,"name",{value:i,configurable:!0});import p,{NeuralnetworkLayerException as f}from"./base.js";import c from"../../../util/tensor.js";export default class d extends p{static{a(this,"GlobalLpPoolLayer")}constructor({p:i=2,channel_dim:e=-1,...t}){if(super(t),this._p=i,this._channel_dim=e,this._channel_dim!==-1&&this._channel_dim!==1)throw new f("Invalid channel dimension.")}_index(i,e,t){return this._channel_dim===-1?[i,...t,e]:[i,e,...t]}calc(i){this._i=i;const e=i.sizes.slice(1),t=Array(i.sizes.length).fill(1);t[0]=i.sizes[0],this._channel_dim===-1?(t[i.dimension-1]=i.sizes[i.dimension-1],e.pop()):this._channel_dim===1&&(t[1]=i.sizes[1],e.splice(0,1));const l=this._channel_dim===-1?i.sizes[i.dimension-1]:i.sizes[1];this._sp=new c(t);for(let n=0;n<i.sizes[0];n++)for(let h=0;h<l;h++){const _=Array(i.dimension-2).fill(0);let o=0;do{o+=i.at(this._index(n,h,_))**this._p;for(let s=0;s<_.length&&(_[s]++,!(_[s]<e[s]));s++)_[s]=0}while(_.some(s=>s>0));this._sp.set(this._index(n,h,Array(i.dimension-2).fill(0)),o)}return this._o=this._sp.copy(),this._o.map(n=>n**(1/this._p)),this._o}grad(i){this._bo=i,this._bi=new c(this._i.sizes);const e=this._i.sizes.slice(1);this._channel_dim===-1?e.pop():this._channel_dim===1&&e.splice(0,1);const t=this._channel_dim===-1?this._i.sizes[this._i.dimension-1]:this._i.sizes[1];for(let l=0;l<this._i.sizes[0];l++)for(let n=0;n<t;n++){const h=Array(this._i.dimension-2).fill(0);do{const _=this._index(l,n,h),o=this._index(l,n,Array(this._i.dimension-2).fill(0));this._bi.set(_,this._bo.at(o)*this._sp.at(o)**(1/this._p-1)*this._i.at(_)**(this._p-1));for(let s=0;s<h.length&&(h[s]++,!(h[s]<e[s]));s++)h[s]=0}while(h.some(_=>_>0))}return this._bi}toObject(){return{type:"global_lp_pool",p:this._p,channel_dim:this._channel_dim}}}d.registLayer();
