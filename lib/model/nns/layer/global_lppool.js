import Layer,{NeuralnetworkLayerException}from"./base.js";import Tensor from"../../../util/tensor.js";export default class GlobalLpPoolLayer extends Layer{constructor({p:i=2,channel_dim:s=-1,...e}){if(super(e),this._p=i,this._channel_dim=s,-1!==this._channel_dim&&1!==this._channel_dim)throw new NeuralnetworkLayerException("Invalid channel dimension.")}_index(i,s,e){return-1===this._channel_dim?[i,...e,s]:[i,s,...e]}calc(i){this._i=i;const s=i.sizes.slice(1),e=Array(i.sizes.length).fill(1);e[0]=i.sizes[0],-1===this._channel_dim?(e[i.dimension-1]=i.sizes[i.dimension-1],s.pop()):1===this._channel_dim&&(e[1]=i.sizes[1],s.splice(1,1));const t=-1===this._channel_dim?i.sizes[i.dimension-1]:i.sizes[1];this._sp=new Tensor(e);for(let e=0;e<i.sizes[0];e++)for(let n=0;n<t;n++){const t=Array(i.dimension-2).fill(0);let h=0;do{h+=i.at(this._index(e,n,t))**this._p;for(let i=0;i<t.length&&(t[i]++,!(t[i]<s[i]));i++)t[i]=0}while(t.some((i=>i>0)));this._sp.set(this._index(e,n,Array(i.dimension-2).fill(0)),h)}return this._o=this._sp.copy(),this._o.map((i=>i**(1/this._p))),this._o}grad(i){this._bo=i,this._bi=new Tensor(this._i.sizes);const s=this._i.sizes.slice(1);-1===this._channel_dim?s.pop():1===this._channel_dim&&s.splice(1,1);const e=-1===this._channel_dim?this._i.sizes[this._i.dimension-1]:this._i.sizes[1];for(let i=0;i<this._i.sizes[0];i++)for(let t=0;t<e;t++){const e=Array(this._i.dimension-2).fill(0);do{const n=this._index(i,t,e),h=this._index(i,t,Array(this._i.dimension-2).fill(0));this._bi.set(n,this._bo.at(h)*this._sp.at(h)**(1/this._p-1)*this._i.at(n)**(this._p-1));for(let i=0;i<e.length&&(e[i]++,!(e[i]<s[i]));i++)e[i]=0}while(e.some((i=>i>0)))}return this._bi}toObject(){return{type:"global_lp_pool",p:this._p,channel_dim:this._channel_dim}}}GlobalLpPoolLayer.registLayer();