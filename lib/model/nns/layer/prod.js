import Layer from"./base.js";import Matrix from"../../../util/matrix.js";import Tensor from"../../../util/tensor.js";export default class ProdLayer extends Layer{constructor({axis:s=-1,keepdims:e=!0,...i}){super(i),this._axis="number"==typeof s?[s]:s,this._keepdims=e}calc(s){const e="string"==typeof this._axis?this.graph.getNode(this._axis).outputValue.toArray():this._axis;if(e.includes(-1))this._size=Array(s.dimension).fill(1);else{this._size=s.sizes.concat();for(let s=0;s<e.length;s++)this._size[e[s]]=1}if(this._i=s,!this._keepdims&&e.includes(-1))return this._o=s.reduce(((s,e)=>s*e),1),new Tensor([],this._o);if(!this._keepdims&&s instanceof Matrix&&(s=Tensor.fromArray(s)),this._o=s.reduce(((s,e)=>s*e),1,e,!0),!this._keepdims){const s=this._o.copy();return s.reshape(...s.sizes.filter(((s,i)=>!e.includes(i)))),s}return this._o}grad(s){s.reshape(...this._size);const e=this._i.copy();return e.broadcastOperate(this._o,((s,e)=>e/s)),e.broadcastOperate(s,((s,e)=>s*e)),e}toObject(){return{type:"prod",axis:this._axis,keepdims:this._keepdims}}}ProdLayer.registLayer();