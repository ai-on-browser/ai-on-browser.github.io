var c=Object.defineProperty;var a=(h,t)=>c(h,"name",{value:t,configurable:!0});import d from"./base.js";import p from"../../../util/matrix.js";import _ from"../../../util/tensor.js";export default class n extends d{static{a(this,"StdLayer")}constructor({axis:t=-1,keepdims:r=!0,...e}){super(e),this._axis=null,typeof t=="string"?this._axisname=t:this._axis=typeof t=="number"?[t]:t,this._keepdims=r}get dependentLayers(){const t=[];return this._axisname&&t.push(this._axisname),t}calc(t){if(this._axisname&&(this._axis=this.graph.getNode(this._axisname).outputValue.toArray()),this._axis.includes(-1))this._size=Array(t.dimension).fill(1);else{this._size=t.sizes.concat();for(let s=0;s<this._axis.length;s++)this._size[this._axis[s]]=1}if(this._i=t,!this._keepdims&&this._axis.includes(-1))return this._m=t.reduce((s,i)=>s+i,0)/t.length,this._o=Math.sqrt(t.reduce((s,i)=>s+(i-this._m)**2,0)/t.length),new _([],this._o);!this._keepdims&&t instanceof p&&(t=_.fromArray(t));const r=this._axis.includes(-1)?t.length:this._axis.reduce((s,i)=>s*t.sizes[i],1);this._m=t.reduce((s,i)=>s+i,0,this._axis,!0),this._m.map(s=>s/r);const e=t.copy();if(e.broadcastOperate(this._m,(s,i)=>s-i),this._o=e.reduce((s,i)=>s+i**2,0,this._axis,!0),this._o.map(s=>Math.sqrt(s/r)),!this._keepdims){const s=this._o.copy();return s.reshape(...s.sizes.filter((i,o)=>!this._axis.includes(o))),s}return this._o}grad(t){t.reshape(...this._size);const r=this._axis.includes(-1)?this._i.length:this._axis.reduce((s,i)=>s*this._i.sizes[i],1),e=this._i.copy();return e.broadcastOperate(this._m,(s,i)=>(s-i)/r),e.broadcastOperate(this._o,(s,i)=>s/i),e.broadcastOperate(t,(s,i)=>s*i),e}toObject(){return{type:"std",axis:this._axis,keepdims:this._keepdims}}}n.registLayer("std");
