import Layer from"./base.js";import Matrix from"../../../util/matrix.js";export default class StdLayer extends Layer{constructor({axis:t=-1,...s}){super(s),this._axis=t}calc(t){if(this._i=t,this._axis<0)return this._m=t.reduce(((t,s)=>t+s),0,this._axis)/t.length,this._o=Math.sqrt(t.reduce(((t,s)=>t+(s-this._m)**2),0)/t.length),new Matrix(1,1,this._o);this._m=t.reduce(((t,s)=>t+s),0,this._axis,!0),this._m.map((s=>s/t.sizes[this._axis]));const s=t.copy();return s.broadcastOperate(this._m,((t,s)=>t-s)),this._o=s.reduce(((t,s)=>t+s**2),0,this._axis,!0),this._o.map((s=>Math.sqrt(s/t.sizes[this._axis]))),this._o}grad(t){if(this._axis<0){const s=this._i.copy();return s.map((s=>t.toScaler()*(s-this._m)/(this._o*this._i.length))),s}const s=this._i.copy();return s.broadcastOperate(this._m,((t,s)=>(t-s)/this._i.sizes[this._axis])),s.broadcastOperate(this._o,((t,s)=>t/s)),s.broadcastOperate(t,((t,s)=>t*s)),s}toObject(){return{type:"std",axis:this._axis}}}StdLayer.registLayer("std");