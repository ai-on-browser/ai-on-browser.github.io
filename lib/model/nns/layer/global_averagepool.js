import{NeuralnetworkException}from"../../neuralnetwork.js";import Layer from"./base.js";import Tensor from"../../../util/tensor.js";export default class GlobalAveragePoolLayer extends Layer{constructor({channel_dim:i=-1,...e}){if(super(e),this._channel_dim=i,-1!==this._channel_dim&&1!==this._channel_dim)throw new NeuralnetworkException("Invalid channel dimension.")}_index(i,e,s){return-1===this._channel_dim?[i,...s,e]:[i,e,...s]}calc(i){this._i=i;const e=i.sizes.slice(1),s=Array(i.sizes.length).fill(1);s[0]=i.sizes[0],-1===this._channel_dim?(s[i.dimension-1]=i.sizes[i.dimension-1],e.pop()):1===this._channel_dim&&(s[1]=i.sizes[1],e.splice(1,1));const n=-1===this._channel_dim?i.sizes[i.dimension-1]:i.sizes[1];this._o=new Tensor(s);const t=this._i.length/this._o.length;for(let s=0;s<i.sizes[0];s++)for(let o=0;o<n;o++){const n=Array(i.dimension-2).fill(0);let l=0;do{l+=i.at(this._index(s,o,n));for(let i=0;i<n.length&&(n[i]++,!(n[i]<e[i]));i++)n[i]=0}while(n.some((i=>i>0)));this._o.set(this._index(s,o,Array(i.dimension-2).fill(0)),l/t)}return this._o}grad(i){this._bo=i,this._bi=new Tensor(this._i.sizes);const e=this._i.sizes.slice(1);-1===this._channel_dim?e.pop():1===this._channel_dim&&e.splice(1,1);const s=-1===this._channel_dim?this._i.sizes[this._i.dimension-1]:this._i.sizes[1],n=this._i.length/this._o.length;for(let i=0;i<this._i.sizes[0];i++)for(let t=0;t<s;t++){const s=Array(this._i.dimension-2).fill(0);do{this._bi.set(this._index(i,t,s),this._bo.at(this._index(i,t,Array(this._i.dimension-2).fill(0)))/n);for(let i=0;i<s.length&&(s[i]++,!(s[i]<e[i]));i++)s[i]=0}while(s.some((i=>i>0)))}return this._bi}toObject(){return{type:"global_average_pool",channel_dim:this._channel_dim}}}GlobalAveragePoolLayer.registLayer();