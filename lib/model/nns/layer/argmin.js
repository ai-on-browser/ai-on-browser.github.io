import Layer from"./base.js";import Matrix from"../../../util/matrix.js";import Tensor from"../../../util/tensor.js";export default class ArgminLayer extends Layer{constructor({axis:i=-1,keepdims:s=!0,...t}){super(t),this._axis=i,this._keepdims=s}calc(i){!this._keepdims&&i instanceof Matrix&&(i=Tensor.fromArray(i)),this._i=i;const s=this._axis<0?this._axis+i.dimension:this._axis;return this._o=this._i.reduce(((i,t,e)=>i[0]>t?[t,e[s]]:i),[1/0,-1],s,this._keepdims),this._o.map((i=>i[1])),this._o}grad(i){const s=this._axis<0?this._axis+this._i.dimension:this._axis;if(this._bo=i.copy(),this._bo.dimension!==this._i.dimension){const i=this._bo.sizes.concat();i.splice(s,0,1),this._bo.reshape(...i)}this._bo.repeat(this._i.sizes[s],s);const t=Array(this._i.dimension).fill(1);t[s]=this._i.sizes[s];const e=new Tensor(t,Array.from({length:this._i.sizes[s]},((i,s)=>s)));this._bo.broadcastOperate(e,((i,s)=>i*s));const o=this._i.copy(),r=o.reduce(((i,s)=>Math.max(i,s)),-1/0,s,!0);o.broadcastOperate(r,((i,s)=>s-i)),o.map(Math.exp);const a=o.reduce(((i,s)=>i+s),0,s,!0);o.broadcastOperate(a,((i,s)=>i/s)),this._bi=this._bo.copy();const h=Array(this._i.dimension).fill(0);do{for(let i=0;i<this._i.sizes[s];i++){h[s]=i;const t=o.at(h);let e=0;const r=h.concat();for(let a=0;a<this._i.sizes[s];a++){r[s]=a;const h=i===a?t-1:t;e+=o.at(r)*h*this._bo.at(r)}this._bi.set(h,e)}for(let i=0;i<h.length;i++)if(i!==s){if(h[i]++,h[i]<this._i.sizes[i])break;h[i]=0}else h[i]=0}while(h.some((i=>i>0)));return this._bi}toObject(){return{type:"argmin",axis:this._axis,keepdims:this._keepdims}}}ArgminLayer.registLayer();