var h=Object.defineProperty;var a=(r,e)=>h(r,"name",{value:e,configurable:!0});import p from"./base.js";import u from"../../../util/matrix.js";import o from"../../../util/tensor.js";export default class n extends p{static{a(this,"SumLayer")}constructor({axis:e=-1,keepdims:s=!0,...t}){super(t),this._axis=typeof e=="number"?[e]:e,this._keepdims=s}get dependentLayers(){const e=[];return typeof this._axis=="string"&&e.push(this._axis),e}calc(e){const s=typeof this._axis=="string"?this.graph.getNode(this._axis).outputValue.toArray():this._axis;if(s.includes(-1))this._size=Array(e.dimension).fill(1);else{this._size=e.sizes.concat();for(let t=0;t<s.length;t++)this._size[s[t]]=1}return this._i=e,!this._keepdims&&s.includes(-1)?new o([],e.reduce((t,i)=>t+i,0)):(!this._keepdims&&e instanceof u&&(e=o.fromArray(e)),e.reduce((t,i)=>t+i,0,s,this._keepdims))}grad(e){e.reshape(...this._size);const s=this._i.copy();return s.broadcastOperate(e,(t,i)=>i),s}toObject(){return{type:"sum",axis:this._axis,keepdims:this._keepdims}}}n.registLayer();
