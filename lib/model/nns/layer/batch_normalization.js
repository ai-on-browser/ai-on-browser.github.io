import Tensor from"../../../util/tensor.js";import Layer,{NeuralnetworkLayerException}from"./base.js";export default class BatchNormalizationLayer extends Layer{constructor({scale:t=1,offset:s=0,epsilon:e=1e-12,channel_dim:i=-1,input_mean:a,input_var:n,...r}){if(super(r),this._scale=null,"string"==typeof t?this._scalename=t:this._scale=t,this._offset=null,"string"==typeof s?this._offsetname=s:this._offset=s,this._epsilon=e,this._channel_dim=i,-1!==this._channel_dim&&1!==this._channel_dim)throw new NeuralnetworkLayerException("Invalid channel dimension.");this._input_mean=a,this._input_var=n}get mean(){return this._mean}get var(){return this._var}calc(t){const s=this._channel_dim<0?this._channel_dim+t.dimension:this._channel_dim,e=Array(t.dimension-s).fill(1);if(e[0]=t.sizes[s],this._scalename?(this._scale=this.graph.getNode(this._scalename).outputValue,this._scale.reshape(...e)):"number"==typeof this._scale?this._scale=new Tensor(e,this._scale):Array.isArray(this._scale)&&(this._scale=Tensor.fromArray(this._scale),this._scale.reshape(...e)),this._offsetname?(this._offset=this.graph.getNode(this._offsetname).outputValue,this._offset.reshape(...e)):"number"==typeof this._offset?this._offset=new Tensor(e,this._offset):Array.isArray(this._offset)&&(this._offset=Tensor.fromArray(this._offset),this._offset.reshape(...e)),"string"==typeof this._input_mean?(this._mean=this.graph.getNode(this._input_mean).outputValue,this._mean.reshape(...e)):Array.isArray(this._input_mean)&&(this._mean=Tensor.fromArray(this._input_mean),this._mean.reshape(...e)),"string"==typeof this._input_var?(this._var=this.graph.getNode(this._input_var).outputValue,this._var.reshape(...e)):Array.isArray(this._input_var)&&(this._var=Tensor.fromArray(this._input_var),this._var.reshape(...e)),!this._input_mean||!this._input_var){const e=Array.from({length:t.dimension},((t,s)=>s));e.splice(s,1);const i=e.reduce(((s,e)=>s*t.sizes[e]),1),a=t.reduce(((t,s)=>t+s/i),0,e,!0);if(this._input_mean||(this._mean=a),!this._input_var){const s=t.copy();s.broadcastOperate(a,((t,s)=>(t-s)**2));const n=s.reduce(((t,s)=>t+s/i),0,e,!0);this._var=n}}this._xc=t.copy(),this._xc.broadcastOperate(this._mean,((t,s)=>t-s)),this._xh=this._xc.copy(),this._xh.broadcastOperate(this._var,((t,s)=>t/Math.sqrt(s+this._epsilon)));const i=this._xh.copy();return i.broadcastOperate(this._scale,((t,s)=>t*s)),i.broadcastOperate(this._offset,((t,s)=>t+s)),i}grad(t){const s=this._channel_dim<0?this._channel_dim+t.dimension:this._channel_dim;this._bo=t;const e=this._bo.copy();e.broadcastOperate(this._scale,((t,s)=>t*s));const i=this._xc.copy();i.broadcastOperate(e,((t,s)=>t*s));const a=Array.from({length:t.dimension},((t,s)=>s));a.splice(s,1);const n=a.reduce(((s,e)=>s*t.sizes[e]),1),r=i.reduce(((t,s)=>t+s/n),0,a,!0),h=this._xc.copy();h.broadcastOperate(this._var,((t,s)=>t/(s+this._epsilon))),h.broadcastOperate(r,((t,s)=>t*s)),h.broadcastOperate(e,((t,s)=>s-t)),h.broadcastOperate(this._var,((t,s)=>t/Math.sqrt(s+this._epsilon)));const _=h.reduce(((t,s)=>t+s/n),0,a,!0);if(h.broadcastOperate(_,((t,s)=>t-s)),this._scalename||this._offsetname){const t={};if(this._scalename){const s=this._bo.reduce(((t,s,e)=>t+s*this._xh.at(e)/n),0,a,!0);t[this._scalename]=s}if(this._offsetname){const s=this._bo.reduce(((t,s)=>t+s/n),0,a,!0);t[this._offsetname]=s}return[h,t]}return h}update(t){if(this._scalename&&this._offsetname)return;const s=this._channel_dim<0?this._channel_dim+this._bo.dimension:this._channel_dim,e=Array.from({length:this._bo.dimension},((t,s)=>s));e.splice(s,1);const i=e.reduce(((t,s)=>t*this._bo.sizes[s]),1);if(!this._offsetname){const s=this._bo.reduce(((t,s)=>t+s/i),0,e,!0);this._offset.broadcastOperate(t.delta("offset",s),((t,s)=>t-s))}if(!this._scalename){const s=this._bo.reduce(((t,s,e)=>t+s*this._xh.at(e)/i),0,e,!0);this._scale.broadcastOperate(t.delta("scale",s),((t,s)=>t-s))}}toObject(){return{type:"batch_normalization",scale:this._scalename||this._scale.toArray?.()||this._scale,offset:this._offsetname||this._offset.toArray?.()||this._offset,epsilon:this._epsilon,channel_dim:this._channel_dim,input_mean:this._input_mean,input_var:this._input_var}}}BatchNormalizationLayer.registLayer();