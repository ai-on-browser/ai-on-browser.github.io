import Matrix from"../../../util/matrix.js";import Layer from"./base.js";export default class BatchNormalizationLayer extends Layer{constructor({scale:t=1,offset:s=0,...i}){super(i),this._init_scale=t,this._init_offset=s,this._scale=null,this._offset=null}calc(t){this._scale||(this._scale=new Matrix(1,t.cols,this._init_scale),this._offset=new Matrix(1,t.cols,this._init_offset)),this._s=t.std(0),this._s.map((t=>t+1e-12)),this._xc=t.copySub(t.mean(0)),this._xh=this._xc.copyDiv(this._s);const s=this._xh.copyMult(this._scale);return s.add(this._offset),s}grad(t){this._bo=t;const s=this._bo.copyMult(this._scale),i=this._xc.copyDiv(this._s.copyMap((t=>t**2)));return i.mult(this._xc.copyMult(s).mean(0)),i.isub(s),i.div(this._s),i.sub(i.mean(0)),i}update(t){this._offset.sub(t.delta("offset",this._bo.mean(0))),this._scale.sub(t.delta("scale",this._bo.copyMult(this._xh).mean(0)))}toObject(){return{type:"batch_normalization",scale:this._scale?.toArray()||this._init_scale,offset:this._offset?.toArray()||this._init_offset}}}BatchNormalizationLayer.registLayer();