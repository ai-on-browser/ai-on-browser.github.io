var b=Object.defineProperty;var d=(p,a)=>b(p,"name",{value:a,configurable:!0});import f from"../../../util/tensor.js";import v,{NeuralnetworkLayerException as g}from"./base.js";export default class u extends v{static{d(this,"BatchNormalizationLayer")}constructor({scale:a=1,offset:_=0,epsilon:h=1e-12,channel_dim:o=-1,input_mean:s,input_var:t,...r}){if(super(r),this._scale=null,typeof a=="string"?this._scalename=a:this._scale=a,this._offset=null,typeof _=="string"?this._offsetname=_:this._offset=_,this._epsilon=h,this._channel_dim=o,this._channel_dim!==-1&&this._channel_dim!==1)throw new g("Invalid channel dimension.");this._input_mean=s,this._input_var=t}get mean(){return this._mean}get var(){return this._var}calc(a){const _=this._channel_dim<0?this._channel_dim+a.dimension:this._channel_dim,h=Array(a.dimension-_).fill(1);if(h[0]=a.sizes[_],this._scalename?(this._scale=this.graph.getNode(this._scalename).outputValue,this._scale.reshape(...h)):typeof this._scale=="number"?this._scale=new f(h,this._scale):Array.isArray(this._scale)&&(this._scale=f.fromArray(this._scale),this._scale.reshape(...h)),this._offsetname?(this._offset=this.graph.getNode(this._offsetname).outputValue,this._offset.reshape(...h)):typeof this._offset=="number"?this._offset=new f(h,this._offset):Array.isArray(this._offset)&&(this._offset=f.fromArray(this._offset),this._offset.reshape(...h)),typeof this._input_mean=="string"?(this._mean=this.graph.getNode(this._input_mean).outputValue,this._mean.reshape(...h)):Array.isArray(this._input_mean)&&(this._mean=f.fromArray(this._input_mean),this._mean.reshape(...h)),typeof this._input_var=="string"?(this._var=this.graph.getNode(this._input_var).outputValue,this._var.reshape(...h)):Array.isArray(this._input_var)&&(this._var=f.fromArray(this._input_var),this._var.reshape(...h)),!this._input_mean||!this._input_var){const s=Array.from({length:a.dimension},(n,c)=>c);s.splice(_,1);const t=s.reduce((n,c)=>n*a.sizes[c],1),r=a.reduce((n,c)=>n+c/t,0,s,!0);if(this._input_mean||(this._mean=r),!this._input_var){const n=a.copy();n.broadcastOperate(r,(i,e)=>(i-e)**2);const c=n.reduce((i,e)=>i+e/t,0,s,!0);this._var=c}}this._xc=a.copy(),this._xc.broadcastOperate(this._mean,(s,t)=>s-t),this._xh=this._xc.copy(),this._xh.broadcastOperate(this._var,(s,t)=>s/Math.sqrt(t+this._epsilon));const o=this._xh.copy();return o.broadcastOperate(this._scale,(s,t)=>s*t),o.broadcastOperate(this._offset,(s,t)=>s+t),o}grad(a){const _=this._channel_dim<0?this._channel_dim+a.dimension:this._channel_dim;this._bo=a;const h=this._bo.copy();h.broadcastOperate(this._scale,(i,e)=>i*e);const o=this._xc.copy();o.broadcastOperate(h,(i,e)=>i*e);const s=Array.from({length:a.dimension},(i,e)=>e);s.splice(_,1);const t=s.reduce((i,e)=>i*a.sizes[e],1),r=o.reduce((i,e)=>i+e/t,0,s,!0),n=this._xc.copy();n.broadcastOperate(this._var,(i,e)=>i/(e+this._epsilon)),n.broadcastOperate(r,(i,e)=>i*e),n.broadcastOperate(h,(i,e)=>e-i),n.broadcastOperate(this._var,(i,e)=>i/Math.sqrt(e+this._epsilon));const c=n.reduce((i,e)=>i+e/t,0,s,!0);if(n.broadcastOperate(c,(i,e)=>i-e),this._scalename||this._offsetname){const i={};if(this._scalename){const e=this._bo.reduce((l,m,y)=>l+m*this._xh.at(y)/t,0,s,!0);i[this._scalename]=e}if(this._offsetname){const e=this._bo.reduce((l,m)=>l+m/t,0,s,!0);i[this._offsetname]=e}return[n,i]}return n}update(a){if(this._scalename&&this._offsetname)return;const _=this._channel_dim<0?this._channel_dim+this._bo.dimension:this._channel_dim,h=Array.from({length:this._bo.dimension},(s,t)=>t);h.splice(_,1);const o=h.reduce((s,t)=>s*this._bo.sizes[t],1);if(!this._offsetname){const s=this._bo.reduce((t,r)=>t+r/o,0,h,!0);this._offset.broadcastOperate(a.delta("offset",s),(t,r)=>t-r)}if(!this._scalename){const s=this._bo.reduce((t,r,n)=>t+r*this._xh.at(n)/o,0,h,!0);this._scale.broadcastOperate(a.delta("scale",s),(t,r)=>t-r)}}toObject(){return{type:"batch_normalization",scale:this._scalename||this._scale.toArray?.()||this._scale,offset:this._offsetname||this._offset.toArray?.()||this._offset,epsilon:this._epsilon,channel_dim:this._channel_dim,input_mean:this._input_mean,input_var:this._input_var}}}u.registLayer();
