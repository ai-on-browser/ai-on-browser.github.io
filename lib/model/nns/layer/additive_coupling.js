import Matrix from"../../../util/matrix.js";import NeuralNetwork from"../../neuralnetwork.js";import{FlowLayer}from"./base.js";export default class AdditiveCoupling extends FlowLayer{constructor({d:t=null,net:e=null,...i}){super(i),this._d=t,this._m=null==e?null:e instanceof NeuralNetwork?e:NeuralNetwork.fromObject(e)}calc(t){this._d||(this._d=Math.floor(t.cols/2)),this._m||(this._m=NeuralNetwork.fromObject([{type:"input"},{type:"full",out_size:20,activation:"leaky_relu"},{type:"full",out_size:t.cols-this._d,activation:"leaky_relu"}],null,"adam")),this._o=t.copy();const e=Matrix.zeros(...t.sizes);return e.set(0,this._d,this._m.calc(t.slice(0,this._d,1))),this._o.add(e),this._o}inverse(t){this._o=t.copy();const e=Matrix.zeros(...t.sizes);return e.set(0,this._d,this._m.calc(t.slice(0,this._d,1))),this._o.sub(e),this._o}jacobianDeterminant(){return 1}grad(t){const e=t.copy(),i=Matrix.zeros(...t.sizes),s=this._m.grad(t.slice(this._d,null,1));return i.set(0,0,s),e.add(i),e}update(t){this._m.update(t.lr)}toObject(){return{type:"additive_coupling",net:this._m?.toObject()}}}AdditiveCoupling.registLayer();