import Layer from"./base.js";export default class MultibinTrainableLinearUnitLayer extends Layer{constructor({a:t=1,b:i=0,c:s=null,k:r=10,...h}){super(h),this._k=r,this._a=Array.isArray(t)?t:Array(r+1).fill(t),this._b=Array.isArray(i)?i:Array(r+1).fill(i),this._c=null==s||Array.isArray(s)?s:Array(r).fill(s)}calc(t){if(!this._c){this._c=Array(this._k);const i=t.reduce(((t,i)=>Math.max(t,i)),-1/0),s=t.reduce(((t,i)=>Math.min(t,i)),1/0),r=(i-s)/(this._k+1);for(let t=0;t<this._k;t++)this._c[t]=s+r*(t+1)}this._i=t;const i=t.copy();return i.map((t=>{if(t<=this._c[0])return this._a[0]*t+this._b[0];for(let i=1;i<this._k;i++)if(t<=this._c[i])return this._a[i]*t+this._b[i];return this._a[this._k]*t+this._b[this._k]})),i}grad(t){this._bo=t;const i=t.copy();return i.broadcastOperate(this._i,((t,i)=>{if(i<=this._c[0])return t*this._a[0];for(let s=1;s<this._k;s++)if(i<=this._c[s])return t*this._a[s];return t*this._a[this._k]})),i}update(t){const i=Array(this._k+1).fill(0),s=Array(this._k+1).fill(0);for(let t=0;t<this._i.length;t++)if(this._i.value[t]<=this._c[0])i[0]+=this._bo.value[t]*this._i.value[t],s[0]+=this._bo.value[t];else if(this._i.value[t]>this._c[this._k-1])i[this._k]+=this._bo.value[t]*this._i.value[t],s[this._k]+=this._bo.value[t];else for(let r=1;r<this._k;r++)if(this._i.value[t]<=this._c[r]){i[r]+=this._bo.value[t]*this._i.value[t],s[r]+=this._bo.value[t];break}for(let r=0;r<=this._k;r++)this._a[r]-=t.delta(`a${r}`,i[r]/this._i.length),this._b[r]-=t.delta(`b${r}`,s[r]/this._i.length)}toObject(){return{type:"mtlu",a:this._a,b:this._b,c:this._c,k:this._k}}}MultibinTrainableLinearUnitLayer.registLayer("mtlu");