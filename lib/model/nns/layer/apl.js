var c=Object.defineProperty;var _=(r,i)=>c(r,"name",{value:i,configurable:!0});import y from"./base.js";export default class l extends y{static{_(this,"AdaptivePiecewiseLinearLayer")}constructor({s:i=2,a=.1,b:e=0,...t}){if(super(t),this._s=i,Array.isArray(a))this._a=a;else{this._a=[];for(let s=0;s<i;s++)this._a[s]=Math.random()}this._b=Array.isArray(e)?e:Array(i).fill(0),this._l2_decay=.001}calc(i){this._i=i;const a=i.copy();return a.map(e=>this._a.reduce((t,s,h)=>t+s*Math.max(0,this._b[h]-e),Math.max(0,e))),a}grad(i){this._bo=i;const a=i.copy();return a.broadcastOperate(this._i,(e,t)=>e*this._a.reduce((s,h,o)=>s+(this._b[o]-t>0?h:0),t>0?1:0)),a}update(i){const a=Array(this._s).fill(0),e=Array(this._s).fill(0);for(let t=0;t<this._i.length;t++)for(let s=0;s<this._s;s++)this._b[s]-this._i.value[t]>0&&(a[s]+=this._bo.value[t]*(this._b[s]-this._i.value[t]),e[s]+=this._bo.value[t]*this._a[s]);for(let t=0;t<this._s;t++)this._a[t]-=i.delta(`a${t}`,a[t]/this._i.length+this._a[t]*this._l2_decay),this._b[t]-=i.delta(`b${t}`,e[t]/this._i.length+this._b[t]*this._l2_decay)}toObject(){return{type:"apl",s:this._s,a:this._a,b:this._b}}}l.registLayer("apl");
