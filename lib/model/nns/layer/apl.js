import Layer from"./base.js";export default class AdaptivePiecewiseLinearLayer extends Layer{constructor({s:t=2,a:s=.1,b:i=0,...a}){if(super(a),this._s=t,Array.isArray(s))this._a=s;else{this._a=[];for(let s=0;s<t;s++)this._a[s]=Math.random()}this._b=Array.isArray(i)?i:Array(t).fill(0),this._l2_decay=.001}calc(t){this._i=t;const s=t.copy();return s.map((t=>this._a.reduce(((s,i,a)=>s+i*Math.max(0,this._b[a]-t)),Math.max(0,t)))),s}grad(t){this._bo=t;const s=t.copy();return s.broadcastOperate(this._i,((t,s)=>t*this._a.reduce(((t,i,a)=>t+(this._b[a]-s>0?i:0)),s>0?1:0))),s}update(t){const s=Array(this._s).fill(0),i=Array(this._s).fill(0);for(let t=0;t<this._i.length;t++)for(let a=0;a<this._s;a++)this._b[a]-this._i.value[t]>0&&(s[a]+=this._bo.value[t]*(this._b[a]-this._i.value[t]),i[a]+=this._bo.value[t]*this._a[a]);for(let a=0;a<this._s;a++)this._a[a]-=t.delta(`a${a}`,s[a]/this._i.length+this._a[a]*this._l2_decay),this._b[a]-=t.delta(`b${a}`,i[a]/this._i.length+this._b[a]*this._l2_decay)}toObject(){return{type:"apl",s:this._s,a:this._a,b:this._b}}}AdaptivePiecewiseLinearLayer.registLayer("apl");