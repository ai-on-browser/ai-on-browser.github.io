import Matrix from"../../../util/matrix.js";const layerClasses={};export class NeuralnetworkLayerException extends Error{constructor(e,r){super(e),this.value=r,this.name="NeuralnetworkLayerException"}}export default class Layer{constructor({}){}static fromObject(e){const r=layerClasses[e.type];if(!r)throw new NeuralnetworkLayerException(`Invalid layer type: ${e.type}`);return new r(e)}static registLayer(e,r){if(r||=this,e||r===Layer||(e=this.name.replace(/Layer$/,"").replace(/[A-Z]/g,(e=>"_"+e.toLowerCase())).slice(1),r=this),layerClasses[e])throw new NeuralnetworkLayerException(`Layer name '${e}' already exists.`);layerClasses[e]=r}bind(e){}calc(...e){throw new NeuralnetworkLayerException("Not impleneted",this)}grad(...e){throw new NeuralnetworkLayerException("Not impleneted",this)}update(e){}toObject(){for(const e of Object.keys(layerClasses))if(this.constructor===layerClasses[e])return{type:e};return{}}}export class LossLayer extends Layer{calc(e){return e}grad(){return new Matrix(1,1,1)}}layerClasses.loss=LossLayer;export class FlowLayer extends Layer{inverse(...e){throw new NeuralnetworkLayerException("Not impleneted",this)}jacobianDeterminant(){throw new NeuralnetworkLayerException("Not impleneted",this)}}