import{MatrixException}from"../../util/matrix.js";import{NeuralnetworkException}from"../neuralnetwork.js";import{Layer}from"./layer/index.js";export default class Graph{constructor(){this._nodes=[]}get nodes(){return this._nodes}get size(){return this._nodes.length}static fromObject(t){const e=new Graph;for(const n of t){const t=Layer.fromObject(n);"string"==typeof n.input&&(n.input=[n.input]),e.add(t,n.name,n.input)}return e}toObject(){const t=[];for(let e=0;e<this._nodes.length;e++){const n=this._nodes[e],s=n.layer.toObject();n.name&&(s.name=n.name),n.input&&(s.input=n.input),t.push(s)}return t}add(t,e,n){let s=[];n?("string"==typeof n&&(n=[n]),s=n.map((t=>{const e=t&&t.match(/\[([0-9]+)\]$/),n=e?+e[1]:null,s=e?t.slice(0,-e[0].length):t;for(let t=0;t<this._nodes.length;t++)if(this._nodes[t].name===s)return{index:t,subscript:n};throw new NeuralnetworkException(`Unknown input name '${t}'.`)}))):this._nodes.length>0&&s.push({index:this._nodes.length-1,subscript:null}),t.graph=this;const r={layer:t,name:e,input:n,parents:s,lastOutputValue:null,lastGradientValue:null,get lastOutputSize(){return this.lastOutputValue.sizes}};if(e&&this.getNode(e))throw new MatrixException(`Duplicate layer name ${e}`);this._nodes.push(r)}getNode(t){for(let e=0;e<this._nodes.length;e++)if(this._nodes[e].name===t)return this._nodes[e]}}