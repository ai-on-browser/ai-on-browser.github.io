var u=Object.defineProperty;var O=(d,i)=>u(d,"name",{value:i,configurable:!0});import M from"../../../util/matrix.js";export class SantaSSSOptimizer{static{O(this,"SantaSSSOptimizer")}constructor(i=.01,a=.95,o=100,m=5,n=16,e=.01){this._learningrate=i,this._sigma=a,this._beta=c=>c**.5,this._burnin=o,this._c=m,this._n=n,this._lambda=e,this._z=()=>{const c=Math.random(),b=Math.random();return Math.sqrt(-2*Math.log(c))*Math.cos(2*Math.PI*b)}}set learningRate(i){this._learningrate=i}manager(){const i=this;return{get lr(){return i._learningrate},params:{},delta(a,o){const m=typeof o=="number";if(m&&(o=new M(1,1,o)),!this.params[a]){const p=o.copy();p.fill(0);const t=o.copy();t.fill(Math.sqrt(this.lr)*i._c);const h=o.copy();h.map(()=>Math.sqrt(this.lr)*i._z()),this.params[a]={v:p.copy(),g:p,a:t,u:h,t:1}}this.params[a].v.broadcastOperate(o,(p,t)=>p*i._sigma+t**2*(1-i._sigma)/i._n**2);const n=this.params[a].g.copy(),e=this.params[a].u.copy();if(this.params[a].g=this.params[a].v.copy(),this.params[a].g.map(p=>1/Math.sqrt(i._lambda+Math.sqrt(p))),this.params[a].t<i._burnin){const p=i._beta(this.params[a].t),t=this.lr/p;this.params[a].a.broadcastOperate(this.params[a].u,(s,r)=>s+(r**2-t)/2),this.params[a].u.broadcastOperate(this.params[a].a,(s,r)=>Math.exp(-r/2)*s);const h=n.copy();h.broadcastOperate(this.params[a].g,(s,r)=>s/r),h.broadcastOperate(e,(s,r)=>t*(1-s)/r),this.params[a].u.broadcastOperate(h,(s,r)=>s+r),this.params[a].u.broadcastOperate(n,(s,r)=>s+Math.sqrt(2*t*r)*i._z());const _=this.params[a].g.copy();_.broadcastOperate(o,(s,r)=>s*r),this.params[a].u.broadcastOperate(_,(s,r)=>s-this.lr*r),this.params[a].u.broadcastOperate(this.params[a].a,(s,r)=>Math.exp(-r/2)*s),this.params[a].a.broadcastOperate(this.params[a].u,(s,r)=>s+(r**2-t)/2)}else{this.params[a].u.broadcastOperate(this.params[a].a,(t,h)=>Math.exp(-h/2)*t);const p=this.params[a].g.copy();p.broadcastOperate(o,(t,h)=>t*h),this.params[a].u.broadcastOperate(p,(t,h)=>t-this.lr*h),this.params[a].u.broadcastOperate(this.params[a].a,(t,h)=>Math.exp(-h/2)*t)}const c=this.params[a].g.copy();c.broadcastOperate(e,(p,t)=>p*t/2);const b=this.params[a].g.copy();b.broadcastOperate(this.params[a].u,(p,t)=>p*t/2);const g=c.copy();return g.broadcastOperate(b,(p,t)=>-p-t),this.params[a].t++,m?g.toScaler():g}}}}
