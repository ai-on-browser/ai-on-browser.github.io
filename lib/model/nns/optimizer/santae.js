var l=Object.defineProperty;var _=(b,r)=>l(b,"name",{value:r,configurable:!0});import d from"../../../util/matrix.js";export class SantaEOptimizer{static{_(this,"SantaEOptimizer")}constructor(r=.01,t=.95,i=100,n=5,e=16,g=.01){this._learningrate=r,this._sigma=t,this._beta=o=>o**.5,this._burnin=i,this._c=n,this._n=e,this._lambda=g,this._z=()=>{const o=Math.random(),c=Math.random();return Math.sqrt(-2*Math.log(o))*Math.cos(2*Math.PI*c)}}set learningRate(r){this._learningrate=r}manager(){const r=this;return{get lr(){return r._learningrate},params:{},delta(t,i){const n=typeof i=="number";if(n&&(i=new d(1,1,i)),!this.params[t]){const a=i.copy();a.fill(0);const s=i.copy();s.fill(Math.sqrt(this.lr)*r._c);const m=i.copy();m.map(()=>Math.sqrt(this.lr)*r._z()),this.params[t]={v:a.copy(),g:a,a:s,u:m,t:1}}this.params[t].v.broadcastOperate(i,(a,s)=>a*r._sigma+s**2*(1-r._sigma)/r._n**2);const e=this.params[t].g.copy(),g=this.params[t].u.copy();if(this.params[t].g=this.params[t].v.copy(),this.params[t].g.map(a=>1/Math.sqrt(r._lambda+Math.sqrt(a))),this.params[t].t<r._burnin){const a=r._beta(this.params[t].t),s=this.lr/a;this.params[t].a.broadcastOperate(this.params[t].u,(p,h)=>p+(h**2-s));const m=e.copy();m.broadcastOperate(this.params[t].g,(p,h)=>p/h),this.params[t].u.broadcastOperate(m,(p,h)=>s*(1-h)/p),this.params[t].u.broadcastOperate(e,(p,h)=>p+Math.sqrt(2*s*h)*r._z())}else this.params[t].u.fill(0);g.broadcastOperate(this.params[t].a,(a,s)=>a*(1-s)),this.params[t].u.broadcastOperate(g,(a,s)=>a+s);const o=this.params[t].g.copy();o.broadcastOperate(i,(a,s)=>a*s),this.params[t].u.broadcastOperate(o,(a,s)=>a-this.lr*s);const c=this.params[t].u.copy();return c.broadcastOperate(this.params[t].g,(a,s)=>-a*s),this.params[t].t++,n?c.toScaler():c}}}}
