var m=Object.defineProperty;var h=(p,t)=>m(p,"name",{value:t,configurable:!0});import o from"../../util/matrix.js";export class SGDOptimizer{static{h(this,"SGDOptimizer")}constructor(t){this._learningrate=t}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},delta(r,a){if(typeof a=="number")return a*this.lr;const i=a.copy();return i.map(s=>s*this.lr),i}}}}export class MomentumOptimizer{static{h(this,"MomentumOptimizer")}constructor(t,r=.9){this._learningrate=t,this._beta=r}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(typeof a=="number")return this.params[r]=(this.params[r]??a)*t._beta+a*(1-t._beta),this.params[r]*this.lr;this.params[r]||(this.params[r]=a.copy()),this.params[r].broadcastOperate(a,(s,e)=>s*t._beta+e*(1-t._beta));const i=this.params[r].copy();return i.map(s=>s*this.lr),i}}}}export class RMSPropOptimizer{static{h(this,"RMSPropOptimizer")}constructor(t,r=.999){this._learningrate=t,this._beta=r}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(typeof a=="number")return this.params[r]=(this.params[r]??a**2)*t._beta+(1-t._beta)*a**2,this.lr*a/Math.sqrt(this.params[r]+1e-12);this.params[r]||(this.params[r]=a.copy(),this.params[r].map(s=>s**2)),this.params[r].broadcastOperate(a,(s,e)=>s*t._beta+(1-t._beta)*e*e);const i=a.copy();return i.broadcastOperate(this.params[r],(s,e)=>s*(this.lr/Math.sqrt(e+1e-12))),i}}}}export class AdamOptimizer{static{h(this,"AdamOptimizer")}constructor(t=.001,r=.9,a=.999){this._learningrate=t,this._beta1=r,this._beta2=a}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){const i=typeof a=="number";if(i&&(a=new o(1,1,a)),!this.params[r]){const e=a.copy();e.map(n=>n**2),this.params[r]={v:a.copy(),s:e}}this.params[r].v.broadcastOperate(a,(e,n)=>e*t._beta1+n*(1-t._beta1)),this.params[r].s.broadcastOperate(a,(e,n)=>e*t._beta2+(1-t._beta2)*n*n);const s=this.params[r].v.copy();return s.broadcastOperate(this.params[r].s,(e,n)=>e*(this.lr/Math.sqrt(n+1e-12))),i?s.toScaler():s}}}}
