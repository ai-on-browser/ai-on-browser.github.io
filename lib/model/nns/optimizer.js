export class SGDOptimizer{constructor(t){this._learningrate=t}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},delta(t,r){return r.copyMult(this.lr)}}}}export class MomentumOptimizer{constructor(t,r=.9){this._learningrate=t,this._beta=r}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(!this.params[r])return this.params[r]=a,a.copyMult(this.lr);const e=this.params[r].copyMult(t._beta);return e.add(a.copyMult(1-t._beta)),this.params[r]=e,e.copyMult(this.lr)}}}}export class RMSPropOptimizer{constructor(t,r=.999){this._learningrate=t,this._beta=r}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(!this.params[r])return this.params[r]=a.copyMult(a),a.copyMult(this.lr);const e=this.params[r].copyMult(t._beta);return e.add(a.copyMap((r=>(1-t._beta)*r*r))),this.params[r]=e,a.copyMult(e.copyMap((t=>this.lr/Math.sqrt(t+1e-12))))}}}}export class AdamOptimizer{constructor(t=.001,r=.9,a=.999){this._learningrate=t,this._beta1=r,this._beta2=a}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(!this.params[r])return this.params[r]={v:a,s:a.copyMult(a)},a.copyMult(this.lr);const e=this.params[r].v.copyMult(t._beta1);e.add(a.copyMult(1-t._beta1));const s=this.params[r].s.copyMult(t._beta2);return s.add(a.copyMap((r=>(1-t._beta2)*r*r))),this.params[r]={v:e,s:s},e.copyMult(s.copyMap((t=>this.lr/Math.sqrt(t+1e-12))))}}}}