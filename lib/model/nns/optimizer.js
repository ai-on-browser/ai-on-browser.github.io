import Matrix from"../../util/matrix.js";export class SGDOptimizer{constructor(t){this._learningrate=t}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},delta(t,r){return Matrix.mult(r,this.lr)}}}}export class MomentumOptimizer{constructor(t,r=.9){this._learningrate=t,this._beta=r}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(!this.params[r])return this.params[r]=a,Matrix.mult(a,this.lr);const e=Matrix.mult(this.params[r],t._beta);return e.add(Matrix.mult(a,1-t._beta)),this.params[r]=e,Matrix.mult(e,this.lr)}}}}export class RMSPropOptimizer{constructor(t,r=.999){this._learningrate=t,this._beta=r}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(!this.params[r])return this.params[r]=Matrix.mult(a,a),Matrix.mult(a,this.lr);const e=Matrix.mult(this.params[r],t._beta);return e.add(Matrix.map(a,(r=>(1-t._beta)*r*r))),this.params[r]=e,Matrix.mult(a,Matrix.map(e,(t=>this.lr/Math.sqrt(t+1e-12))))}}}}export class AdamOptimizer{constructor(t=.001,r=.9,a=.999){this._learningrate=t,this._beta1=r,this._beta2=a}set learningRate(t){this._learningrate=t}manager(){const t=this;return{get lr(){return t._learningrate},params:{},delta(r,a){if(!this.params[r])return this.params[r]={v:a,s:Matrix.mult(a,a)},Matrix.mult(a,this.lr);const e=Matrix.mult(this.params[r].v,t._beta1);e.add(Matrix.mult(a,1-t._beta1));const i=Matrix.mult(this.params[r].s,t._beta2);return i.add(Matrix.map(a,(r=>(1-t._beta2)*r*r))),this.params[r]={v:e,s:i},Matrix.mult(e,Matrix.map(i,(t=>this.lr/Math.sqrt(t+1e-12))))}}}}