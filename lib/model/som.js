import{Matrix}from"../util/math.js";export default class SOM{constructor(t,i,e=20){this.in_size=t,this.out_size=i,this.resolution=e,this._sigma0=1,this._init_method="PCA",this._epoch=0,this._z=[];let s=Array(i).fill(0);do{this._z.push([].concat(s));for(let t=i-1;t>=0&&(s[t]++,!(s[t]<this.resolution));t--)s[t]=0}while(s.reduce(((t,i)=>t+i),0)>0);this._y=null}get _sigma(){return Math.max(this._sigma0*(1-this._epoch/20),.2)}_z_distance(t,i){let e=0;for(let s=0;s<this.out_size;s++)e+=(this._z[t][s]-this._z[i][s])**2;return e}_find_near_idx(t){const i=t.length,e=this.in_size,s=[];for(let h=0;h<i;h++){let i=1/0,_=-1;for(let s=0;s<this._y.length;s++){let r=0;for(let i=0;i<e;i++)r+=(t[h][i]-this._y[s][i])**2;r<i&&(i=r,_=s)}s.push(_)}return s}fit(t){const i=t,e=i.length,s=this.in_size;if(!this._y)if("random"===this._init_method)this._y=Matrix.randn(this._z.length,s).toArray();else if("PCA"===this._init_method){const i=new Matrix(e,s,t),h=i.cov(),[_,r]=h.eigen(),n=(_.reduce(((t,i)=>t+i)),new Matrix(1,_.length,_.map((t=>Math.sqrt(t)))));n.repeat(this._z.length,0),n.mult(i.block(0,0,this._z.length,_.length)),this._y=n.dot(r.t).toArray()}const h=this._find_near_idx(i),_=[];for(let t=0;t<e;t++){_[t]=[];this._z[h[t]];for(let i=0;i<this._z.length;i++){let e=this._z_distance(h[t],i);_[t][i]=Math.exp(-e/(2*this._sigma**2))}}for(let t=0;t<this._y.length;t++){let h=Array(s).fill(0),r=0;for(let n=0;n<e;n++){r+=_[n][t];for(let e=0;e<s;e++)h[e]+=_[n][t]*i[n][e]}for(let i=0;i<s;i++)this._y[t][i]=h[i]/r}this._epoch++}predict(t){return this._find_near_idx(t).map((t=>this._z[t]))}}