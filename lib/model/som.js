var g=Object.defineProperty;var f=(c,n)=>g(c,"name",{value:n,configurable:!0});import d from"../util/matrix.js";export default class x{static{f(this,"SOM")}constructor(n,_,r=20){this.in_size=n,this.out_size=_,this.resolution=r,this._sigma0=1,this._init_method="PCA",this._epoch=0,this._z=[];const t=Array(_).fill(0);do{this._z.push([].concat(t));for(let h=_-1;h>=0&&(t[h]++,!(t[h]<this.resolution));h--)t[h]=0}while(t.reduce((h,l)=>h+l,0)>0);this._y=null}get _sigma(){return Math.max(this._sigma0*(1-this._epoch/20),.2)}_z_distance(n,_){let r=0;for(let t=0;t<this.out_size;t++)r+=(this._z[n][t]-this._z[_][t])**2;return r}_find_near_idx(n){const _=n.length,r=this.in_size,t=[];for(let h=0;h<_;h++){let l=1/0,i=-1;for(let s=0;s<this._y.length;s++){let o=0;for(let e=0;e<r;e++)o+=(n[h][e]-this._y[s][e])**2;o<l&&(l=o,i=s)}t.push(i)}return t}fit(n){const _=n,r=_.length,t=this.in_size;if(!this._y){if(this._init_method==="random")this._y=d.randn(this._z.length,t).toArray();else if(this._init_method==="PCA"){const i=new d(r,t,n),s=i.cov(),[o,e]=s.eigen(),a=new d(1,o.length,o.map(m=>Math.sqrt(m)));a.repeat(this._z.length,0),a.mult(i.block(0,0,this._z.length,o.length)),this._y=a.dot(e.t).toArray()}}const h=this._find_near_idx(_),l=[];for(let i=0;i<r;i++){l[i]=[];for(let s=0;s<this._z.length;s++){let o=this._z_distance(h[i],s);l[i][s]=Math.exp(-o/(2*this._sigma**2))}}for(let i=0;i<this._y.length;i++){let s=Array(t).fill(0),o=0;for(let e=0;e<r;e++){o+=l[e][i];for(let a=0;a<t;a++)s[a]+=l[e][i]*_[e][a]}for(let e=0;e<t;e++)this._y[i][e]=s[e]/o}this._epoch++}predict(n){return this._find_near_idx(n).map(r=>this._z[r])}}
