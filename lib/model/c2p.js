export default class C2P{constructor(t,e){this._r=t,this._m=e,this._cutoff_scale=3}_distance(t,e){return Math.sqrt(t.reduce(((t,n,l)=>t+(n-e[l])**2),0))}_mean(t){const e=t[0].concat();for(let n=1;n<t.length;n++)for(let l=0;l<e.length;l++)e[l]+=t[n][l];return e.map((e=>e/t.length))}fit(t){this._n=t.length;let e=t.map(((t,e)=>({v:t,i:[e]})));for(;this._n>this._m&&e.length!==this._m;){const t=[];for(let n=0;n<e.length;n++){t[n]=[];for(let l=0;l<n;l++)t[n][l]=t[l][n]=this._distance(e[n].v,e[l].v)}const n=[],l=[];for(let s=0;s<e.length;s++){l[s]={i:s,d:1/0};for(let e=0;e<t[s].length;e++)s!==e&&t[s][e]<l[s].d&&(l[s].d=t[s][e],n[s]=e)}let s;l.sort(((t,e)=>e.d-t.d));do{s=[];const t=e.map(((t,e)=>e));for(;t.length>0;){const l=[],i=[t[0]];for(;i.length>0;){const e=i.pop(),s=t.indexOf(e);s<0||(l.push(e),t.splice(s,1),null!==n[e]&&i.push(n[e]),i.push(...t.filter((t=>n[t]===e))))}if(1===l.length){s.push(e[l[0]]);continue}const r=this._mean(l.map((t=>e[t].v))),h=[];if(this._cutoff_scale>0){const t=l.map((t=>this._distance(r,e[t].v))),n=t.reduce(((t,e)=>t+e),0)/l.length;for(let s=0;s<l.length;s++)if(!(t[s]>=this._cutoff_scale*n))for(let t=0;t<l.length;t++)h.push(...e[l[t]].i)}else for(let t=0;t<l.length;t++)h.push(...e[l[t]].i);s.push({v:r,i:h})}if(s.length<this._m){let t=s.length;for(let e=0;e<l.length&&t<this._m;e++)null!=n[l[e].i]&&(n[l[e].i]=null,t++)}}while(s.length<this._m);e=s}const n=[],l=[];for(let t=0;t<e.length;t++){l[t]=[],l[t][t]=0;for(let n=0;n<t;n++)l[t][n]=l[n][t]=this._distance(e[t].v,e[n].v);n[t]={repr:[e[t].v],index:e[t].i,distance:0,children:[]}}for(;n.length>1;){let t=0,e=1,s=1/0;const i=n.length;for(let n=0;n<i;n++)for(let r=n+1;r<i;r++)l[n][r]<s&&(t=n,e=r,s=l[n][r]);const r=[...n[t].repr,...n[e].repr],h=this._mean(r),o=r.map(((t,e)=>[this._distance(t,h),e]));o.sort(((t,e)=>t[0]-e[0]));const c=o.slice(0,this._r).map((t=>r[t[1]]));for(let s=0;s<i;s++){if(s===t||s===e){l[t][s]=0;continue}let i=1/0;for(let t=0;t<n[s].repr.length;t++)for(let e=0;e<c.length;e++){const l=this._distance(n[s].repr[t],c[e]);l<i&&(i=l)}l[s][t]=l[t][s]=i,l[s].splice(e,1)}l[t].splice(e,1),l.splice(e,1),n[t]={repr:c,index:[...n[t].index,...n[e].index],distance:s,children:[n[t],n[e]]},n.splice(e,1)}this._root=n[0]}getClusters(t){const e=[this._root];for(;e.length<t;){let t=0,n=-1;for(let l=0;l<e.length;l++){const s=e[l];s.children.length>0&&s.distance>t&&(n=l,t=s.distance)}if(-1===n)break;const l=e[n];e.splice(n,1,l.children[0],l.children[1])}return e}predict(t){const e=Array(this._n).fill(-1),n=this.getClusters(t);for(let t=0;t<n.length;t++){const l=n[t].index;for(let n=0;n<l.length;n++)e[l[n]]=t}return e}}