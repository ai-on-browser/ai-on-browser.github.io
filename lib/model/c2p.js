var v=Object.defineProperty;var x=(u,o)=>v(u,"name",{value:o,configurable:!0});export default class w{static{x(this,"C2P")}constructor(o,e){this._r=o,this._m=e,this._cutoff_scale=3}_distance(o,e){return Math.sqrt(o.reduce((c,l,t)=>c+(l-e[t])**2,0))}_mean(o){const e=o[0].concat();for(let c=1;c<o.length;c++)for(let l=0;l<e.length;l++)e[l]+=o[c][l];return e.map(c=>c/o.length)}fit(o){this._n=o.length;let e=o.map((t,n)=>({v:t,i:[n]}));for(;this._n>this._m&&e.length!==this._m;){const t=[];for(let s=0;s<e.length;s++){t[s]=[];for(let i=0;i<s;i++)t[s][i]=t[i][s]=this._distance(e[s].v,e[i].v)}const n=[],d=[];for(let s=0;s<e.length;s++){d[s]={i:s,d:1/0};for(let i=0;i<t[s].length;i++)s!==i&&t[s][i]<d[s].d&&(d[s].d=t[s][i],n[s]=i)}d.sort((s,i)=>i.d-s.d);let _;do{_=[];const s=e.map((i,f)=>f);for(;s.length>0;){const i=[],f=[s[0]];for(;f.length>0;){const h=f.pop(),a=s.indexOf(h);a<0||(i.push(h),s.splice(a,1),n[h]!==null&&f.push(n[h]),f.push(...s.filter(p=>n[p]===h)))}if(i.length===1){_.push(e[i[0]]);continue}const m=this._mean(i.map(h=>e[h].v)),r=[];if(this._cutoff_scale>0){const h=i.map(p=>this._distance(m,e[p].v)),a=h.reduce((p,g)=>p+g,0)/i.length;for(let p=0;p<i.length;p++)if(!(h[p]>=this._cutoff_scale*a))for(let g=0;g<i.length;g++)r.push(...e[i[g]].i)}else for(let h=0;h<i.length;h++)r.push(...e[i[h]].i);_.push({v:m,i:r})}if(_.length<this._m){let i=_.length;for(let f=0;f<d.length&&i<this._m;f++)n[d[f].i]!=null&&(n[d[f].i]=null,i++)}}while(_.length<this._m);e=_}const c=[],l=[];for(let t=0;t<e.length;t++){l[t]=[],l[t][t]=0;for(let n=0;n<t;n++)l[t][n]=l[n][t]=this._distance(e[t].v,e[n].v);c[t]={repr:[e[t].v],index:e[t].i,distance:0,children:[]}}for(;c.length>1;){let t=0,n=1,d=1/0;const _=c.length;for(let r=0;r<_;r++)for(let h=r+1;h<_;h++)l[r][h]<d&&(t=r,n=h,d=l[r][h]);const s=[...c[t].repr,...c[n].repr],i=this._mean(s),f=s.map((r,h)=>[this._distance(r,i),h]);f.sort((r,h)=>r[0]-h[0]);const m=f.slice(0,this._r).map(r=>s[r[1]]);for(let r=0;r<_;r++){if(r===t||r===n){l[t][r]=0;continue}let h=1/0;for(let a=0;a<c[r].repr.length;a++)for(let p=0;p<m.length;p++){const g=this._distance(c[r].repr[a],m[p]);g<h&&(h=g)}l[r][t]=l[t][r]=h,l[r].splice(n,1)}l[t].splice(n,1),l.splice(n,1),c[t]={repr:m,index:[...c[t].index,...c[n].index],distance:d,children:[c[t],c[n]]},c.splice(n,1)}this._root=c[0]}getClusters(o){const e=[this._root];for(;e.length<o;){let c=0,l=-1;for(let n=0;n<e.length;n++){const d=e[n];d.children.length>0&&d.distance>c&&(l=n,c=d.distance)}if(l===-1)break;const t=e[l];e.splice(l,1,t.children[0],t.children[1])}return e}predict(o){const e=Array(this._n).fill(-1),c=this.getClusters(o);for(let l=0;l<c.length;l++){const t=c[l].index;for(let n=0;n<t.length;n++)e[t[n]]=l}return e}}
