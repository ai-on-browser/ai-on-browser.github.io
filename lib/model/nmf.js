import Matrix from"../util/matrix.js";export default class NMF{constructor(){}init(t,i=0){if(this._x=Matrix.fromArray(t).t,this._x.value.some((t=>t<0)))throw"Non-negative Matrix Fractorization only can process non negative matrix.";this._r=i,this._W=Matrix.random(this._x.rows,this._r),this._H=Matrix.random(this._r,this._x.cols)}fit(){const t=this._W.rows,i=this._H.cols;let r=this._W.dot(this._H);for(let s=0;s<i;s++)for(let i=0;i<this._r;i++){let o=0;for(let a=0;a<t;a++)o+=this._W.at(a,i)*this._x.at(a,s)/r.at(a,s);this._H.multAt(i,s,o)}for(let s=0;s<this._r;s++)for(let o=0;o<t;o++){let t=0;for(let a=0;a<i;a++)t+=this._x.at(o,a)/r.at(o,a)*this._H.at(s,a);this._W.multAt(o,s,t)}this._W.div(this._W.sum(0))}predict(){return this._H.t.toArray()}}