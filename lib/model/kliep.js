import{Matrix}from"../util/math.js";export class KLIEP{constructor(t,s,a){this._sigma_cand=t,this._fold=s,this._kernelNum=a}_kernel_gaussian(t,s,a){const i=[];for(let o=0;o<s.rows;o++){const e=[];for(let i=0;i<t.rows;i++){const r=s.row(o).copySub(t.row(i));e.push(Math.exp(-r.reduce(((t,s)=>t+s**2),0)/(2*a**2)))}i.push(e)}return Matrix.fromArray(i)}_optimize_alpha(t,s){const a=s.copyDiv(s.norm()**2);let i=Matrix.ones(t.cols,1);i.add(a.copyMult(1-s.tDot(i).value[0])),i.map((t=>t<0?0:t)),i.div(s.tDot(i).value[0]);let o=t.dot(i);o.map(Math.log),o=o.mean();for(let e=3;e>=-3;e--){const r=10**e,l=t.copyMult(r);for(let e=0;e<100;e++){const e=l.tDot(t.dot(i).copyIdiv(1));e.add(i),e.add(a.copyMult(1-s.tDot(e).value[0])),e.map((t=>t<0?0:t)),e.div(s.tDot(e).value[0]);let r=t.dot(e);if(r.map(Math.log),r=r.mean(),r<=o)break;i=e,o=r}}return i}fit(t,s){t=Matrix.fromArray(t),s=Matrix.fromArray(s);const a=t.rows,i=Math.min(this._kernelNum,a),o=this._centers=t.sampleRow(i);if(this._sigma=this._sigma_cand[0],this._sigma_cand.length>1){let i=-1/0;const e=[];for(let t=0;t<a;t++)e[t]=t%this._fold;for(const a of this._sigma_cand){const r=this._kernel_gaussian(t,o,a),l=this._kernel_gaussian(s,o,a).mean(0).t;for(let t=e.length-1;t>0;t--){let s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}let h=0;for(let t=0;t<this._fold;t++){const s=e.map(((s,a)=>[s===t,a])).filter((t=>t[0])).map((t=>t[1])),a=e.map(((s,a)=>[s===t,a])).filter((t=>!t[0])).map((t=>t[1])),i=this._optimize_alpha(r.row(s),l),o=r.row(a).dot(i);o.map(Math.log),h+=o.mean()}h/=this._fold,h>i&&(i=h,this._sigma=a)}}const e=this._kernel_gaussian(t,o,this._sigma),r=this._kernel_gaussian(s,o,this._sigma);this._kw=this._optimize_alpha(e,r.mean(0).t)}predict(t){return this._kernel_gaussian(t,this._centers,this._sigma).dot(this._kw).value}}export class KLIEPCPD{constructor(t,s,a){this._window=t,this._take=s||Math.max(1,Math.floor(t/2)),this._lag=a||Math.max(1,Math.floor(this._take/2))}predict(t){const s=[];for(let a=0;a<t.length-this._window+1;a++)s.push(t.slice(a,a+this._window).flat());const a=[];for(let t=0;t<s.length-this._take-this._lag+1;t++){const i=Matrix.fromArray(s.slice(t,t+this._take)),o=Matrix.fromArray(s.slice(t+this._lag,t+this._take+this._lag)),e=new KLIEP([100,10,1,.1,.01,.001],5,100);let r=0;e.fit(i,o);let l=e.predict(o);for(let t=0;t<l.length;t++)r+=(l[t]-1)**2/l.length;e.fit(o,i),l=e.predict(i);for(let t=0;t<l.length;t++)r+=(l[t]-1)**2/l.length;a.push(r)}return a}}