import{Matrix}from"../util/math.js";export class KLIEP{constructor(t,s,a){this._sigma_cand=t,this._fold=s,this._kernelNum=a}_kernel_gaussian(t,s,a){const o=[];for(let i=0;i<s.rows;i++){const e=[];for(let o=0;o<t.rows;o++){const r=s.row(i).copySub(t.row(o));e.push(Math.exp(-r.reduce(((t,s)=>t+s**2),0)/(2*a**2)))}o.push(e)}return Matrix.fromArray(o)}_optimize_alpha(t,s){const a=s.copyDiv(s.norm()**2);let o=Matrix.ones(t.rows,1);o.add(a.copyMult(1-s.tDot(o).toScaler())),o.map((t=>t<0?0:t)),o.div(s.tDot(o).toScaler());let i=t.tDot(o);i.map(Math.log),i=i.mean();for(let e=3;e>=-3;e--){const r=10**e,l=t.copyMult(r);for(let e=0;e<100;e++){const e=l.dot(t.tDot(o).copyIdiv(1));e.add(o),e.add(a.copyMult(1-s.tDot(e).toScaler())),e.map((t=>t<0?0:t)),e.div(s.tDot(e).toScaler());let r=t.tDot(e);if(r.map(Math.log),r=r.mean(),r<=i)break;o=e,i=r}}return o}fit(t,s){t=Matrix.fromArray(t),s=Matrix.fromArray(s);const a=t.rows,o=Math.min(this._kernelNum,a),i=this._centers=t.sample(o);if(this._sigma=this._sigma_cand[0],this._sigma_cand.length>1){let o=-1/0;const e=[];for(let t=0;t<a;t++)e[t]=t%this._fold;for(const a of this._sigma_cand){const r=this._kernel_gaussian(t,i,a),l=this._kernel_gaussian(s,i,a).mean(1);for(let t=e.length-1;t>0;t--){let s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}let h=0;for(let t=0;t<this._fold;t++){const s=e.map((s=>s===t)),a=e.map((s=>s!==t)),o=this._optimize_alpha(r.col(s),l),i=r.col(a).tDot(o);i.map(Math.log),h+=i.mean()}h/=this._fold,h>o&&(o=h,this._sigma=a)}}const e=this._kernel_gaussian(t,i,this._sigma),r=this._kernel_gaussian(s,i,this._sigma);this._kw=this._optimize_alpha(e,r.mean(1))}predict(t){t=Matrix.fromArray(t);return this._kernel_gaussian(t,this._centers,this._sigma).tDot(this._kw).value}}export class KLIEPCPD{constructor(t,s,a){this._window=t,this._take=s||Math.max(1,Math.floor(t/2)),this._lag=a||Math.max(1,Math.floor(this._take/2))}predict(t){const s=[];for(let a=0;a<t.length-this._window+1;a++)s.push(t.slice(a,a+this._window).flat());const a=[];for(let t=0;t<s.length-this._take-this._lag+1;t++){const o=Matrix.fromArray(s.slice(t,t+this._take)),i=Matrix.fromArray(s.slice(t+this._lag,t+this._take+this._lag)),e=new KLIEP([100,10,1,.1,.01,.001],5,100);let r=0;e.fit(o,i);let l=e.predict(i);for(let t=0;t<l.length;t++)r+=(l[t]-1)**2/l.length;e.fit(i,o),l=e.predict(o);for(let t=0;t<l.length;t++)r+=(l[t]-1)**2/l.length;a.push(r)}return a}}