var p=Object.defineProperty;var y=(v,s)=>p(v,"name",{value:s,configurable:!0});import a from"../util/matrix.js";export class LinearDiscriminant{static{y(this,"LinearDiscriminant")}constructor(){this._x=null,this._y=null,this._w=null,this._w0=null}_s(s){s.map(r=>1/(1+Math.exp(-r)))}init(s,r){this._x=s,this._y=r}fit(){const s=a.fromArray(this._x),r=a.fromArray(this._x.filter((m,h)=>this._y[h]===1)),n=a.fromArray(this._x.filter((m,h)=>this._y[h]===-1)),i=r.mean(0),o=n.mean(0),l=s.cov().inv();this._w=a.sub(i,o).dot(l).t,this._w0=-i.dot(l).dot(i.t).toScaler()/2+o.dot(l).dot(o.t).toScaler()/2+Math.log(r.rows/n.rows)}predict(s){const n=a.fromArray(s).dot(this._w);return n.add(this._w0),this._s(n),n.sub(.5),n.value.map(i=>i<=0?-1:1)}}export class FishersLinearDiscriminant{static{y(this,"FishersLinearDiscriminant")}constructor(){this._x=null,this._y=null,this._w=null,this._m=null}init(s,r){this._x=s,this._y=r}fit(){const s=a.fromArray(this._x.filter((_,l)=>this._y[l]===1)),r=a.fromArray(this._x.filter((_,l)=>this._y[l]===-1)),n=s.mean(0),i=r.mean(0);s.sub(n),r.sub(i);const o=s.tDot(s);o.add(r.tDot(r)),this._w=a.sub(n,i).dot(o.inv()).t,this._m=a.fromArray(this._x).mean(0)}predict(s){const r=a.fromArray(s);return r.sub(this._m),r.dot(this._w).value.map(n=>n<=0?-1:1)}}export class MulticlassLinearDiscriminant{static{y(this,"MulticlassLinearDiscriminant")}constructor(){}fit(s,r){const n=s[0].length;this._c=[...new Set(r)],this._a=[],this._m=[],this._s=a.zeros(n,n);for(let i=0;i<this._c.length;i++){let o=s.filter((_,l)=>r[l]===this._c[i]);this._a[i]=o.length/s.length,o=a.fromArray(o),this._m[i]=o.mean(0),o.sub(this._m[i]),this._s.add(o.tDot(o))}this._s.div(s.length),this._sinv=this._s.inv()}predict(s){const r=a.fromArray(s),n=new a(r.rows,this._c.length);for(let i=0;i<this._c.length;i++){const o=a.sub(r,this._m[i]),_=o.dot(this._sinv);_.mult(o);const l=_.sum(1);l.map(m=>Math.exp(-m/2)*this._a[i]),n.set(0,i,l)}return n.argmax(1).value.map(i=>this._c[i])}}export class LinearDiscriminantAnalysis{static{y(this,"LinearDiscriminantAnalysis")}predict(s,r,n=0){s=a.fromArray(s);const i=s.cols,o=s.rows;let _={},l=0;for(let t=0;t<o;t++)_[r[t]]===void 0&&(_[r[t]]=l++),r[t]=_[r[t]];const m=s.mean(0).value;let h=[];for(let t=0;t<l;h[t++]=Array(i).fill(0));let x=Array(l).fill(0);for(let t=0;t<o;t++){x[r[t]]++;for(let e=0;e<i;e++)h[r[t]][e]+=s.at(t,e)}for(let t=0;t<l;t++)for(let e=0;e<i;e++)h[t][e]/=x[t];let f=[];for(let t=0;t<i;f[t++]=[]);for(let t=0;t<i;t++)for(let e=0;e<=t;e++){let d=0;for(let c=0;c<o;c++)d+=(s.at(c,t)-h[r[c]][t])*(s.at(c,e)-h[r[c]][e]);f[t][e]=f[e][t]=d/o}f=new a(i,i,f);let u=[];for(let t=0;t<i;u[t++]=[]);for(let t=0;t<i;t++)for(let e=0;e<=t;e++){let d=0;for(let c=0;c<l;c++)d+=(h[c][t]-m[t])*(h[c][e]-m[e])*x[c];u[t][e]=u[e][t]=d/o}u=new a(i,i,u);const w=f.solve(u).eigenVectors();return n>0&&n<w.cols&&w.resize(w.rows,n),s.dot(w).toArray()}}
