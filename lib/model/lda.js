import Matrix from"../util/matrix.js";export class LinearDiscriminant{constructor(){this._x=null,this._y=null,this._w=null,this._w0=null}_s(t){t.map((t=>1/(1+Math.exp(-t))))}init(t,r){this._x=t,this._y=r}fit(){const t=Matrix.fromArray(this._x),r=Matrix.fromArray(this._x.filter(((t,r)=>1===this._y[r]))),i=Matrix.fromArray(this._x.filter(((t,r)=>-1===this._y[r]))),s=r.mean(0),e=i.mean(0),a=t.cov().inv();this._w=Matrix.sub(s,e).dot(a).t,this._w0=-s.dot(a).dot(s.t).toScaler()/2+e.dot(a).dot(e.t).toScaler()/2+Math.log(r.rows/i.rows)}predict(t){const r=Matrix.fromArray(t).dot(this._w);return r.add(this._w0),this._s(r),r.sub(.5),r.value.map((t=>t<=0?-1:1))}}export class FishersLinearDiscriminant{constructor(){this._x=null,this._y=null,this._w=null,this._m=null}init(t,r){this._x=t,this._y=r}fit(){const t=Matrix.fromArray(this._x.filter(((t,r)=>1===this._y[r]))),r=Matrix.fromArray(this._x.filter(((t,r)=>-1===this._y[r]))),i=t.mean(0),s=r.mean(0);t.sub(i),r.sub(s);const e=t.tDot(t);e.add(r.tDot(r)),this._w=Matrix.sub(i,s).dot(e.inv()).t,this._m=Matrix.fromArray(this._x).mean(0)}predict(t){const r=Matrix.fromArray(t);return r.sub(this._m),r.dot(this._w).value.map((t=>t<=0?-1:1))}}export class MulticlassLinearDiscriminant{constructor(){}fit(t,r){const i=t[0].length;this._c=[...new Set(r)],this._a=[],this._m=[],this._s=Matrix.zeros(i,i);for(let i=0;i<this._c.length;i++){let s=t.filter(((t,s)=>r[s]===this._c[i]));this._a[i]=s.length/t.length,s=Matrix.fromArray(s),this._m[i]=s.mean(0),s.sub(this._m[i]),this._s.add(s.tDot(s))}this._s.div(t.length),this._sinv=this._s.inv()}predict(t){const r=Matrix.fromArray(t),i=new Matrix(r.rows,this._c.length);for(let t=0;t<this._c.length;t++){const s=Matrix.sub(r,this._m[t]),e=s.dot(this._sinv);e.mult(s);const a=e.sum(1);a.map((r=>Math.exp(-r/2)*this._a[t])),i.set(0,t,a)}return i.argmax(1).value.map((t=>this._c[t]))}}export class LinearDiscriminantAnalysis{predict(t,r,i=0){const s=(t=Matrix.fromArray(t)).cols,e=t.rows;let a={},o=0;for(let t=0;t<e;t++)void 0===a[r[t]]&&(a[r[t]]=o++),r[t]=a[r[t]];const l=t.mean(0).value;let n=[];for(let t=0;t<o;n[t++]=Array(s).fill(0));let h=Array(o).fill(0);for(let i=0;i<e;i++){h[r[i]]++;for(let e=0;e<s;e++)n[r[i]][e]+=t.at(i,e)}for(let t=0;t<o;t++)for(let r=0;r<s;r++)n[t][r]/=h[t];let _=[];for(let t=0;t<s;_[t++]=[]);for(let i=0;i<s;i++)for(let s=0;s<=i;s++){let a=0;for(let o=0;o<e;o++)a+=(t.at(o,i)-n[r[o]][i])*(t.at(o,s)-n[r[o]][s]);_[i][s]=_[s][i]=a/e}_=new Matrix(s,s,_);let c=[];for(let t=0;t<s;c[t++]=[]);for(let t=0;t<s;t++)for(let r=0;r<=t;r++){let i=0;for(let s=0;s<o;s++)i+=(n[s][t]-l[t])*(n[s][r]-l[r])*h[s];c[t][r]=c[r][t]=i/e}c=new Matrix(s,s,c);const m=_.solve(c).eigenVectors();return i>0&&i<m.cols&&m.resize(m.rows,i),t.dot(m).toArray()}}