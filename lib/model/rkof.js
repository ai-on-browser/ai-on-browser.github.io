export default class RKOF{constructor(t,e,s,h="gaussian"){this._k=t,this._h=e,this._alpha=s,this._s=1,"gaussian"===h?this._kernel=t=>Math.exp(-t.reduce(((t,e)=>t+e**2),0)/2)/Math.sqrt(2*Math.PI)**t.length:"epanechnikov"===h?this._kernel=t=>{const e=t.reduce(((t,e)=>t+e**2),0);return e>1?0:(3/4)**t.length*(1-e)}:"volcano"===h&&(this._beta=1,this._kernel=t=>{const e=t.reduce(((t,e)=>t+e**2),0);return e<=1?this._beta:this._beta*Math.exp(1-e)})}_distance(t,e){return Math.sqrt(t.reduce(((t,s,h)=>t+(s-e[h])**2),0))}predict(t){const e=t.length,s=[];for(let h=0;h<e;h++){s[h]=[],s[h][h]={d:0,i:h};for(let e=0;e<h;e++){const i=this._distance(t[h],t[e]);s[h][e]={d:i,i:e},s[e][h]={d:i,i:h}}}const h=[];let i=0;for(let t=0;t<e;t++)s[t].sort(((t,e)=>t.d-e.d)),h[t]=s[t][this._k+1].d,i+=Math.log(1/h[t]);i/=e;const r=Math.exp(i),n=this._h*r**this._alpha,a=[],o=[];for(let i=0;i<e;i++){a[i]=0,o[i]=1/0;for(let e=1;e<=this._k;e++){const r=n*h[s[i][e].i]**this._alpha,l=t[s[i][e].i].map(((e,s)=>(t[i][s]-e)/r));a[i]+=this._kernel(l)/r**2,o[i]=Math.min(o[i],h[s[i][e].i])}a[i]/=this._k}const l=[];for(let t=0;t<e;t++){l[t]=0;let e=0;for(let i=1;i<=this._k;i++){const r=Math.exp(-((h[s[t][i].i]/o[t]-1)**2)/(2*this._s**2));l[t]+=r*a[s[t][i].i],e+=r}l[t]/=e}const c=[];for(let t=0;t<e;t++)0===a[t]?c[t]=1/0:c[t]=l[t]/a[t];return c}}