import{Matrix}from"../util/math.js";class Gaussian{constructor(){this._means=null,this._vars=null}_estimate_prob(t){this._means=t.mean(0),this._vars=t.variance(0)}_data_prob(t){const s=t.copySub(this._means);return s.mult(s),s.div(this._vars),s.map((t=>Math.exp(-t/2))),s.div(this._vars.copyMap((t=>Math.sqrt(2*Math.PI*t)))),s.prod(1)}}export default class NaiveBayes{constructor(t="gaussian"){this._k=0,this._labels=[],this._rate=[],"gaussian"===t&&(this._p_class=Gaussian),this._p=[]}fit(t,s){this._labels=[...new Set(s)],this._p=[],this._rate=[];for(let a=0;a<this._labels.length;a++){const r=Matrix.fromArray(t.filter(((t,r)=>s[r]===this._labels[a])));this._p[a]=new this._p_class,this._p[a]._estimate_prob(r),this._rate[a]=r.rows/t.length}}probability(t){const s=Matrix.fromArray(t),a=[];for(let t=0;t<s.rows;t++)a[t]=[];for(let t=0;t<this._labels.length;t++){const r=this._p[t]._data_prob(s);r.mult(this._rate[t]);for(let e=0;e<s.rows;e++)a[e][t]=r.value[e]}return a}predict(t){const s=Matrix.fromArray(t),a=[];for(let t=0;t<this._labels.length;t++){const r=this._p[t]._data_prob(s);r.mult(this._rate[t]),a.push(r)}return t.map(((t,s)=>{let r=0,e=-1;for(let t=0;t<this._labels.length;t++){let i=a[t].value[s];i>r&&(r=i,e=t)}return this._labels[e]}))}}