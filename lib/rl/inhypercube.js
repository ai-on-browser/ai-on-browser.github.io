import{RLRealRange,RLEnvironmentBase}from"./base.js";export default class InHypercubeRLEnvironment extends RLEnvironmentBase{constructor(t=2){super(),this._d=t,this._position=Array(this._d).fill(0),this._velocity=Array(this._d).fill(0),this._force=.1,this._success_dim=0,this._fail_position=1,this._max_step=20,this._reward={goal:1,step:0,fail:0}}get actions(){return[Array.from({length:2*this._d},((t,s)=>s))]}get states(){const t=[];for(let s=0;s<this._d;s++)t.push(new RLRealRange(-this._fail_position,this._fail_position));for(let s=0;s<this._d;s++)t.push(new RLRealRange(-1,1));return t}reset(){return super.reset(),this._position=Array(this._d).fill(0),this._velocity=Array(this._d).fill(0),this.state()}state(){return[...this._position,...this._velocity]}setState(t){this._position=t.slice(0,this._d),this._velocity=t.slice(this._d)}test(t,s){const i=t.slice(0,this._d),e=t.slice(this._d);e[Math.floor(s[0]/2)]=this._force*(s[0]%2==0?1:-1);for(let t=0;t<this._d;t++)i[t]+=e[t];const r=i[this._success_dim]<=-this._fail_position,o=!r&&i.every((t=>Math.abs(t)>=this._fail_position)),_=this.epoch>=this._max_step||r||o,h=o?this._reward.fail:r?this._reward.goal:this._reward.step;return{state:[...i,...e],reward:h,done:_}}}