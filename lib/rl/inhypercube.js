var p=Object.defineProperty;var n=(_,t)=>p(_,"name",{value:t,configurable:!0});import{RLRealRange as l,RLEnvironmentBase as f}from"./base.js";export default class u extends f{static{n(this,"InHypercubeRLEnvironment")}constructor(t=2){super(),this._d=t,this._position=Array(this._d).fill(0),this._velocity=Array(this._d).fill(0),this._force=.1,this._success_dim=0,this._fail_position=1,this._max_step=20,this._reward={goal:1,step:0,fail:0}}get actions(){return[Array.from({length:this._d*2},(t,s)=>s)]}get states(){const t=[];for(let s=0;s<this._d;s++)t.push(new l(-this._fail_position,this._fail_position));for(let s=0;s<this._d;s++)t.push(new l(-1,1));return t}reset(){return super.reset(),this._position=Array(this._d).fill(0),this._velocity=Array(this._d).fill(0),this.state()}state(){return[...this._position,...this._velocity]}setState(t){this._position=t.slice(0,this._d),this._velocity=t.slice(this._d)}test(t,s){const e=t.slice(0,this._d),o=t.slice(this._d),a=Math.floor(s[0]/2);o[a]=this._force*(s[0]%2===0?1:-1);for(let i=0;i<this._d;i++)e[i]+=o[i];const r=e[this._success_dim]<=-this._fail_position,h=!r&&e.some(i=>Math.abs(i)>=this._fail_position),c=this.epoch>=this._max_step||r||h,d=h?this._reward.fail:r?this._reward.goal:this._reward.step;return{state:[...e,...o],reward:d,done:c}}}
