var a=Object.defineProperty;var i=(n,e)=>a(n,"name",{value:e,configurable:!0});export class RLRealRange{static{i(this,"RLRealRange")}constructor(e,t){this.min=e,this.max=t}toSpace(e){const t=[this.min],s=(this.max-this.min)/e;for(let r=1;r<e;r++)t.push(this.min+r*s);return t.push(this.max),t}toArray(e){const t=this.toSpace(e);return t.slice(1).map((s,r)=>(s+t[r])/2)}indexOf(e,t){return e<=this.min?0:e>=this.max?t-1:Math.floor((e-this.min)/(this.max-this.min)*t)}}export class RLIntRange{static{i(this,"RLIntRange")}constructor(e,t){this.min=e,this.max=t}get length(){return this.max-this.min+1}toArray(e){const t=[];if(this.length<=e)for(let s=this.min;s<=this.max;t.push(s++));else{const s=(this.max-this.min)/(e-1);for(let r=0;r<e-1;r++)t[r]=this.min+Math.round(r*s);t.push(this.max)}return t}indexOf(e,t){return this.length<=t?Math.max(0,Math.min(this.length-1,Math.round(e-this.min))):e<=this.min?0:e>=this.max?t-1:Math.floor((e-this.min)/(this.max-this.min)*t)}}export class RLEnvironmentBase{static{i(this,"RLEnvironmentBase")}constructor(){this._epoch=0}get epoch(){return this._epoch}set reward(e){}clone(){const e=Object.create(Object.getPrototypeOf(this)),t=i(s=>{if(s===null)return null;if(Array.isArray(s))return s.map(r=>t(r));if(typeof s=="object"){const r=Object.create(Object.getPrototypeOf(s));for(const h in s)r[h]=t(s[h]);return r}return s},"deepcopy");for(const s in this)e[s]=t(this[s]);return e}close(){}reset(){this._epoch=0}state(e){throw"Not implemented"}setState(e,t){throw"Not implemented"}step(e,t){const s=this.state(t),r=this.test(s,e,t);return r.invalid||(this._epoch++,this.setState(r.state,t)),r}test(e,t,s){throw"Not implemented"}sample_action(e){return this.actions.map(t=>{if(Array.isArray(t))return t[Math.floor(Math.random()*t.length)];if(t instanceof RLRealRange)return Math.random()*(t.max-t.min)+t.min})}}export default class o extends RLEnvironmentBase{static{i(this,"EmptyRLEnvironment")}constructor(){super(),this.actions=[],this.states=[],this.reward=null}reset(){return this.state()}state(){return[]}setState(){}test(){return{state:this.state(),reward:0,done:!0}}}
