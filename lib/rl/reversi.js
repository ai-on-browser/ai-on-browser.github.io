import{RLEnvironmentBase}from"./base.js";const EMPTY=1,BLACK=2,WHITE=3,flipPiece=t=>2===t?3:3===t?2:1;export default class ReversiRLEnvironment extends RLEnvironmentBase{constructor(){super(),this._size=[8,8],this._board=new ReversiBoard(this._size,this._evaluation),this._turn=2,this._reward={win:1,lose:-1,step:0}}static BLACK=2;static WHITE=3;static EMPTY=1;static OWN=2;static OTHER=3;get actions(){const t=[1];for(let e=0;e<this._size[0];e++)for(let s=0;s<this._size[1];s++)t.push(`${e}_${s}`);return[t]}get states(){const t=[[2,3]];for(let e=0;e<this._size[0]*this._size[1];e++)t.push([1,this.OWN,this.OTHER]);return t}set evaluation(t){this._board._evaluator=this._evaluation=t?(e,s)=>t(this._makeState(e,s,this._turn)):null}_makeState(t,e,s){const i=[s];for(let s=0;s<this._size[0];s++)for(let r=0;r<this._size[1];r++){const n=t.at([s,r]);i.push(1===n?n:n===e?ReversiRLEnvironment.OWN:ReversiRLEnvironment.OTHER)}return i}_state2board(t,e){const s=new ReversiBoard(this._size,this._evaluation),i=flipPiece(e);for(let r=0,n=1;r<this._size[0];r++)for(let o=0;o<this._size[1];o++,n++)1===t[n]?s._board[r][o]=1:t[n]===ReversiRLEnvironment.OWN?s._board[r][o]=e:s._board[r][o]=i;return s}_checkAgent(t){if(!this._agents)throw new Error("Agent does not exist. Call reset to set agents.");if(2!==t&&3!==t)throw new Error("Unknown agent.")}reset(){return super.reset(),this._agents=[2,3],this._board.reset(),this._turn=2,this.state(2)}state(t){return t||(t=this._turn),this._checkAgent(t),this._makeState(this._board,t,this._turn)}setState(t,e){this._turn=t[0],this._board=this._state2board(t,e)}step(t,e){return e||(e=this._turn),super.step(t,e)}test(t,e,s){s||(s=this._turn),this._checkAgent(s);const i=t[0],r=t=>t?n.winner===s?this._reward.win:this._reward.lose:this._reward.step,n=this._state2board(t,s);if(s!==i){const e=n.finish;return{state:t,reward:r(e),done:e,invalid:!0}}if(1===e[0]){const e=n.choices(s),o=n.finish,h=e.length>0;return{state:h?t:this._makeState(n,s,flipPiece(i)),reward:r(o),done:o,invalid:h}}const o=e[0].split("_").map((t=>+t)),h=n.set(o,s),a=n.finish;return h?{state:this._makeState(n,s,flipPiece(i)),reward:r(a),done:a}:{state:t,reward:r(a),done:a,invalid:!0}}}class ReversiBoard{constructor(t,e){this._evaluator=e,this._size=t,this.reset()}get size(){return this._size}get count(){let t=0,e=0;for(let s=0;s<this._size[0];s++)for(let i=0;i<this._size[1];i++)3===this._board[s][i]?e++:2===this._board[s][i]&&t++;return{black:t,white:e}}get finish(){return this.choices(2).length+this.choices(3).length===0}get winner(){if(!this.finish)return null;const t=this.count;return t.black>t.white?2:t.black<t.white?3:null}nextTurn(t){return flipPiece(t)}copy(){const t=new ReversiBoard(this._size,this._evaluator);for(let e=0;e<this._size[0];e++)for(let s=0;s<this._size[1];s++)t._board[e][s]=this._board[e][s];return t}score(t){if(this._evaluator)return this._evaluator(this,t);const e=this.count;return 2===t?e.black-e.white:e.white-e.black}at(t){return this._board[t[0]][t[1]]}set(t,e){const s=this.flipPositions(t[0],t[1],e);if(0===s.length)return!1;this._board[t[0]][t[1]]=e;for(const[t,i]of s)this._board[t][i]=e;return!0}reset(){this._board=[];for(let t=0;t<this._size[0];t++)this._board[t]=Array(this._size[1]).fill(1);const t=Math.floor(this._size[0]/2),e=Math.floor(this._size[1]/2);this._board[t-1][e-1]=2,this._board[t-1][e]=3,this._board[t][e-1]=3,this._board[t][e]=2}choices(t){const e=[];for(let s=0;s<this._size[0];s++)for(let i=0;i<this._size[1];i++)this.flipPositions(s,i,t).length>0&&e.push([s,i]);return e}flipPositions(t,e,s){if(t<0||e<0||this._size[0]<=t||this._size[1]<=e)return[];if(1===s||1!==this._board[t][e])return[];const i=[];for(const[r,n]of[[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1],[0,1]]){let o=t,h=e;const a=[];for(;o+=r,h+=n,!(o<0||h<0||this._size[0]<=o||this._size[1]<=h);){if(this._board[o][h]===s){i.push(...a);break}if(1===this._board[o][h])break;a.push([o,h])}}return i}}