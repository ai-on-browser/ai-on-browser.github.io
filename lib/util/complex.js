var r=Object.defineProperty;var s=(n,a)=>r(n,"name",{value:a,configurable:!0});export default class t{static{s(this,"Complex")}constructor(a=0,i=0){this._real=a,this._imag=i}get real(){return this._real}get imaginary(){return this._imag}abs(){return Math.sqrt(this._real**2+this._imag**2)}conjugate(){return new t(this._real,-this._imag)}add(a){return typeof a=="number"?new t(this._real+a,this._imag):new t(this._real+a._real,this._imag+a._imag)}sub(a){return typeof a=="number"?new t(this._real-a,this._imag):new t(this._real-a._real,this._imag-a._imag)}mult(a){return typeof a=="number"?new t(this._real*a,this._imag*a):new t(this._real*a._real-this._imag*a._imag,this._imag*a._real+this._real*a._imag)}div(a){if(typeof a=="number")return new t(this._real/a,this._imag/a);const i=a._real**2+a._imag**2;return new t((this._real*a._real+this._imag*a._imag)/i,(this._imag*a._real-this._real*a._imag)/i)}sqrt(){const a=Math.atan2(this._imag,this._real)/2,i=Math.sqrt(this.abs());return[new t(Math.cos(a)*i,Math.sin(a)*i),new t(Math.cos(a+Math.PI)*i,Math.sin(a+Math.PI)*i)]}cbrt(){const a=Math.atan2(this._imag,this._real)/3,i=Math.cbrt(this.abs());return[new t(Math.cos(a)*i,Math.sin(a)*i),new t(Math.cos(a+2*Math.PI/3)*i,Math.sin(a+2*Math.PI/3)*i),new t(Math.cos(a+4*Math.PI/3)*i,Math.sin(a+4*Math.PI/3)*i)]}exp(){const a=Math.exp(this._real);return new t(a*Math.cos(this._imag),a*Math.sin(this._imag))}log(){return new t(Math.log(this.abs()),Math.atan2(this._imag,this._real))}}
