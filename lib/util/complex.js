export default class Complex{constructor(a=0,i=0){this._real=a,this._imaginary=i}get real(){return this._real}get imaginary(){return this._imaginary}abs(){return Math.sqrt(this._real**2+this._imaginary**2)}conjugate(){return new Complex(this._real,-this._imaginary)}add(a){return"number"==typeof a?new Complex(this._real+a,this._imaginary):new Complex(this._real+a._real,this._imaginary+a._imaginary)}sub(a){return"number"==typeof a?new Complex(this._real-a,this._imaginary):new Complex(this._real-a._real,this._imaginary-a._imaginary)}mult(a){return"number"==typeof a?new Complex(this._real*a,this._imaginary*a):new Complex(this._real*a._real-this._imaginary*a._imaginary,this._imaginary*a._real+this._real*a._imaginary)}div(a){if("number"==typeof a)return new Complex(this._real/a,this._imaginary/a);const i=a._real**2+a._imaginary**2;return new Complex((this._real*a._real+this._imaginary*a._imaginary)/i,(this._imaginary*a._real-this._real*a._imaginary)/i)}sqrt(){const a=Math.atan2(this._imaginary,this._real)/2,i=Math.sqrt(this.abs());return[new Complex(Math.cos(a)*i,Math.sin(a)*i),new Complex(Math.cos(a+Math.PI)*i,Math.sin(a+Math.PI)*i)]}cbrt(){const a=Math.atan2(this._imaginary,this._real)/3,i=Math.cbrt(this.abs());return[new Complex(Math.cos(a)*i,Math.sin(a)*i),new Complex(Math.cos(a+2*Math.PI/3)*i,Math.sin(a+2*Math.PI/3)*i),new Complex(Math.cos(a+4*Math.PI/3)*i,Math.sin(a+4*Math.PI/3)*i)]}}