export default class Tree{constructor(t,s){this.value=t,this.childs=s?.concat()||[],this.childs.forEach((t=>t.parent=this)),this.parent=null}get length(){return this.childs.length}get depth(){return this.isLeaf()?1:1+Math.max.apply(null,this.childs.map((t=>t.depth)))}*[Symbol.iterator](){yield*this.childs}at(t){return this.childs[t]}push(t){t=t instanceof Tree?t:new Tree(t),this.childs.push(t),t.parent=this}set(t,s){t<0||this.childs.length<=t||(s=s instanceof Tree?s:new Tree(s),this.childs[t].parent=null,this.childs[t]=s,s.parent=this)}removeAt(t){if(!(t<0||this.childs.length<=t))return this.childs[t].parent=null,this.childs.splice(t,1)[0]}clear(){this.childs.forEach((t=>t.parent=null)),this.childs.length=0}isLeaf(){return 0===this.childs.length}isRoot(){return null===this.parent}root(){return this.isRoot()?this:this.parent.root()}leafs(){let t=[];return this.scanLeaf((s=>t.push(s))),t}leafValues(){let t=[];return this.scanLeaf((s=>t.push(s.value))),t}leafCount(){return this.isLeaf()?1:this.childs.reduce(((t,s)=>t+s.leafCount()),0)}forEach(t,s){this.childs.forEach(t,s)}scan(t){t(this),this.childs.forEach((s=>s.scan(t)))}scanLeaf(t){this.isLeaf()?t(this):this.childs.forEach((s=>s.scanLeaf(t)))}}